<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>9f1bc383f94dbc5f5b6e5cac9fa06e0d</guid>
<title>新来个技术总监，仅花 2 小时，撸出一个多线程永动任务，看完直接跪了，真牛逼</title>
<link>https://toutiao.io/k/6u3q7ke</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;span&gt;今天教大家撸一个 Java 的多线程永动任务，&lt;/span&gt;&lt;strong&gt;这个示例的原型是公司自研的多线程异步任务项目&lt;/strong&gt;&lt;span&gt;，我把里面涉及到多线程的代码抽离出来，然后进行一定的改造。&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里面涉及的知识点非常多，特别适合有&lt;strong&gt;一定工作经验&lt;/strong&gt;的同学学习，或者可以直接拿到项目中使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章结构非常简单：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5484261501210653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFO4ibj0RiaKXib9VLSJxTaWCGyibRQyudY2hg9UV61hvpUE2KrlsEX7mvAVn4KMqyyqn0evPn8gZPHNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1652&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 功能说明&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做这个多线程异步任务，主要是因为我们有很多永动的异步任务，什么是永动呢？就是&lt;strong&gt;任务跑起来后，需要一直跑下去。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如消息 Push 任务，因为一直有消息过来，所以需要一直去消费 DB 中的未推送消息，就需要整一个 Push 的永动异步任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的需求其实不难，简单总结一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;能同时执行多个永动的异步任务&lt;/strong&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个异步任务，支持开&lt;strong&gt;多个线程&lt;/strong&gt;去消费这个任务的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持永动异步任务的&lt;strong&gt;优雅关闭&lt;/strong&gt;，即关闭后，需要把所有的数据消费完毕后，再关闭。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完成上面的需求，需要注意几个点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每个&lt;strong&gt;永动任务&lt;/strong&gt;，可以开一个线程去执行；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个&lt;strong&gt;子任务&lt;/strong&gt;，因为需要支持并发，需要用线程池控制；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;永动任务的关闭，需要通知子任务的并发线程，并&lt;strong&gt;支持永动任务和并发子任务的优雅关闭&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 多线程任务示例&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 线程池&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于子任务，需要支持并发，如果每个并发都开一个线程，用完就关闭，对资源消耗太大，所以引入线程池：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TaskProcessUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 每个任务，都有自己单独的线程池&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map&amp;lt;String, ExecutorService&amp;gt; executors = &lt;span&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;&amp;gt;();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 初始化一个线程池&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(String poolName, &lt;span&gt;int&lt;/span&gt; poolSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(poolSize, poolSize,&lt;br/&gt;                &lt;span&gt;0L&lt;/span&gt;, TimeUnit.MILLISECONDS,&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(),&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; ThreadFactoryBuilder().setNameFormat(&lt;span&gt;&quot;Pool-&quot;&lt;/span&gt; + poolName).setDaemon(&lt;span&gt;false&lt;/span&gt;).build(),&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 获取线程池&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService &lt;span&gt;getOrInitExecutors&lt;/span&gt;&lt;span&gt;(String poolName,&lt;span&gt;int&lt;/span&gt; poolSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ExecutorService executorService = executors.get(poolName);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; == executorService) {&lt;br/&gt;            &lt;span&gt;synchronized&lt;/span&gt; (TaskProcessUtil&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;                executorService = executors.get(poolName);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; == executorService) {&lt;br/&gt;                    executorService = init(poolName, poolSize);&lt;br/&gt;                    executors.put(poolName, executorService);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; executorService;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 回收线程资源&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;releaseExecutors&lt;/span&gt;&lt;span&gt;(String poolName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ExecutorService executorService = executors.remove(poolName);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (executorService != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            executorService.shutdown();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个线程池的工具类，这里初始化线程池和回收线程资源很简单，我们主要讨论获取线程池。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取线程池可能会存在并发情况，所以需要加一个 synchronized 锁，然后锁住后，需要对 executorService 进行二次判空校验。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 单个任务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更好讲解单个任务的实现方式，我们的任务主要就是把 Cat 的数据打印出来，Cat 定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Cat&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String catName;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Cat &lt;span&gt;setCatName&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.catName = name;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单个任务主要包括以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;获取永动任务数据&lt;/strong&gt;：这里一般都是扫描 DB，我直接就简单用 queryData() 代替。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多线程执行任务&lt;/strong&gt;：需要把数据拆分成 4 份，然后分别由多线程并发执行，这里可以通过线程池支持；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;永动任务优雅停机&lt;/strong&gt;：当外面通知任务需要停机，需要执行完剩余任务数据，并回收线程资源，退出任务；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;永动执行&lt;/strong&gt;：如果未收到停机命令，任务需要一直执行下去。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接看代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChildTask&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; POOL_SIZE = &lt;span&gt;3&lt;/span&gt;; &lt;span&gt;// 线程池大小&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SPLIT_SIZE = &lt;span&gt;4&lt;/span&gt;; &lt;span&gt;// 数据拆分大小&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String taskName;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 接收jvm关闭信号，实现优雅停机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; terminal = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ChildTask&lt;/span&gt;&lt;span&gt;(String taskName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.taskName = taskName;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 程序执行入口&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doExecute&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;            System.out.println(taskName + &lt;span&gt;&quot;:Cycle-&quot;&lt;/span&gt; + i + &lt;span&gt;&quot;-Begin&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;// 获取数据&lt;/span&gt;&lt;br/&gt;            List&amp;lt;Cat&amp;gt; datas = queryData();&lt;br/&gt;            &lt;span&gt;// 处理数据&lt;/span&gt;&lt;br/&gt;            taskExecute(datas);&lt;br/&gt;            System.out.println(taskName + &lt;span&gt;&quot;:Cycle-&quot;&lt;/span&gt; + i + &lt;span&gt;&quot;-End&quot;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (terminal) {&lt;br/&gt;                &lt;span&gt;// 只有应用关闭，才会走到这里，用于实现优雅的下线&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            i++;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 回收线程池资源&lt;/span&gt;&lt;br/&gt;        TaskProcessUtil.releaseExecutors(taskName);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 优雅停机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;terminal&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 关机&lt;/span&gt;&lt;br/&gt;        terminal = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        System.out.println(taskName + &lt;span&gt;&quot; shut down&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 处理数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doProcessData&lt;/span&gt;&lt;span&gt;(List&amp;lt;Cat&amp;gt; datas, CountDownLatch latch)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (Cat cat : datas) {&lt;br/&gt;                System.out.println(taskName + &lt;span&gt;&quot;:&quot;&lt;/span&gt; + cat.toString() + &lt;span&gt;&quot;,ThreadName:&quot;&lt;/span&gt; + Thread.currentThread().getName());&lt;br/&gt;                Thread.sleep(&lt;span&gt;1000L&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            System.out.println(e.getStackTrace());&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (latch != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                latch.countDown();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 处理单个任务数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;taskExecute&lt;/span&gt;&lt;span&gt;(List&amp;lt;Cat&amp;gt; sourceDatas)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (CollectionUtils.isEmpty(sourceDatas)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 将数据拆成4份&lt;/span&gt;&lt;br/&gt;        List&amp;lt;List&amp;lt;Cat&amp;gt;&amp;gt; splitDatas = Lists.partition(sourceDatas, SPLIT_SIZE);&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; CountDownLatch latch = &lt;span&gt;new&lt;/span&gt; CountDownLatch(splitDatas.size());&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 并发处理拆分的数据，共用一个线程池&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;final&lt;/span&gt; List&amp;lt;Cat&amp;gt; datas : splitDatas) {&lt;br/&gt;            ExecutorService executorService = TaskProcessUtil.getOrInitExecutors(taskName, POOL_SIZE);&lt;br/&gt;            executorService.submit(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;                &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                    doProcessData(datas, latch);&lt;br/&gt;                }&lt;br/&gt;            });&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            latch.await();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            System.out.println(e.getStackTrace());&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 获取永动任务数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Cat&amp;gt; &lt;span&gt;queryData&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        List&amp;lt;Cat&amp;gt; datas = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; i ++) {&lt;br/&gt;            datas.add(&lt;span&gt;new&lt;/span&gt; Cat().setCatName(&lt;span&gt;&quot;罗小黑&quot;&lt;/span&gt; + i));&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; datas;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单解释一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;queryData&lt;/strong&gt;：用于获取数据，实际应用中其实是需要把 queryData 定为抽象方法，然后由各个任务实现自己的方法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;doProcessData&lt;/strong&gt;：数据处理逻辑，实际应用中其实是需要把 doProcessData 定为抽象方法，然后由各个任务实现自己的方法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;taskExecute&lt;/strong&gt;：将数据拆分成 4 份，获取该任务的线程池，并交给线程池并发执行，然后通过 latch.await() 阻塞。当这 4 份数据都执行成功后，阻塞结束，该方法才返回。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;terminal&lt;/strong&gt;：仅用于接受停机命令，这里该变量定义为 volatile，所以多线程内存可见；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;doExecute&lt;/strong&gt;：程序执行入口，封装了每个任务执行的流程，当 terminal=true 时，先执行完任务数据，然后回收线程池，最后退出。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 任务入口&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接上代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LoopTask&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;ChildTask&amp;gt; childTasks;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;initLoopTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        childTasks = &lt;span&gt;new&lt;/span&gt; ArrayList();&lt;br/&gt;        childTasks.add(&lt;span&gt;new&lt;/span&gt; ChildTask(&lt;span&gt;&quot;childTask1&quot;&lt;/span&gt;));&lt;br/&gt;        childTasks.add(&lt;span&gt;new&lt;/span&gt; ChildTask(&lt;span&gt;&quot;childTask2&quot;&lt;/span&gt;));&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;final&lt;/span&gt; ChildTask childTask : childTasks) {&lt;br/&gt;            &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; Runnable() {&lt;br/&gt;                &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                    childTask.doExecute();&lt;br/&gt;                }&lt;br/&gt;            }).start();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;shutdownLoopTask&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!CollectionUtils.isEmpty(childTasks)) {&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (ChildTask childTask : childTasks) {&lt;br/&gt;                childTask.terminal();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String args[])&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception&lt;/span&gt;{&lt;br/&gt;        LoopTask loopTask = &lt;span&gt;new&lt;/span&gt; LoopTask();&lt;br/&gt;        loopTask.initLoopTask();&lt;br/&gt;        Thread.sleep(&lt;span&gt;5000L&lt;/span&gt;);&lt;br/&gt;        loopTask.shutdownLoopTask();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个任务都开一个单独的 Thread，这里我初始化了 2 个永动任务，分别为 childTask1 和 childTask2，然后分别执行，后面 Sleep 了 5 秒后，再关闭任务，我们可以看看是否可以按照我们的预期优雅退出。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 结果分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;childTask1:Cycle-&lt;span&gt;0&lt;/span&gt;-Begin&lt;br/&gt;childTask2:Cycle-&lt;span&gt;0&lt;/span&gt;-Begin&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;0&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;4&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;4&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;0&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;1&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;1&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;2&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;2&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;3&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;3&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cycle-&lt;span&gt;0&lt;/span&gt;-End&lt;br/&gt;childTask2:Cycle-&lt;span&gt;1&lt;/span&gt;-Begin&lt;br/&gt;childTask1:Cycle-&lt;span&gt;0&lt;/span&gt;-End&lt;br/&gt;childTask1:Cycle-&lt;span&gt;1&lt;/span&gt;-Begin&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;0&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;4&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;4&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;0&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask1 shut down&lt;br/&gt;childTask2 shut down&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;1&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;1&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;2&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;2&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cat(catName=罗小黑&lt;span&gt;3&lt;/span&gt;),ThreadName:Pool-childTask1&lt;br/&gt;childTask2:Cat(catName=罗小黑&lt;span&gt;3&lt;/span&gt;),ThreadName:Pool-childTask2&lt;br/&gt;childTask1:Cycle-&lt;span&gt;1&lt;/span&gt;-End&lt;br/&gt;childTask2:Cycle-&lt;span&gt;1&lt;/span&gt;-End&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出数据：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;“Pool-childTask” 是线程池名称；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“childTask” 是任务名称；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Cat(catName=罗小黑)” 是执行的结果；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“childTask shut down” 是关闭标记；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“childTask:Cycle-X-Begin” 和“childTask:Cycle-X-End” 是每一轮循环的开始和结束标记。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们分析一下执行结果：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;childTask1 和 childTask2 分别执行，在第一轮循环中都正常输出了 5 条罗小黑数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二轮执行过程中，我启动了关闭指令，这次第二轮执行没有直接停止，而是先执行完任务中的数据，再执行退出，所以完全符合我们的优雅退出结论。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.5 源码地址&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GitHub 地址：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://github.com/lml200701158/java-study/tree/master/src/main/java/com/java/parallel/pool/ofc&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 写在最后&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于这个经典的线程池使用示例，原项目是我好友&lt;/span&gt;&lt;strong&gt;一灰&lt;/strong&gt;&lt;span&gt;写的，技术水平对标阿里 P7，&lt;/span&gt;&lt;strong&gt;实现得也非常优雅，涉及的知识点非常多&lt;/strong&gt;&lt;span&gt;，非常值得大家学习。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7ee6840568d33485a0f4fbec6c91809b</guid>
<title>如何优雅的解决线上问题？</title>
<link>https://toutiao.io/k/6u6eytw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg4NjYyODc4OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J4jTHmo8Xh6qM32ASOtVbXNoiaegrI26qLRw6r6FTI7dZw6TMT7vecvnjd1O8xSsM5MiajIuQZicxSC6KFK8TMpbg/0?wx_fmt=png&quot; data-nickname=&quot;java突击队&quot; data-alias=&quot;&quot; data-signature=&quot;技术经验分享&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;身为一个程序员，遇到线上问题那都是家常便饭的事儿。&lt;/p&gt;&lt;p&gt;如果你在深夜看到一群同事围在一起，他们是在共同探讨什么哲学问题么？非也，他们一定是遇到了线上BUG。&lt;/p&gt;&lt;p&gt;线上问题只要影响到了核心业务流程那便是事故，所以一旦事故发生，无论你在约会，还是周末打游戏，甚至是在睡觉，只要接到了来自公司的电话，那只能赶紧连上公司网络加班了。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5036261079774376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCPVwHmVZXibnwXCNqe9ZGyQ9kzztrNiac4j98vcAJkwzvTiaSSZ8JsXI3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1241&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;BUG分类&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;线上问题是复杂多变的，我们一般将bug分为系统级别和业务级别bug。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;系统级别bug&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;业务部署在整套系统上运行，一旦出现系统级别bug则业务会被严重拖垮。如CPU爆满、服务不可用、甚至服务器宕机等都属于系统级别的bug。&lt;/p&gt;&lt;p&gt;如果是CPU100%，那是由哪个线程，哪个类，甚至是哪个方法导致的？&lt;/p&gt;&lt;p&gt;若是业务流程正常但是部分服务性能拉跨，那么如何快速定位到问题在哪儿？&lt;/p&gt;&lt;p&gt;因为是线上发生的事儿，所以重点在于如何&lt;span&gt;&lt;strong&gt;迅速解决&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;以下分享我最常用的一些问题排查工具。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;linux定位工具&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;1.CPU高负载，甚至100%？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;perf工具&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;perf是linux的性能分析工具，核心作用之一就是用来查看热点函数的分布情况。&lt;/p&gt;&lt;p&gt;用它可以生成&lt;strong&gt;火焰图&lt;/strong&gt;查看到函数的资源占用情况，函数的调用栈越深火焰就越高。所以对于异常的函数一眼就能看出。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1338212232096184&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCpcCAzx7Wy8iaXrz0WJE1M60JuA9LFHGJyySD7zA6CcC3vbtMVZZSmDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3826&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如上图通过调用栈你可以看出Monitor管程在反复调用enter和wait，这种情况下就可以判断出该程序已经发生死锁且存在性能问题。假设有大量线程请求这段代码，那么CPU资源将被迅速打满！&lt;/p&gt;&lt;p&gt;在著名的“713B站事故”里技术团队在事故发生时就用到了当前工具生成了火焰图，快速地分析出了事故的根因也就是导致CPU100%的lua热点函数。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;2.某一进程存在异常嫌疑，想快速知道它的状态？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;ps命令&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们项目部署的服务器里在跑的进程老多了，java进程、nginx进程、redis、消息队列进程等等。&lt;/p&gt;&lt;p&gt;举个例子，假设在某一流量高峰期系统监控到整个服务性能下降5倍，业务被严重拖垮，在确定没有业务层面bug的情况下大概率就是因为服务性能达到瓶颈了。如何确定瓶颈在哪儿？&lt;/p&gt;&lt;p&gt;大部分情况下通过系统告警就可以知道大概问题所在。如发生消息堆积我们就该怀疑消息生产者和消费者的状态，这个时候就要具体去查看消息队列这一进程。&lt;/p&gt;&lt;p&gt;可以使用一些轻量级的linux命令，如&lt;span&gt;&lt;strong&gt;ps&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@linuxfancy ~]&lt;span&gt;# ps -ef | grep queuejob&lt;/span&gt;&lt;br/&gt; root       &lt;span&gt;1303&lt;/span&gt;      &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; Apr17 ?        &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /usr/sbin/queuejob&lt;br/&gt; root       &lt;span&gt;3260&lt;/span&gt;   &lt;span&gt;3087&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; Apr17 ?        &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /usr/bin/queuejob /bin/sh -c exec -l /bin/bash -c &lt;span&gt;&quot;env GNOME_SHELL_SESSION_MODE=classic gnome-session --session gnome-classic&quot;&lt;/span&gt;&lt;br/&gt; root      &lt;span&gt;24174&lt;/span&gt;  &lt;span&gt;19508&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; grep --color=&lt;span&gt;auto&lt;/span&gt; ssh&lt;br/&gt; [root@linux265 ~]# ps -aux | grep queueA&lt;br/&gt; root       &lt;span&gt;1303&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;82468&lt;/span&gt;  &lt;span&gt;1204&lt;/span&gt; ?        Ss   Apr17   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /usr/sbin/queueA&lt;br/&gt; root       &lt;span&gt;3260&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;52864&lt;/span&gt;   &lt;span&gt;572&lt;/span&gt; ?        Ss   Apr17   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; /usr/bin/queueA /bin/sh -c exec -l &lt;br/&gt; root      &lt;span&gt;24188&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt;  &lt;span&gt;0.0&lt;/span&gt; &lt;span&gt;112652&lt;/span&gt;   &lt;span&gt;956&lt;/span&gt; pts/&lt;span&gt;0&lt;/span&gt;    S+   &lt;span&gt;11&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; grep --color=&lt;span&gt;auto&lt;/span&gt; ssh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该命令还可以用于对进程的资源使用情况进行排序：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[root@linuxfancy ~]# ps aux | sort -nk 3&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[root@linuxfancy ~]&lt;span&gt;# ps aux | sort -rnk 4 &lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;span&gt;3.我想知道内存&amp;amp;磁盘的使用情况？&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;vmstat命令&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写。&lt;/p&gt;&lt;p&gt;它是一个用于监控内存和磁盘使用情况的工具，但是也可以用来查看CPU的一些指标，如中断次数等。使用它可以查看内存使用的详细信息和磁盘的读/写情况。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36810344827586206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCuW5tFtxRRicv4GVqQEf1Mbz5bUNLn7ZEvpjZcogrbvmJdXD50zhl3yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1160&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;以上表头字段的说明如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Procs（进程）：&lt;br/&gt;&lt;br/&gt;r: 运行队列中进程数量&lt;br/&gt;&lt;br/&gt;b: 等待IO的进程数量&lt;br/&gt;&lt;br/&gt;Memory（内存）：&lt;br/&gt;&lt;br/&gt;swpd: 使用虚拟内存大小&lt;br/&gt;&lt;br/&gt;free: 可用内存大小&lt;br/&gt;&lt;br/&gt;buff: 用作缓冲的内存大小&lt;br/&gt;&lt;br/&gt;cache: 用作缓存的内存大小&lt;br/&gt;&lt;br/&gt;Swap(交换)：&lt;br/&gt;&lt;br/&gt;si: 每秒从交换区写到内存的大小&lt;br/&gt;&lt;br/&gt;so: 每秒写入交换区的内存大小IO：（现在的Linux版本块的大小为1024bytes）bi: 每秒读取的块数bo: 每秒写入的块数&lt;br/&gt;&lt;br/&gt;System(系统)：&lt;br/&gt;&lt;br/&gt;&lt;span&gt;in&lt;/span&gt;: 每秒中断数，包括时钟中断&lt;br/&gt;&lt;br/&gt;cs: 每秒上下文切换数&lt;br/&gt;&lt;br/&gt;CPU（以百分比表示）&lt;br/&gt;&lt;br/&gt;us: 用户进程执行时间(user time)&lt;br/&gt;&lt;br/&gt;sy: 系统进程执行时间(system time)&lt;br/&gt;&lt;br/&gt;id: 空闲时间(包括IO等待时间),中央处理器的空闲时间&lt;br/&gt;&lt;br/&gt;wa: IO等待时间&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从以上命令就可以很清晰地看出服务器的各方面性能情况。除此之外还有以下命令也可以在排查或者调优中使用：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7892644135188867&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCMV1OVD6d00DfHBm9ibkdY3icJ2zZ6ndltWL4xGVYPGS8gILADibA45RUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;业务级别bug&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;如何定位到业务bug？&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;出现了业务bug那就纯纯的是开发或测试的锅了。&lt;/p&gt;&lt;p&gt;bug确定后第一步一定是&lt;span&gt;&lt;strong&gt;先看日志&lt;/strong&gt;&lt;/span&gt;，只要你写需求的时候日志打的全，一般出现了问题日志或者告警都会第一时间推送。&lt;/p&gt;&lt;p&gt;通过日志我们可以定位到bug对应代码的位置，但这仅仅是第一步，因为你只知道哪里出了问题，并不知道代码出了什么问题(除非一眼就能看出)。&lt;/p&gt;&lt;p&gt;所以下一步，&lt;span&gt;&lt;strong&gt;看数据&lt;/strong&gt;&lt;/span&gt;，数据是业务应用的核心。若通过日志和页面表现查看到你的主流程是没有问题的，那么下一步就是要确定表的数据是否有问题，数据存在bug的表现会是各方面的，可能是用户反馈，也可能是流程错误，这要取决于你表的设计。&lt;/p&gt;&lt;p&gt;切记！！线上数据是重中之重，当你决定要修复数据，在处理之前一定要做好备份，这样起码可以保证事情不会变的更糟。一般情况下修改线上数据这种活都需要你写好SQL，然后经过leader审批再交给DBA来操作，一定不要干出删库跑路这种事哟。&lt;/p&gt;&lt;p&gt;假设验证了你数据是OK的，那么问题就极大可能出现在了&lt;span&gt;&lt;strong&gt;代码层面&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;当代程序员最难过的瞬间无非就是有一个非常紧急的线上bug需要你来解决，但是摆在你面前的却是一堆屎山代码！！&lt;/p&gt;&lt;p&gt;修改业务bug最重要的是要将bug点修改掉并且保证其它业务还能正常运行，这是牵一发而动全身的事情，否则bug只会越改越多。&lt;/p&gt;&lt;p&gt;所以平时应该预知到这些风险，做好代码设计。总结一下定位业务bug的正确步骤：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27586206896551724&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCXK1IdNLPXWqHnnsMA7GcJfexfsxEZFicQ6lbknbcVGI6mATD91cesMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;方案设计&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;代码设计&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;一般公司都有自己的代码设计规范。比如由外到里包装代码，每一个方法都要有对应的职责，并且一个方法不要超过100行，一个类不要超过1000行代码等。清晰的结构可以让你和他人更好地review代码，避免看起来一头雾水。&lt;/p&gt;&lt;p&gt;写业务逻辑有两种方式，一种就是简洁明了的线性逻辑，另一种就是通过封装代码来减少代码耦合提高内聚性，也就是我们说的设计模式的使用。两种方式各有优缺点，但是工作多年了咱写的代码也不能直里直气的，多少得带点”艺术“对吧？推荐一下我经常使用但是也不会特别复杂的设计模式。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;设计模式&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是最常使用的设计模式之一。&lt;/p&gt;&lt;p&gt;工厂模式分为简单工厂模式、工厂方法模式和抽象工厂模式。我们这里讲解简单工厂模式，因为后两个都是以其为基础做改进的。&lt;/p&gt;&lt;p&gt;其结构如下：&lt;/p&gt;&lt;p&gt;通过定义一个用以创建对象的接口, 让子类决定实例化哪个类。&lt;/p&gt;&lt;p&gt;所以其实质就是由一个&lt;span&gt;&lt;strong&gt;工厂类&lt;/strong&gt;&lt;/span&gt;根据传入的参数，动态决定应该创建哪一个&lt;span&gt;&lt;strong&gt;产品类&lt;/strong&gt;&lt;/span&gt;（这些产品类继承自一个父类或接口）的实例。&lt;/p&gt;&lt;p&gt;其包含以下角色：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;工厂（Creator）角色：工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;抽象产品（Product）角色：它负责描述所有实例所共有的公共接口。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;具体产品（Concrete Product）角色：创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7542662116040956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCXIK0pgicLiaD7Z85x3iaOtf3o1kDZ52SXD1x0EJK9Rbfv4u8SwcK6VsFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;当遇到&lt;span&gt;&lt;strong&gt;需要根据某个前提条件创建不同的类实现&lt;/strong&gt;&lt;/span&gt;时, 可以使用工厂模式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;装饰者模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;它是在不必改变原类结构和继承体系的情况下，&lt;span&gt;&lt;strong&gt;动态地扩展一个对象的功能&lt;/strong&gt;&lt;/span&gt;。通过创建一个包装对象来实现对功能的扩展，动态的给一个对象添加一些额外的职责。&lt;/p&gt;&lt;p&gt;所以装饰者模式分为主体和装饰者。&lt;/p&gt;&lt;p&gt;其包含角色如下：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主体(Main)：业务主体逻辑、字段等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主体具体实现类(MainComponent)：主体具体的实现类。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;装饰者(Decorator)：要做的装饰扩展逻辑接口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;装饰者具体实现类(DecoratorComponent)：扩展逻辑的具体实现类。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8079306071871127&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCcgZEzhmfGdBJCh6Q81AMXdhic2ptOOFm3pC2oc2ZpbFT5wYoXYX8xGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;807&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;以上两种设计模式都有着”高扩展性“的特点，我们应该根据业务灵活设计接口，避免需求迭代导致的一坨坨又臭又长的代码。但是设计模式切勿用来炫技，一些较为冷门或者复杂的设计模式不推荐使用，否则当一套代码只有你能维护时，那将会是非常痛苦的。。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.048936170212766&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCI02rkLsOYib9L96vwjmsEdIxgrs1PdPSK6Q5eBxlbhdQFOib33qia5pwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;470&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;当然了这也能够体现出你在公司的不可替代性！&lt;/p&gt;&lt;h2&gt;&lt;span&gt;架构设计&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;系统高性能 &amp;amp; 高可用&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用缓存：缓存的作用是为了系统的读能力。将用户经常访问的数据扔到缓存里面可以有效地提高访问速度并且减少数据库的压力。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44224924012158057&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yC8n2ZyJe4ib4gfvmmnXdfe0poibt5ibTYJHwVv7FoPJkYCpfctzgwb7r7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;服务降级 &amp;amp; 限流：若短时间内流量激增影响到服务器性能，可考虑降级边缘业务以保证核心业务的可用性和性能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4322766570605187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yC5tkzPCuatndJJX2bkxQDzgaM8UibMOv697hibibtohvRlvJzHcYEiaVceg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1041&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;span/&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;span&gt;分布式系统 &amp;amp; 服务拆分：&lt;/span&gt;&lt;span&gt;将整个系统拆分成不同的业务模块再部署到对应的服务器中，服务之间通过中间件通信，可以有效地避免&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;和减少单一服务故障对整体系统的影响。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8859934853420195&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yCqQk284qq9Hlvwjq2FicBuoKxI5CAoLvFtF7ibNqNqRLZbIOJww1n0FwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;高可用架构：重要性不言而喻。同城多活、异地多活的架构部署可以保证单机房挂掉的情况下流量可以迅速切换到其他机房让核心业务不受影响。可谓是防止系统宕机必备良药啊！&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3461909353905497&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LUuerhGpzYNTFARLAhPsL21hZ2wRF3yC7oHh2fLKwicHLEEOhH2Gibhyuv95YZJJ6pdfYXQwzeStv9UPBwbww9Ig/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1037&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1&gt;&lt;span&gt;做好事故复盘&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;都说小事故伤身，大事故提桶。。一般发生事故后写一张事故单是不可避免的。除了详细描述好事故发生的经过，背锅人，解决方案，后续的事故跟进也是一系列流程的事，多则需要数周去跟进。事故的发生对于团队的技术发展和成型往往起着积极推进作用，所以对于每一个团队来说事故一定是不可避免的。每次事故发生我们都要思考如何完善系统，打破技术壁垒。并且遇到事儿也不要慌，如果是大问题，那么首先背锅的一定是leader！&lt;/p&gt;&lt;p&gt;其实呢一般公司最喜欢的是能快速解决问题的员工，即便这些问题可能是由你创造的。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg4NjYyODc4OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J4jTHmo8Xh6qM32ASOtVbXNoiaegrI26qLRw6r6FTI7dZw6TMT7vecvnjd1O8xSsM5MiajIuQZicxSC6KFK8TMpbg/0?wx_fmt=png&quot; data-nickname=&quot;java突击队&quot; data-alias=&quot;&quot; data-signature=&quot;技术经验分享&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;此外，我最近打算把新建的技术交流群，打造成一个活跃的高质量技术群。群里不定期有送书，发红包活动，工作中遇到的技术问题，都可以在里面咨询大家，还有工作内推的机会。有兴趣的小伙伴，欢迎加群。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;扫描回复：加群，即可入群。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0048309178743962&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDE9vvfu1eb0KdQmjCiceE3xr7JF0cvK0z4UwCNyKO4UsMg5Urfro5qzoU2NWfgthCjwENmLxK6Nxyw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;414&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc3f1c7d499ab2e15e7ae9d48d24d889</guid>
<title>使用 StringUtils.split 的坑</title>
<link>https://toutiao.io/k/0xsnf61</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2857142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibRhulibg86OqauDH7x1pREibzO8LIVLibiaT6ibUnj1F8YsYE0Fhah3Y5ybQdiaAB1FHzzQDBmnCCBFroaA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;350&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;Apche Commons&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在日常的 Java 开发中，由于 JDK 未能提供足够的常用的操作类库，通常我们会引入 Apache Commons Lang 工具库或者 Google Guava 工具库简化开发过程。两个类库都为 &lt;code&gt;java.lang&lt;/code&gt; API 提供了很多实用工具，比如经常使用的字符串操作，基本数值操作、时间操作、对象反射以及并发操作等。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;org.apache.commons&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;commons-lang3&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;3.12.0&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，最近在使用 Apache Commons Lang 工具库时&lt;strong&gt;踩了一个坑&lt;/strong&gt;，导致程序出现了意料之外的结果。&lt;/p&gt;&lt;h2&gt;StringUtils.split 的坑&lt;/h2&gt;&lt;p&gt;也是因为踩了这个坑，索性写下一篇文章好好介绍下 Apache Commons Lang 工具库中字符串操作相关 API。&lt;/p&gt;&lt;p&gt;先说坑是什么，我们都知道 String 类中到的 &lt;code&gt;split&lt;/code&gt; 方法可以分割字符串，比如字符串 &lt;code&gt;aabbccdd&lt;/code&gt; 根据 &lt;code&gt;bc&lt;/code&gt; 分割的结果应该是 &lt;code&gt;aab&lt;/code&gt; 和 &lt;code&gt;cdd&lt;/code&gt; 才对，这样的结果也很容易验证。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;aabbccdd&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (String s : str.split(&lt;span&gt;&quot;bc&quot;&lt;/span&gt;)) {&lt;br/&gt;    System.out.println(s);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 结果&lt;/span&gt;&lt;br/&gt;aab&lt;br/&gt;cdd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可能是因为 String 类中的 &lt;code&gt;split&lt;/code&gt; 方法的影响，我一直以为 &lt;code&gt;StringUtils.split&lt;/code&gt; 的效果应该相同，但其实完全不同，可以试着分析下面的三个方法输出结果是什么，StringUtils 是 Commons Lang 类库中的字符串工具类。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testA&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;aabbccdd&quot;&lt;/span&gt;;&lt;br/&gt;    String[] resultArray = StringUtils.split(str, &lt;span&gt;&quot;bc&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (String s : resultArray) {&lt;br/&gt;        System.out.println(s);&lt;br/&gt;    }&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我对上面 testA 方法的预期是 &lt;code&gt;aab&lt;/code&gt; 和 &lt;code&gt;cdd&lt;/code&gt; ，但是实际上这个方法的运行结果是：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;// testA 输出&lt;br/&gt;aa&lt;br/&gt;dd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到 &lt;code&gt;b&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt; 字母都不见了，只剩下了 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt;，这是已经发现问题了，查看源码后发现 &lt;code&gt;StringUtils.split&lt;/code&gt; 方法其实是按字符进行操作的，不会把分割字符串作为一个整体来看，返回的结果中不也会包含用于分割的字符。&lt;/p&gt;&lt;p&gt;验证代码：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testB&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;abc&quot;&lt;/span&gt;;&lt;br/&gt;    String[] resultArray = StringUtils.split(str, &lt;span&gt;&quot;ac&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (String s : resultArray) {&lt;br/&gt;        System.out.println(s);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// testB 输出&lt;/span&gt;&lt;br/&gt;b&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testC&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;abcd&quot;&lt;/span&gt;;&lt;br/&gt;    String[] resultArray = StringUtils.split(str, &lt;span&gt;&quot;ac&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (String s : resultArray) {&lt;br/&gt;        System.out.println(s);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// testC 输出&lt;/span&gt;&lt;br/&gt;b&lt;br/&gt;d&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果和预期的一致了。&lt;/p&gt;&lt;h2&gt;StringUtils.split 源码分析&lt;/h2&gt;&lt;p&gt;点开源码一眼看下去，发现在方法注释中就已经进行提示了：&lt;strong&gt;返回的字符串数组中不包含分隔符&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class....&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;继续追踪源码，可以看到最终 split 分割字符串时入参有四个。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String[] splitWorker(&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; String str, &lt;span&gt;// 原字符串 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; String separatorChars,  &lt;span&gt;// 分隔符&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; max,  &lt;span&gt;// 分割后返回前多少个结果，-1 为所有&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preserveAllTokens &lt;span&gt;// 暂不关注&lt;/span&gt;&lt;br/&gt;) {&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据分隔符的不同又分了三种情况。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 分隔符为 null&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;len&lt;/span&gt; = str.length();&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (len == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; ArrayUtils.EMPTY_STRING_ARRAY;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; List&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;sizePlus1&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;start&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;match&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;lastMatch&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (separatorChars == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;// Null separator means use whitespace&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (i &amp;lt; len) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (Character.isWhitespace(str.charAt(i))) { &lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (match || preserveAllTokens) {&lt;br/&gt;                lastMatch = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (sizePlus1++ == max) {&lt;br/&gt;                    i = len;&lt;br/&gt;                    lastMatch = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;                }&lt;br/&gt;                list.add(str.substring(start, i));&lt;br/&gt;                match = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            start = ++i;&lt;br/&gt;            &lt;span&gt;continue&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        lastMatch = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        match = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        i++;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (match || preserveAllTokens &amp;amp;&amp;amp; lastMatch) {&lt;br/&gt;            list.add(str.substring(start, i));&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到如果分隔符为 &lt;code&gt;null&lt;/code&gt; ，是按照空白字符 &lt;code&gt;Character.isWhitespace()&lt;/code&gt; 分割字符串的。分割的算法逻辑为：&lt;/p&gt;&lt;p&gt;a. 用于截取的开始下标置为 0 ，逐字符读取字符串。b. 碰到分割的目标字符，把截取的开始下标到当前字符之前的字符串截取出来。c. 然后用于截取的开始下标置为下一个字符，等到下一次使用。d. 继续逐字符读取字符串、&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 分隔符为单个字符&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;逻辑同上，只是判断逻辑 &lt;code&gt;Character.isWhitespace()&lt;/code&gt; 变为了指定字符判断。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// Optimise 1 character case&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; &lt;span&gt;sep&lt;/span&gt; = separatorChars.charAt(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; (i &amp;lt; len) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (str.charAt(i) == sep) { &lt;span&gt;// 直接比较&lt;/span&gt;&lt;br/&gt;      ...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3. 分隔符为字符串&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;总体逻辑同上，只是判断逻辑变为包含判断。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;// standard case&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; (i &amp;lt; len) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (separatorChars.indexOf(str.charAt(i)) &amp;gt;= &lt;span&gt;0&lt;/span&gt;) { &lt;span&gt;// 包含判断&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (match || preserveAllTokens) {&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;如何解决？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 使用 &lt;code&gt;splitByWholeSeparator&lt;/code&gt; 方法。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们想要的是按整个字符串分割，StringUtils 工具类中已经存在具体的实现了，使用 &lt;code&gt;splitByWholeSeparator&lt;/code&gt; 方法。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;aabbccdd&quot;&lt;/span&gt;;&lt;br/&gt;String[] resultArray = StringUtils.splitByWholeSeparator(str, &lt;span&gt;&quot;bc&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (String s : resultArray) {&lt;br/&gt;    System.out.println(s);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;aab&lt;br/&gt;cdd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2. 使用 Google Guava 工具库&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;关于 Guava 工具库的使用，之前也写过一篇文章，可以参考：&lt;span&gt;Guava - 拯救垃圾代码&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;aabbccdd&quot;&lt;/span&gt;;&lt;br/&gt;Iterable&amp;lt;String&amp;gt; iterable = Splitter.on(&lt;span&gt;&quot;bc&quot;&lt;/span&gt;)&lt;br/&gt;    .omitEmptyStrings() &lt;span&gt;// 忽略空值&lt;/span&gt;&lt;br/&gt;    .trimResults() &lt;span&gt;// 过滤结果中的空白&lt;/span&gt;&lt;br/&gt;    .split(str);&lt;br/&gt;iterable.forEach(System.out::println);&lt;br/&gt;&lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;aab&lt;br/&gt;cdd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3. JDK String.split 方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;使用 String 中的 split 方法可以实现想要效果。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;aabbccdd&quot;&lt;/span&gt;;&lt;br/&gt;String[] res = str.split(&lt;span&gt;&quot;bc&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (String re : res) {&lt;br/&gt;    System.out.println(re);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;aab&lt;br/&gt;cdd&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 String 的 split 方法也有一些坑，比如下面的输出结果。&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt; &lt;span&gt;str&lt;/span&gt; = &lt;span&gt;&quot;,a,,b,&quot;&lt;/span&gt;;&lt;br/&gt;String[] splitArr = str.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;Arrays.stream(splitArr).forEach(System.out::println);&lt;br/&gt;&lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;a&lt;br/&gt;&lt;br/&gt;b&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开头的逗号&lt;code&gt;,&lt;/code&gt;前出现了空格，末尾的逗号&lt;code&gt;,&lt;/code&gt;后却没有空格。&lt;/p&gt;&lt;p&gt;一如既往，文章中代码存放在 &lt;span&gt;Github.com/niumoo/javaNotes&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;&amp;lt;完&amp;gt;&lt;/p&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[4]&lt;/code&gt; Guava - 拯救垃圾代码: &lt;em&gt;https://www.wdbyte.com/2020/10/develop/google-guava/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; Github.com/niumoo/javaNotes: &lt;em&gt;https://github.com/niumoo/JavaNotes/tree/master/tool-java-apache-common&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;span&gt;---- END ----&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Hello world : ) &lt;span&gt;这篇文章就到这里了，&lt;/span&gt;我是阿朗。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI1MDIxNjQ1OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibQlzFGPibM1jmICzZmtYzRGMpP7suTs20SQKjwqgFWKKPcmAwzzeDZHE3fuhodU4oZsKQ3IibqYmibhg/0?wx_fmt=png&quot; data-nickname=&quot;程序猿阿朗&quot; data-alias=&quot;wdbyte&quot; data-signature=&quot;: ) 早睡早起，坚持不懈。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;点个在看，加油充电～&lt;/span&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b5a782fb3050552fdd7889393a31c8d6</guid>
<title>Kubernetes 网络流量流转路径</title>
<link>https://toutiao.io/k/ty9p91p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kubernetes 网络模型定义了一组基本规则：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在不使用网络地址转换 (NAT) 的情况下，集群中的 Pod 能够与任意其他 Pod 进行通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在不使用网络地址转换 (NAT) 的情况下，在集群节点上运行的程序能与同一节点上的任何 Pod 进行通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个 Pod 都有自己的 IP 地址（IP-per-Pod），并且任意其他 Pod 都可以通过相同的这个地址访问它。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些要求，不会将具体实现限制在某种解决方案上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相反，它们笼统地描述了集群网络的特性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了满足这些限制，你必须解决以下挑战:&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何确保同一个 Pod 中的容器行为就像它们在同一个主机上一样？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群中的 Pod 能否访问其他 Pod？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod 可以访问服务吗？服务是负载均衡的吗？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod 可以接收集群外部的流量吗？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在本文中，将重点关注前三点，从 Pod 内的网络，容器到容器的通信说起。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;Linux 网络命名空间如何在 Pod 中工作&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让我们来看一个运行应用的主容器和伴随一起的另一个容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在示例中，有一个带有 nginx 和 busybox 容器的 Pod:&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;apiVersion: v1&lt;br/&gt;kind: Pod&lt;br/&gt;metadata:&lt;br/&gt;  name: multi-container-Pod&lt;br/&gt;spec:&lt;br/&gt;  containers:&lt;br/&gt;    - name: container-1&lt;br/&gt;      image: busybox&lt;br/&gt;      &lt;span&gt;command&lt;/span&gt;: [&lt;span&gt;&#x27;/bin/sh&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;-c&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;sleep 1d&#x27;&lt;/span&gt;]&lt;br/&gt;    - name: container-2&lt;br/&gt;      image: nginx&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;部署时，会发生以下事情：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod 在节点上拥有独立的网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分配一个 IP 地址给 Pod ，两个容器之间共享端口。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;两个容器共享相同的网络命名空间，并在本地彼此可见。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;网络配置在后台迅速完成。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，让我们退后一步，尝试理解为什么运行容器需要上述动作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Linux 中，网络命名空间是独立的、隔离的逻辑空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以将网络命名空间视为，将物理网络接口分割小块之后的独立部分。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;每个部分都可以单独配置，并拥有自己的网络规则和资源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些包括防火墙规则、接口（虚拟的或物理的）、路由以及与网络相关的所有内容。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;物理网络接口持有根网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeCr3SXvIziagKibKWcJnJnG85lu6tjNZL9gxMlibtLXsQj4olSVK7A1GSQAM6pic8d9EF/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;   2. 你可以使用 Linux 网络命名空间来创建独立的网络。每个网络都是独立的，除非你进行配置，默认不会与其他网络互通。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeBxFxturq3UYicHkBejOicRxjfQLqYZ3iae2OTtGvMcB7yaicZuUcM7ia0yHCu3n3dSeDw/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但最终，还是需要物理接口处理所有真实的数据包，所有虚拟接口都是基于物理接口创建的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;网络命名空间可以通过 ip-netns 进行管理，使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ip netns list&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以列出主机上的命名空间。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;需要注意的是，创建的网络命名空间会出现在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/var/run/netns&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 下面，但 Docker 并没有遵循这一规则。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;例如，这是 Kubernetes 节点的一些命名空间：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns list&lt;br/&gt;&lt;br/&gt;cni-0f226515-e28b-df13-9f16-dd79456825ac (id: 3)&lt;br/&gt;cni-4e4dfaac-89a6-2034-6098-dd8b2ee51dcd (id: 4)&lt;br/&gt;cni-7e94f0cc-9ee8-6a46-178a-55c73ce58f2e (id: 2)&lt;br/&gt;cni-7619c818-5b66-5d45-91c1-1c516f559291 (id: 1)&lt;br/&gt;cni-3004ec2c-9ac2-2928-b556-82c7fb37a4d8 (id: 0)&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;注意 cni- 前缀；这意味着命名空间是由 CNI 插件创建的。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当你创建一个 Pod，Pod 被分配给一个节点后，CNI 将：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分配 IP 地址。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将容器连接到网络。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果 Pod 包含多个容器，那么这些容器都将被放在同一个命名空间中。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当创建 Pod 时，容器运行时会给容器创建一个网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BegSvV3vG5npW8KdmeCV7G7dFaPWGiaoeBMia6L2y2vnbPibFlMibT6jr7wsDkclmxWUrt/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  2. 然后 CNI 负责给 Pod 分配一个 IP 地址。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Bebia7oqUicByX4Ac2flVzh1UaRu4TVjLOCL9BMnnpV6nyvTc5K4Ykkiak0Iks79VHqSO/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  3. 最后 CNI 将容器连接到网络的其余部分。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Be9a5micood7GQDpGiaS3KpUtribNhd8nFTbXia4x4csD86lGjRgs5A3UfOV9g5IALIdiaK/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么，当你列出节点上的容器的命名空间会发生什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以通过 SSH 连接到 Kubernetes 节点并查看命名空间：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ lsns -t net&lt;br/&gt;&lt;br/&gt;        NS TYPE NPROCS   PID USER     NETNSID NSFS                           COMMAND&lt;br/&gt;4026531992 net     171     1 root  unassigned /run/docker/netns/default      /sbin/init noembed norestore&lt;br/&gt;4026532286 net       2  4808 65535          0 /run/docker/netns/56c020051c3b /pause&lt;br/&gt;4026532414 net       5  5489 65535          1 /run/docker/netns/7db647b9b187 /pause&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;lsns&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是一个用于列出主机上所有可用命名空间的命令。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;请记住，Linux 中有多种命名空间类型。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nginx 容器在哪里？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那些 pause 容器是什么？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;在 Pod 中，pause 容器创建了网络命名空间&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先列出节点上的所有命名空间，看看能否找到 Nginx 容器：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ lsns&lt;br/&gt;        NS TYPE   NPROCS   PID USER            COMMAND&lt;br/&gt;&lt;span&gt;# truncated output&lt;/span&gt;&lt;br/&gt;4026532414 net         5  5489 65535           /pause&lt;br/&gt;4026532513 mnt         1  5599 root            sleep 1d&lt;br/&gt;4026532514 uts         1  5599 root            sleep 1d&lt;br/&gt;4026532515 pid         1  5599 root            sleep 1d&lt;br/&gt;4026532516 mnt         3  5777 root            nginx: master process nginx -g daemon off;&lt;br/&gt;4026532517 uts         3  5777 root            nginx: master process nginx -g daemon off;&lt;br/&gt;4026532518 pid         3  5777 root            nginx: master process nginx -g daemon off;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Nginx 容器在挂载 (&lt;/span&gt;&lt;code&gt;&lt;span&gt;mnt&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)、Unix time-sharing (&lt;/span&gt;&lt;code&gt;&lt;span&gt;uts&lt;/span&gt;&lt;/code&gt;&lt;span&gt;) 和 PID (&lt;/span&gt;&lt;code&gt;&lt;span&gt;pid&lt;/span&gt;&lt;/code&gt;&lt;span&gt;) 命名空间中，但不在网络命名空间 (&lt;/span&gt;&lt;code&gt;&lt;span&gt;net&lt;/span&gt;&lt;/code&gt;&lt;span&gt;) 中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不幸的是，&lt;/span&gt;&lt;code&gt;&lt;span&gt;lsns&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只显示每个进程最小的 PID，但你可以根据这个进程 ID 进一步过滤。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用以下命令，在所有命名空间中检索 Nginx 容器：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo lsns -p 5777&lt;br/&gt;&lt;br/&gt;       NS TYPE   NPROCS   PID USER  COMMAND&lt;br/&gt;4026531835 cgroup    178     1 root  /sbin/init noembed norestore&lt;br/&gt;4026531837 user      178     1 root  /sbin/init noembed norestore&lt;br/&gt;4026532411 ipc         5  5489 65535 /pause&lt;br/&gt;4026532414 net         5  5489 65535 /pause&lt;br/&gt;4026532516 mnt         3  5777 root  nginx: master process nginx -g daemon off;&lt;br/&gt;4026532517 uts         3  5777 root  nginx: master process nginx -g daemon off;&lt;br/&gt;4026532518 pid         3  5777 root  nginx: master process nginx -g daemon off;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;pause&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 进程再次出现，它劫持了网络命名空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是怎么回事？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;集群中的每个 Pod 都有一个额外的隐藏容器在后台运行，称为 pause 容器。&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;列出在节点上运行的容器并获取 pause 容器：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ docker ps | grep pause&lt;br/&gt;&lt;br/&gt;fa9666c1d9c6   k8s.gcr.io/pause:3.4.1  &lt;span&gt;&quot;/pause&quot;&lt;/span&gt;  k8s_POD_kube-dns-599484b884-sv2js…&lt;br/&gt;44218e010aeb   k8s.gcr.io/pause:3.4.1  &lt;span&gt;&quot;/pause&quot;&lt;/span&gt;  k8s_POD_blackbox-exporter-55c457d…&lt;br/&gt;5fb4b5942c66   k8s.gcr.io/pause:3.4.1  &lt;span&gt;&quot;/pause&quot;&lt;/span&gt;  k8s_POD_kube-dns-599484b884-cq99x…&lt;br/&gt;8007db79dcf2   k8s.gcr.io/pause:3.4.1  &lt;span&gt;&quot;/pause&quot;&lt;/span&gt;  k8s_POD_konnectivity-agent-84f87c…&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可以看到，节点上的每一个 Pod 都会有一个对应的 pause 容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;pause&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 容器负责创建和维持网络命名空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;底层容器运行时会完成网络命名空间的创建，通常是由 &lt;/span&gt;&lt;code&gt;&lt;span&gt;containerd&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 或 &lt;/span&gt;&lt;code&gt;&lt;span&gt;CRI-O&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 完成。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在部署 Pod 和创建容器之前，由运行时创建网络命名空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;容器运行时会自动完成这些，不需要手工执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ip netns&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 创建命名空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;话题回到 pause 容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;它包含非常少的代码，并且在部署后立即进入睡眠状态。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，它是必不可少的，并且在 Kubernetes 生态系统中起着至关重要的作用。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;创建 Pod 时，容器运行时会创建一个带有睡眠容器的网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeCVjs8AOVUdNOON0ste3qoVrqKLCtZTe2VmVC3I9qPdkGFLfuMQib086zhA4FSeqlf/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  2. Pod 中的其他容器都会加入由 pause 容器创建的网络名称空间。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeFuPxkjoSqg0YSBKonSYQV6h34JicvkQ1jxVzwdcYTicibCz4Gicsjwgoib6GcMEprqRjx/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  3. 此时，CNI 分配 IP 地址并将容器连接到网络。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BenHsjlEYNbanECNPicZuSYrylsdedDFiafO0dlCzs4IWWhHpdNOt6XU5V1ck8NicH6ux/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个进入睡眠状态的容器有什么用？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了理解它的用途，让我们想象一个 Pod 有两个容器，就像前面的例子一样，但没有 pause 容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一旦容器启动，CNI 将会：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使 busybox 容器加入之前的网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分配 IP 地址。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将容器连接到网络。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果 Nginx 崩溃了怎么办？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CNI 将不得不再次执行所有步骤，并且两个容器的网络都将中断。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于睡眠容器不太可能有任何错误，因此创建网络命名空间通常是一种更安全、更健壮的选择。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;如果 Pod 中的一个容器崩溃了，剩下的仍然可以回复其他网络请求。&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;strong&gt;分配一个 IP 地址给 Pod&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前面我提到 Pod 和两个容器将具有同一个 IP 地址。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那是怎样配置的呢？&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;在 Pod 网络命名空间内，创建了一个接口，并分配了一个 IP 地址。&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让我们验证一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，找到 Pod 的 IP 地址：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ kubectl get Pod multi-container-Pod -o jsonpath={.status.PodIP}&lt;br/&gt;&lt;br/&gt;10.244.4.40&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，找到相关的网络命名空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于网络命名空间是从物理接口创建的，需要先访问集群节点。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;如果你运行的是 minikube，使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;minikube ssh&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 访问节点。如果在云厂中运行，那么应该有某种方法可以通过 SSH 访问节点。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进入后，找到最新创建的命名网络命名空间：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ls -lt /var/run/netns&lt;br/&gt;&lt;br/&gt;total 0&lt;br/&gt;-r--r--r-- 1 root root 0 Sep 25 13:34 cni-0f226515-e28b-df13-9f16-dd79456825ac&lt;br/&gt;-r--r--r-- 1 root root 0 Sep 24 09:39 cni-4e4dfaac-89a6-2034-6098-dd8b2ee51dcd&lt;br/&gt;-r--r--r-- 1 root root 0 Sep 24 09:39 cni-7e94f0cc-9ee8-6a46-178a-55c73ce58f2e&lt;br/&gt;-r--r--r-- 1 root root 0 Sep 24 09:39 cni-7619c818-5b66-5d45-91c1-1c516f559291&lt;br/&gt;-r--r--r-- 1 root root 0 Sep 24 09:39 cni-3004ec2c-9ac2-2928-b556-82c7fb37a4d8&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在示例中，就是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;cni-0f226515-e28b-df13-9f16-dd79456825ac&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。然后，可以在该命名空间内运行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;exec&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac ip a&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# output truncated&lt;/span&gt;&lt;br/&gt;3: eth0@if12: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UP group default&lt;br/&gt;    link/ether 16:a4:f8:4f:56:77 brd ff:ff:ff:ff:ff:ff link-netnsid 0&lt;br/&gt;    inet 10.244.4.40/32 brd 10.244.4.40 scope global eth0&lt;br/&gt;       valid_lft forever preferred_lft forever&lt;br/&gt;    inet6 fe80::14a4:f8ff:fe4f:5677/64 scope link&lt;br/&gt;       valid_lft forever preferred_lft forever&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个 IP 就是 Pod 的 IP 地址！通过查找 @if12 中的 12 找到网络接口&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip link | grep -A1 ^12&lt;br/&gt;&lt;br/&gt;12: vethweplb3f36a0@if16: mtu 1376 qdisc noqueue master weave state UP mode DEFAULT group default&lt;br/&gt;    link/ether 72:1c:73:d9:d9:f6 brd ff:ff:ff:ff:ff:ff link-netnsid 1&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你还可以验证 Nginx 容器是否监听了来自该命名空间内的 HTTP 流量：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac netstat -lnp&lt;br/&gt;&lt;br/&gt;Active Internet connections (only servers)&lt;br/&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name&lt;br/&gt;tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      692698/nginx: master&lt;br/&gt;tcp6       0      0 :::80                   :::*                    LISTEN      692698/nginx: master&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;如果你无法通过 SSH 访问集群中的工作节点，你可以使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl exec&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 获取到 busybox 容器的 shell 并直接在内部使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ip&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;netstat&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;刚刚我们介绍了容器之间的通信，再来看看如何建立 Pod 到 Pod 的通信吧。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;查看集群中 Pod 到 Pod 的流量&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pod 到 Pod 的通信有两种可能的情况：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod 流量的目的地是同一节点上的 Pod。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod 流量的目的地是在不同节点上的 Pod。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整个工作流依赖于虚拟接口对和网桥，下面先来了解一下这部分的内容。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;为了让一个 Pod 与其他 Pod 通信，它必须先访问节点的根命名空间。&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过虚拟以太网对来实现 Pod 和根命名空间的连接。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些虚拟接口设备（veth 中的 v）连接并充当两个命名空间之间的隧道。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用此 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 设备，你将一端连接到 Pod 的命名空间，另一端连接到根命名空间。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BenHsjlEYNbanECNPicZuSYrylsdedDFiafO0dlCzs4IWWhHpdNOt6XU5V1ck8NicH6ux/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CNI 可以帮你执行这些操作，但你也可以手动执行：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip link add veth1 netns Pod-namespace &lt;span&gt;type&lt;/span&gt; veth peer veth2 netns root&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在 Pod 的命名空间有一个可以访问根命名空间的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;隧道&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;节点上，新建的每一个 Pod 都会设置这样的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个是，创建接口对；另一个是为以太网设备分配地址并配置默认路由。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面看看如何在 Pod 的命名空间中设置 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth1&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac ip addr add 10.244.4.40/24 dev veth1&lt;br/&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac ip link &lt;span&gt;set&lt;/span&gt; veth1 up&lt;br/&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac ip route add default via 10.244.4.40&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在节点上，让我们创建另一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth2&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip addr add 169.254.132.141/16 dev veth2&lt;br/&gt;$ ip link &lt;span&gt;set&lt;/span&gt; veth2 up&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可以像前面一样检查现有的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Pod 的命名空间中，检索 &lt;/span&gt;&lt;code&gt;&lt;span&gt;eth0&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口的后缀。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip netns &lt;span&gt;exec&lt;/span&gt; cni-0f226515-e28b-df13-9f16-dd79456825ac ip link show &lt;span&gt;type&lt;/span&gt; veth&lt;br/&gt;&lt;br/&gt;3: eth0@if12: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default&lt;br/&gt;    link/ether 16:a4:f8:4f:56:77 brd ff:ff:ff:ff:ff:ff link-netnsid 0&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在这种情况下，可以使用命令 &lt;/span&gt;&lt;code&gt;&lt;span&gt;grep -A1 ^12&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查找（或滚动到目标所在处）：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ ip link show &lt;span&gt;type&lt;/span&gt; veth&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# output truncated&lt;/span&gt;&lt;br/&gt;12: cali97e50e215bd@if3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default&lt;br/&gt;    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netns cni-0f226515-e28b-df13-9f16-dd79456825ac&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;也可以使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ip -n cni-0f226515-e28b-df13-9f16-dd79456825ac link show type veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt;.命令&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意 &lt;/span&gt;&lt;code&gt;&lt;span&gt;3: eth0@if12和12: cali97e50e215bd@if3&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口上的符号。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 Pod 命名空间，该 &lt;/span&gt;&lt;code&gt;&lt;span&gt;eth0&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接口连接到根命名空间的 12 号接口，因此是 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@if12&lt;/span&gt;&lt;/code&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对的另一端，根命名空间连接到 Pod 命名空间的 3 号接口。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来是连接 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对两端的桥接器。&lt;/span&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1666439149231&quot; data-category_id_list=&quot;1|16|17|2|21|24|28|29|31|35|36|37|39|41|42|43|46|47|48|5|50|51|55|56|57|58|59|6|60|61|62|63|64|65|66|7|8&quot; data-id=&quot;1666439149231&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;Pod 网络命名空间连接到以太网桥&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;网桥会汇聚位于根命名空间中的每一个虚拟接口。这个网桥允许虚拟 pair 之间的流量，也允许穿过公共根命名空间的流量。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;补充一下相关原理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以太网桥位于 OSI 网络模型 的第 2 层。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以将网桥视为接受来自不同命名空间和接口的连接的虚拟交换机。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以太网桥可以连接节点上的多个可用网络。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此，可以使用网桥连接两个接口，即 Pod 命名空间的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 连接到同一节点上另一个 Pod 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BesVkTOuAy5VJ1icLJVzo86su8sL1xyuIZkZhntHEf3dgGWwvZjMPbiboicwwg6IHVn1D/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，继续看网桥和 veth 对的用途。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;跟踪在同一节点上 Pod 到 Pod 的流量&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设同一个节点上有两个 Pod，Pod-A 向 Pod-B 发送消息。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于访问目标不在同一个命名空间，Pod-A 将数据包发送到其默认接口 eth0。这个接口与 veth 对的一端绑定，作为隧道。这样，数据包会被转发到节点上的根命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Be6DJTlhC4RAiaoibys0EZCE3mAwvV1ULf9PuCgDq2SpVNgmpyAcHlIc176WhrPpjA4B/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  2. 以太网网桥作为一个虚拟交换机，需要目标 Pod-B 的 MAC 地址才能工作。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeroUL1R12qsQ2gvv89EzB8ueEFkgy6B8sATfPA7cdwkoC42AuU1CPHIZibxTWWvdpK/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  3. ARP 协议会解决这个问题。当帧到达网桥时，会向所有连接的设备发送 ARP 广播。网桥广播询问持有 Pod-B 的 IP 地址&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Be24RTlRG2RD2RrHbrQjJXD84LsnwMfhPSQ59ibdXkaRrOCZhZCFpQJib58zyLFc5agy/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  4. 此时会收到一个带有 Pod-B IP 的 MAC 地址应答，这条消息会被存储在桥接 ARP 缓存(查找表)中。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeZDcrV9CMqsaxNL2MQnrIuibqAxjsWP80OwibZicmIibH2XwI826iczkaee8PicZibQMoRoj/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  5. IP 地址和 MAC 地址的映射关系存储之后，网桥就在表中查找，并将数据包转发到正确的端点。数据包到达根命名空间内 Pod-B 的 veth 之后，很快又到达 Pod-B 命名空间内的 eth0 接口。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BehnS9AMQytNxnibGXNwdqYuNey26PZgBGB7IvEQl1fXXXuL626hWFE8icw7iakMEiaBicM/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，Pod-A 和 Pod-B 之间的通信就成功了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;跟踪不同节点上的 Pod 到 Pod 通信&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于跨节点 Pod 之间的通信，会经过额外的通信跳跃。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;前几个步骤保持不变，直到数据包到达根命名空间并需要发送到 Pod-B。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeMHNq80v5zydC5zgZKtN3JC5uH9iaBjAZIqIlnQZLGl1Gg9iaRvAIOrdssTjZ0LaV3U/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  2. 当目的 IP 不在本地网络中时，报文被转发到节点的默认网关。节点的出口网关或默认网关，通常位于节点与网络相连的物理接口 eth0 上。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BelLgSxy61hibZZLo4xvkwWEuJqqMW3ZzwibVv2DSomW7FerZ5SEIiaKczQlrrXR5dZQD/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此时 不会发生 ARP 解析，因为源 IP 和目标 IP 不在同一个网段中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;网段的检查是使用按位运算完成的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当目的 IP 不在当前网络段时，数据包被转发到节点的默认网关。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;按位运算的工作原理&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在确定数据包的转发位置时，源节点必须执行位运算&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这也称为与操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;复习一下，按位与运算的规则：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;0 AND 0 = 0&lt;br/&gt;0 AND 1 = 0&lt;br/&gt;1 AND 0 = 0&lt;br/&gt;1 AND 1 = 1&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;除了 1 与 1 以外的都是 false。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果源节点的 IP 为 192.168.1.1，子网掩码为 /24，目标 IP 为 172.16.1.1/16，则按位与运算将得知它们位于不同的网段上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这意味着目标 IP 与数据包的源不在同一个网络上，数据包将通过默认网关转发。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数学时间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们必须从二进制的 32 位地址开始进行 AND 操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先找出源 IP 网络和目标 IP 网段。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;Type&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Binary&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Converted&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Src. IP Address&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11000000.10101000.00000001.00000001&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;192.168.1.1&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Src. Subnet Mask&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11111111.11111111.11111111.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;255.255.255.0(/24)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Src. Network&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11000000.10101000.00000001.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;192.168.1.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Dst. IP Address&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;10101100.00010000.00000001.00000001&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;172.16.1.1&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Dst. Subnet Mask&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11111111.11111111.00000000.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;255.255.0.0(/16)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Dst. Network&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;10101100.00010000.00000000.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;172.16.0.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按位运算之后，需要将目标 IP 与数据包源节点的子网进行比较。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;Type&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Binary&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Converted&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Dst. IP Address&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;10101100.00010000.00000001.00000001&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;172.16.1.1&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Src. Subnet Mask&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11111111.11111111.11111111.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;255.255.255.0(/24)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Network Result&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;10101100.00010000.00000001.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;172.16.1.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;运算的结果是 172.16.1.0，不等于 192.168.1.0（源节点的网络）。说明源 IP 地址和目标 IP 地址不在同一个网络上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果目标 IP 是 192.168.1.2，即与发送 IP 在同一子网中，则 AND 操作将得到节点的本地网络。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;Type&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Binary&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Converted&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Dst. IP Address&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11000000.10101000.00000001.00000010&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;192.168.1.2&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Src. Subnet Mask&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11111111.11111111.11111111.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;255.255.255.0(/24)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Network&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;11000000.10101000.00000001.00000000&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;192.168.1.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;进行逐位比较后，ARP 通过查找表查找默认网关的 MAC 地址。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果有条目，将立即转发数据包。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;否则，先进行广播以找到网关的 MAC 地址。&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;现在，数据包路由到另一个节点的默认接口，我们称为 Node-B。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeG4lRwtJlvFUKuDFY4Y0hD6PmNYmqqHeib9hicMhC7IMKZicuuO6HM35lQ18a5hMsLgz/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;以相反的顺序。现在，数据包位于 Node-B 的根命名空间，并到达网桥，这里会进行 ARP 解析。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeyxibLXQLqIyDecl8Z9gicIhjxbWnrB5hgrrYFJYSs4w6VJgRfVbibVm82OwuvmSTibZX/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;路由系统将返回与 Pod-B 相连的接口的 MAC 地址。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Begoj8lneQsiby4ywWW8Piaibd4m6zLo0t5UWFXKicNQkGneWOZeyHenBWSsHH38kcbgbk/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;  4. 网桥通过 Pod-B 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 设备转发帧，并到达 Pod-B 的命名空间。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeC17ZWWrGPVGAXLlwBic1A2ncic9U0Z9L8vKDKFOwExPuibpdqsASuCo6hGNFukWnZA0/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，你应该已经熟悉了 Pod 之间的流量是如何流转的。下面，让我们花点时间来看看 CNI 如何管理上诉内容。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;容器网络接口 - CNI&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;容器网络接口（CNI）主要关注的是当前节点中的网络。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeQZm9icrtWfmQ96WauD5QQYfl0GbiaawR7p0QIoNoSzAIvg2jtj9JTBuy0a2jtXnvC5/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可以将 CNI 看作为解决 Kubernetes 网络需求，而遵循的一组规则。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;有这些 CNI 实现可供使用：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Calico&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Cillium&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Flannel&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Weave Net&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;其他网络插件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他们都遵循相同的 CNI 标准。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果没有 CNI，你需要人工完成如下操作：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;创建接口。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;创建 veth 对。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设置网络命名空间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设置静态路由。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;配置以太网桥。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分配 IP 地址。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;创建 NAT 规则。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;还有其他大量事情。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这还不包括，在删除或重启 Pod 时，需要进行类似的全部操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CNI 必须支持四种不同的操作：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;ADD - 向网络添加一个容器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DEL - 从网络中删除一个容器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;CHECK - 如果容器的网络出现问题，则返回错误。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;VERSION - 显示插件的版本。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们一起看下，CNI 是如何工作的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当 Pod 被分配到特定节点时，Kubelet 自身不会初始化网络。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相反，Kubelet 将这个任务交给 CNI。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;但是，Kubelet 以 JSON 格式指定配置并发送至 CNI 插件。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以进入节点上的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/etc/cni/net.d&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件夹，使用以下命令查看当前的 CNI 配置文件：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat 10-calico.conflist&lt;br/&gt;&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;k8s-Pod-network&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;cniVersion&quot;&lt;/span&gt;: &lt;span&gt;&quot;0.3.1&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;calico&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;datastore_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;kubernetes&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;mtu&quot;&lt;/span&gt;: 0,&lt;br/&gt;      &lt;span&gt;&quot;nodename_file_optional&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;log_level&quot;&lt;/span&gt;: &lt;span&gt;&quot;Info&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;log_file_path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/var/log/calico/cni/cni.log&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;ipam&quot;&lt;/span&gt;: { &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;calico-ipam&quot;&lt;/span&gt;, &lt;span&gt;&quot;assign_ipv4&quot;&lt;/span&gt; : &lt;span&gt;&quot;true&quot;&lt;/span&gt;, &lt;span&gt;&quot;assign_ipv6&quot;&lt;/span&gt; : &lt;span&gt;&quot;false&quot;&lt;/span&gt;},&lt;br/&gt;      &lt;span&gt;&quot;container_settings&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;allow_ip_forwarding&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;policy&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;k8s&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;kubernetes&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;k8s_api_root&quot;&lt;/span&gt;:&lt;span&gt;&quot;https://10.96.0.1:443&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;&quot;kubeconfig&quot;&lt;/span&gt;: &lt;span&gt;&quot;/etc/cni/net.d/calico-kubeconfig&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;bandwidth&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;capabilities&quot;&lt;/span&gt;: {&lt;span&gt;&quot;bandwidth&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;}&lt;br/&gt;    },&lt;br/&gt;    {&lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;portmap&quot;&lt;/span&gt;, &lt;span&gt;&quot;snat&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;&quot;capabilities&quot;&lt;/span&gt;: {&lt;span&gt;&quot;portMappings&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;}}&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;每个 CNI 插件都会使用不同类型的网络配置。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;例如，Calico 使用基于 BGP 的三层网络连接 Pod&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Cilium 从三层到七层使用的是基于 eBPF 的 overlay 网络&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;与 Calico 一样，Cilium 也支持通过配置网络策略来限制流量。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么你应该使用哪一个呢？主要有两类 CNI。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在第一类中，使用基本网络设置（也称为平面网络），从集群的 IP 池为 Pod 分配 IP 地址的 CNI。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这种方式可能很快耗尽 IP 地址，而成为负担。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相反，另一类是使用 overlay 网络。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单来说，overlay 网络是主（底层）网络之上的重建网络。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;overlay 网络通过封装来自底层网络的数据包工作，这些数据包被发送到另一个节点上的 Pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;overlay 网络的一种流行技术是 VXLAN，它可以在 L3 网络上建立 L2 域的隧道。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么哪个更好呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没有单一的答案，这取决于你的需求。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你是否正在构建具有数万个节点的大型集群？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也许 overlay 网络更好。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你是否在意更简单的配置和审查网络流量，而不会愿意在复杂网络中丢失这种能力？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;扁平网络更适合你。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在我们讨论完了 CNI，接着让我们来看看 Pod 到服务的通信是如何连接的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;检查 Pod 到 Service 的流量&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于 Pod 在 Kubernetes 中是动态的，分配给 Pod 的 IP 地址不是静态的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pod 的 IP 是短暂的，每次创建或删除 Pod 时都会&lt;/span&gt;&lt;span&gt;发生变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kubernetes 中的 Service 解决了这个问题，为连接一组 Pod 提供了可靠的机制。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BesLEAKPUeuZ4YF1tkHT7IiaWHL76olXNFKHmrUgMQw3HNxAt8U67zvURqH0UBcNrH8/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;默认情况下，在 Kubernetes 中创建 Service 时，被分配一个虚拟 IP。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Service 中，可以使用选择器将 Service 与目标 Pod 相关联。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当删除或添加一个 Pod 时会发生什么呢？&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;Service 的虚拟 IP 保持静态不变。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但流量可以再无需干预的情况下，到达新创建的 Pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;换句话说，Kubernetes 中的 Service 类似于负载均衡器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但它们是如何工作的？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;使用 Netfilter 和 Iptables 拦截和重写流量&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Kubernetes 中的 Service 是基于 Linux 内核中的两个组件构建的：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网络过滤器&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;iptables&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;Netfilter 是一个可以配置数据包过滤、创建 NAT 、端口转发规则以及管理网络中流量的框架&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此外，它可以屏蔽和禁止未经同意的访问。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;另一方面，iptables 是一个用户态程序，可以用来配置 Linux 内核防火墙的 IP 数据包过滤规则。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;iptables 是作为不同的 Netfilter 模块实现的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可以使用 iptables CLI 即时修改过滤规则，并将它们插入 netfilters 挂载点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;过滤器配置在不同的表中，其中包含用于处理网络流量数据包的链。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不同的协议使用不同的内核模块和程序。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;当提到 iptables 时，通常指的是 IPv4。对于 IPv6 ，终端工具是 ip6tables。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;iptables 有五种链，每一种链都直接映射到 Netfilter 的钩子上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 iptables 的角度来看，它们是：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;PRE_ROUTING&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;INPUT&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;FORWARD&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;POST_ROUTING&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;它们对应地映射到 Netfilter 钩子：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NF_IP_PRE_ROUTING&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NF_IP_LOCAL_IN&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NF_IP_FORWARD&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NF_IP_LOCAL_OUT&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;NF_IP_POST_ROUTING&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当一个数据包到达时，根据它所处的阶段，将 “触发” 一个 Netfilter 钩子。这个钩子会执行特定的 iptables 过滤规则。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeNzsOFCWdyOAxKFPL5ghCJlTYxWdtpnp3pgPQLOUE3p2hRKJJ1j43DQVNoiculxnFD/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哎呀！看起来很复杂！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不过没什么好担心的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就是我们使用 Kubernetes 的原因，以上所有内容都是通过使用 Service 抽象出来的，并且一个简单的 YAML 定义可以自动设置这些规则。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果你有兴趣查看 iptables 规则，可以连接到节点并运行：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$ iptables-save&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你还可以使用这个工具来可视化节点上的 iptables 链。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是来自 GKE 节点上的可视化 iptables 链的示例图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BedtQUk0u83ibwK8m6POrS2gsneOJ1DY4GlQ5pAxF4FCkRL8O2aPT31EtsnUAP0sZh6/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;300&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意，这里可能配置了几百条规则，想想一下自己动手怎么配置！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;至此，我们已经了解了，相同节点上的 Pod 和不同节点上 Pod 之间是如何通信的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 Pod 与 Service 的通信中，链路的前半部分是一样的。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Bex5aicXl6q5Tgscxlc1StCMru68bud4EUM8sxnpggX8qALyEHwjRcicwOvNUfWq60zib/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当请求从 Pod-A 走向 Pod-B 时，由于 Pod-B 在 Service 的 “后面”，在传输的过程中，会有一些不一样。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原始的请求，在 Pod-A 命名空间的 eth0 接口发出。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着，请求通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt;到达根名称空间的网桥。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一旦到达网桥，数据包就会立即通过默认网关转发。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;与 Pod-to-Pod 部分一样，主机进行按位比较。由于服务的虚拟 IP 不是节点 CIDR 的一部分，因此数据包将立即通过默认网关转发。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果默认网关的 MAC 地址尚未出现在查找表中，则会进行 ARP 解析找出默认网关的 MAC 地址。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在神奇的事情发生了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在数据包通过节点的路由之前，Netfilter 的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;NF_IP_PRE_ROUTING&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 挂钩被触发，并执行 iptables 规则。这个规则会修改 Pod-A 数据包的目标 IP 地址 DNAT。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeLcmZIQemsib9micmpkp2dUZHib8EqgGVnQpjmyTLicniczyhgEjWxWeHC3TXqOYyFpmIz/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前面服务的虚拟 IP 地址被重写为 Pod-B 的 IP 地址。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，数据包路由过程与 Pod 到 Pod 的通信一样。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Be7hqickzPFlfnFuwuDO6lZu9pJSgh7EOxPDVhUZCvvjCOD3XcNn1l4FF7MLRJ00UFC/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据包重写后，通信是 Pod 到 Pod。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然而，在所有这些通信中，使用了一个第三方的功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此功能称为 conntrack 或链路跟踪。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当 Pod-B 发回响应时，conntrack 会将数据包与链路相关联，并跟踪其来源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;NAT 严重依赖于 conntrack。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果没有链路跟踪，将不知道将包含响应的数据包发回何处。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用 conntrack 时，数据包的返回路径很容易设置为相同的源或目标 NAT 更改。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通信的另一部分与现在的链路相反。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pod-B 接收并处理了请求，现在将数据发送回 Pod-A。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在会发生什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;检查来自服务的响应&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pod-B 发送响应，将其 IP 地址设置为源地址，并将 Pod-A 的 IP 地址设置为目标地址。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeFzHenJSp8WjMRpeTS1lPVkLFdKWVjCG2jfasJ8bUjylvSiaWDU26LztAHn3ibK9Cue/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当数据包到达 Pod-A 所在节点的接口时，会发生另一个 NAT。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6BeS1wn2WowD4AS4Errtia3GfQdCwDCOUTv3ibqnfL4vJUIc56CsYz5kI0Za2O7asicv6m/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这时，conntrack 开始工作，修改源 IP 地址，iptables 规则执行 SNAT，并将 Pod-B 的源 IP 地址修改为原始服务的虚拟 IP。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/eytJa9K5jkqKibwGy0jNADSV0jnNvo6Bepjky9nzc3KanppnRs1PpIIde7kcicd7gpEmxljVyZcFEAaGrGMwaZGQPicWPbuPwUo/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;200&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 Pod-A 来说，响应是来自于 Service 而不是 Pod-B。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其余的都是一样的。一旦 SNAT 完成，数据包就会到达根命名空间中的网桥，并通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;veth&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 对转发到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Pod-A&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总 结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让我们一起回顾下本文相关要点&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;容器如何在本地或 Pod 内通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在相同节点和不同节点上的 Pod 如何通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pod-to-Service - Pod 如何将流量发送到 Kubernetes 中服务后面的 Pod 时。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;什么是命名空间、veth、iptables、chains、conntrack、Netfilter、CNI、overlay 网络，以及 Kubernetes 网络工具箱中所需的一切。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>56656313ac2edd64e972b95929283cd6</guid>
<title>一文看懂分布式链路监控系统</title>
<link>https://toutiao.io/k/dr1suza</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{&amp;quot;copyFrom&amp;quot;:1157878574},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjkrt1jn4svs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzq44w906xmik&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;背景&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqz14q1yzl6h1t&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzgwj42bfel2w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzev1bp57hokv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;传统的大型单体系统随着业务体量的增大已经很难满足市场对技术的需求，通过对将整块业务系统拆分为多个互联依赖的子系统并针对子系统进行独立优化，能够有效提升整个系统的吞吐量。在进行系统拆分之后，完整的业务事务逻辑所对应的功能会部署在多个子系统上，此时用户的一次点击请求会触发若干子系统之间的相互功能调用，如何分析一次用户请求所触发的多次跨系统的调用过程、如何定位存在响应问题的调用链路等等问题是链路追踪技术所要解决的问题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqz236rbtq653t&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;举一个网络搜索的示例，来说明这样一个链路监控系统需要解决的一些挑战。当用户在搜索引擎中输入一个关键词后，一个前端服务可能会将这次查询分发给数百个查询服务，每个查询服务在其自己的索引中进行搜索。该查询还可以被发送到许多其他子系统，这些子系统可以处理敏感词汇、检查拼写、用户画像分析或寻找特定领域的结果，包括图像、视频、新闻等。所有这些服务的结果有选择地组合在一起，最终展示在搜索结果页面中，我们将这个模型称为一次完整的搜索过程。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqz14q1m3fbwbu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在这样一次搜索过程中，总共可能需要数千台机器和许多不同的服务来处理一个通用搜索查询。此外，在网络搜索场景中，用户的体验和延迟紧密相关，一次搜索延时可能是由于任何子系统的性能不佳造成的。开发人员仅考虑延迟可能知道整个系统存在问题，但却无法猜测哪个服务有问题，也无法猜测其行为不良的原因。首先，开发人员可能无法准确知道正在使用哪些服务，随时都可能加入新服务和修改部分服务，以增加用户可见的功能，并改进性能和安全性等其他方面；其次，开发人员不可能是庞大系统中每个内部微服务的专家，每一个微服务可能有不同团队构建和维护；另外，服务和机器可以由许多不同的客户端同时共享，因此性能问题可能是由于另一个应用的行为引起。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqz9tlxbz9cklc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Dapper简介&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzgqv69srrjmr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzq2a60tz19wr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzvshtz4v7q7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在分布式链路追踪方面，Google早在2010年针对其内部的分布式链路跟踪系统Dapper，发表了相关论文对分布式链路跟踪技术进行了介绍（强烈推荐阅读）。其中提出了两个基本要求。第一，拥有广泛的覆盖面。针对庞大的分布式系统，其中每个服务都需要被监控系统覆盖，即使是整个系统的一小部分没有被监控到，该链路追踪系统也可能是不可靠的。第二，提供持续的监控服务。对于链路监控系统，需要7*24小时持续保障业务系统的健康运行，保证任何时刻都可以及时发现系统出现的问题，并且通常情况下很多问题是难以复现的。根据这两个基本要求，分布式链路监控系统的有如下几个设计目标：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用级透明&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbqzeal3u1jfyg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr01l0unvjfosz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;链路监控组件应该以基础通用组件的方式提供给用户，以提高稳定性，应用开发者不需要关心它们。对于Java语言来说，方法可以说是调用的最小单位，想要实现对调用链的监控埋点势必对方法进行增强。Java中对方法增强的方式有很多，比如直接硬编码、动态代理、字节码增强等等。应用级透明其实是一个比较相对的概念，透明度越高意味着难度越大，对于不同的场景可以采用不同的方式。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0vy3e8i8u09a&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr02kvdqybqjp5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●低开销&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;低开销是链路监控系统最重要的关注点，分布式系统对于资源和性能的要求本身就很苛刻，因此监控组件必须对原服务的影响足够小，将对业务主链路的影响降到最低。链路监控组件对于资源的消耗主除了体现在增强方法的消耗上，其次还有网络传输和数据存储的消耗，因为对于链路监控系统来说，想要监控一次请求势必会产生出请求本身外的额外数据，并且在请求过程中，这些额外的数据不仅会暂时保存在内存中，在分布式场景中还会伴随着该请求从上游服务传输至下游服务，这就要求产生的额外数据尽可能地少，并且在伴随请求进行网络传输的时候只保留少量必要的数据。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0oolgrdpcm8h&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0fusux0p38xr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●扩展性和开放性&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;无论是何种软件系统，可扩展性和开放性都是衡量其质量优劣的重要标准。对于链路监控系统这样的基础服务系统来说，上游业务系统对于链路监控系统来说是透明的，在一个规模较大的企业中，一个基础服务系统往往会承载成千上万个上游业务系统。每个业务系统由不同的团队和开发人员负责，虽然使用的框架和中间件在同一个企业中有大致的规范和要求，但是在各方面还是存在差异的。因此作为一个基础设施，链路监控系统需要具有非常好的可扩展性，除了对企业中常用中间件和框架的支撑外，还要能够方便开发人员针对特殊的业务场景进行定制化的开发。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据模型&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;OpenTracing规范&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Dapper将请求按照三个维度划分为Trace、Segment、Span三种模型，该模型已经形成了OpenTracing规范。OpenTracing是为了描述分布式系统中事务的语义，而与特定下游跟踪或监控系统的具体实现细节无关，因此描述这些事务不应受到任何特定后端数据展示或者处理的影响。大的概念就不多介绍了，重点看一下Trace、Segment、Span这三种模型到底是什么。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr05oo4yrniarq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0y0jbo7ierg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●Trace&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;表示一整条调用链，包括跨进程、跨线程的所有Segment的集合。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●Segment&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;表示一个进程（JVM）或线程内的所有操作的集合，即包含若干个Span。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●Span&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;表示一个具体的操作。Span在不同的实现里可能有不同的划分方式，这里介绍一个比较容易理解的定义方式：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1Entry Span：入栈Span。Segment的入口，一个Segment有且仅有一个Entry Span，比如HTTP或者RPC的入口，或者MQ消费端的入口等。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2Local Span：通常用于记录一个本地方法的调用。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3Exit Span：出栈Span。Segment的出口，一个Segment可以有若干个Exit Span，比如HTTP或者RPC的出口，MQ生产端，或者DB、Cache的调用等。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0084fn4xrlysv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0c9bq8905rzc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;按照上面的模型定义，一次用户请求的调用链路图如下所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr003rgyub61ttb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TRACE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0txf9ej6c0uf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr06qjkq9l8xq5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0ufej0d3ki0j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOCAL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr07d3m9aa6gie&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr02wndk9tx07o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0lvss3fg93o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RPC-&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr05m9dkxxke44&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr07i34wfyn82w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0jv7wkxwogot&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr0f6zxxfp0ew&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1x4q0g0l3oa8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOCAL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1hl478nlydmo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOCAL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1k2w4ah942l7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1nqj1cyt4xk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-HTTP&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1unvhyn55f5l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1bf6jnwxc8u7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr107cmni6rp08x&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1y8mxphsi62k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CACHE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1hsu78q0zs9f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr148aa461d45n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1nlojk5cw27s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-DB&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1gtvfs7dkkjs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;QP&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1bl4xuci53r9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1feotgmg86q9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1zi3kdwti0je&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CACHE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr11nnm4d5pkp8i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RPC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1scej01uvi5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1jfluhpenm9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1fdl2tthp2s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1rt377sejisf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr147j0ih4gpcg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr1qfjfyygjxd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2oooi7tnh23&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr21xkvxdzo785&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2z2i9iidvsxr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr228vd0a6uezzj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RPC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2sz25wxkfty&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2l9fzc78fbng&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2h6dixaic8ej&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2j22zclmdga&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/8f394f03-b027-4db5-b681-809a38ffd974.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:414.0029761904762,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;8f394f03-b027-4db5-b681-809a38ffd974&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2mc7w87e3e2k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2u1zgq83huqg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;唯一id&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;每个请求有唯一的id还是很必要的，那么在海量的请求下如何保证id的唯一性并且能够包含请求的信息？Eagleeye的traceId设计如下：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr2w7lskbfc07o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;毫秒时间戳&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr25q54qr7dome&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;标识位&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr21slcd9f4np4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0B0F945316660590407391087E36CF&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr22hs39y9bi2k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;16进制IP地址&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr33p84jmw6s82&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;进程ID&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr33x064frloo5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;四位原子递增数&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3p72i88rtfkp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/ca025cf6-b179-45a1-be07-43f3f0a87f47.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:216.86481481481482,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;ca025cf6-b179-45a1-be07-43f3f0a87f47&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3v5h2drd5rz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3yetyctwu7g&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;根据这个id，我们可以知道这个请求在2022-10-18 10:10:40发出，被11.15.148.83机器上进程号为14031的Nginx（对应标识位e）接收到。其中的四位原子递增数从0-9999，目的是为了防止单机并发造成traceId碰撞。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;关系描述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;将请求划分为Trace、Segment、Span三个层次的模型后，如何描述他们之间的关系？&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从【OpenTracing规范】一节的调用链路图中可以看出，Trace、Segment可以作为整个调用链路中的逻辑结构，而Span才是真正串联起整个链路的单元，系统可以通过若干个Span串联起整个调用链路。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在Java中，方法是以入栈、出栈的形式进行调用，那么系统在记录Span的时候就可以通过模拟出栈、入栈的动作来记录Span的调用顺序，不难发现最终一个链路中的所有Span呈现树形关系，那么如何描述这棵Span树？Eagleeye中的设计很巧妙，EagleEye设计了RpcId来区别同一个调用链下多个网络调用的顺序和嵌套层次。如下图所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3ya9sjhugsd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;用户浏览器WEB请求&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3o1t1pj6tz9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;NOTIFY消息&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3na96wdt9tn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3uf01rg3yox&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;服务器&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3sc7v81ecxpq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用A&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr345tq0i5r2yi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3gnogp1dvrhq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3at85knvd2yo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3rzvb89zgeja&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr39knsrh8ny8v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3ethz0i9lcbp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用C&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr38nwujlomopx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用E&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3dfob0du5zm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用D&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr35tspbpzks9d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用B&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3a9cij8l9w6d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.2.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr341613cus5bn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr33mh7s8juafa&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3frh9e4to9s9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.3.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3lnul4a0n6ya&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3mxfotiun2r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr30iqt8ud4h6j4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用H&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr3bm11u1b5vgp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用F&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4qovqj6rceo8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用G&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4fba2bnsksob&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr45xed4lardu4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.3.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4eg4p44wm1b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr491ah3htylo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.3.3.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4soug4g54hxm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.2.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr45djng0bhemh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;搜索&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4nmlztavdga&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;MYSQL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr49vtauyhi10a&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TAIR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4iw35zgtp8ar&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/cf47cf4f-eae3-466b-afd3-86b9b104054c.png&amp;quot;,&amp;quot;width&amp;quot;:560,&amp;quot;height&amp;quot;:439,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;cf47cf4f-eae3-466b-afd3-86b9b104054c&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4kqcatayr93&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4w1cxagitxvp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RpcId用0.X1.X2.X3.....Xi来表示，根节点的RpcId固定从0开始，id的位数（\&amp;quot;.\&amp;quot;的数量）表示了Span在这棵树中的层级，Id最后一位表示了Span在这一层级中的顺序。那么给定同一个Trace中的所有RpcId，便可以很容易还原出一个完成的调用链：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr43a1w1iaknxz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr49ezb1g9d1bf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4l4725iasuua&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;跨进程传输&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;再进一步，在整个调用链的收集过程中，不可能将整个Trace信息随着请求携带到下个应用中，为了将跨进程传输的trace信息减少到最小，每个应用（Segment）中的数据一定是分段收集的，这样在Eagleeye的实现下跨Segment的过程只需要携带traceId和rpcid两个简短的信息即可。在服务端收集数据时，数据自然也是分段到达服务端的，但由于种种原因分段数据可能存在乱序和丢失的情况：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4mz29u283u9i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN 0&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4hxzsbr1ri7j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TRACE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4n0c7i86ru5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN 0.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4y8qdk2ibn58&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4gzxwivzhbq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4axddffeqm3&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4vrsdyr29yc8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr46ehltaql737&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT B&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4dijapuw672k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4jlznx6xru4d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr4rl2xnhhul47&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr41tilf4n3fdq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN 0.1.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr53pyzlfaqp0f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN 0.1.1.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5z8hw6knqhvp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr53ddm0j9x6ql&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr57dzckacnl8v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5v0ijfwdy8bg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT D&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr54qkqajvxo25&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5ue5q6xd8rd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.2.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5dlwumzy336&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5nshzl0lybi8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.1.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr58pl4dam2d4p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr51nr8o7ca87r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5k09ddabs889&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr509dc77wcaewo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5pbs683l4o1a&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5ugij3bfhul9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr54no9ydnyrd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5gt9xgjx6fw5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT A&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5wsl2uf99dtc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN 0.1.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5bpryhewhghv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5a9yvdtjevn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5v2jgrabcck&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5c6egdk6vx8t&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr557twhss02e9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5hc277q9wum&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.3.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5hbb1j8ej4d6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.2.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5oyl9u17cy4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN 0.1.2.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr5e8zuliaxpze&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr51wtodew276&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENTRY SPAN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6le4c3f778y&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SEGMENT C&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6nos26hqjizc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6o7oy3m72sq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.1.2.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6oqr9s2iy0ch&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.2.2.2&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr62ipcecx4wje&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.2.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6bkjpgp61vui&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPAN 0.1.3&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6a60imf93gbk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXIT SPAN 0.1.3.1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6wqmmtoy2n6n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/ae994a46-3272-4d5b-a1fc-c98758cae782.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:421.84894837476094,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;ae994a46-3272-4d5b-a1fc-c98758cae782&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6dhe1iaebngq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr66c66ug7erue&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如上图所示，收集到一个Trace的数据后，通过rpcid即可还原出一棵调用树，当出现某个Segment数据缺失时，可以用第一个子节点替代。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据埋点&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如何进行方法增强（埋点）是分布式链路追系统的关键因素，在Dapper提出的要求中可以看出，方法增强同时要满足应用级透明和低开销这两个要求。之前我们提到应用级透明其实是一个比较相对的概念，透明度越高意味着难度越大，对于不同的场景可以采用不同的方式。本文我们介绍阿里的Eagleye和开源的SkyWalking来比较两种埋点方式的优劣。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;编码&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;阿里Eagleye的埋点方式是直接编的码方式，通过中间件预留的扩展点实现。但是按照我们通常的理解来说，编码对于Dapper提出的扩展性和开放性似乎并不友好，那为什Eagleye么要采用这样的方式？个人认为有以下几点：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1阿里有中间件的使用规范，不是想用什么就用什么，因此对于埋点的覆盖范围是有限的；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2阿里有给力的中间件团队专门负责中间件的维护，中间件的埋点对于上层应用来说也是应用级透明的，对于埋点的覆盖是全面的；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3阿里应用有接入Eagleye监控系统的要求，因此对于可插拔的诉求并没有非常强烈。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从上面几点来说，编码方式的埋点完全可以满足Eagleye的需要，并且直接编码的方式在维护、性能消耗方面也是非常有优势的。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;字节码增强&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;相比于Eagleye，SkyWalking这样开源的分布式链路监控系统，在开源环境下就没有这么好做了。开源环境下面临的问题其实和阿里集团内部的环境正好相反：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1开源环境下每个开发者使用的中间件可能都不一样，想用什么就用什么，因此对于埋点的覆盖范围几乎是无限的；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2开源环境下，各种中间件都由不同组织或个人进行维护，甚至开发者还可以进行二次开发，不可能说服他们在代码中加入链路监控的埋点；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3开源环境下，并不一定要接入链路监控体系，大多数个人开发者由于资源有限或其他原因没有接入链路监控系统的需求。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从上面几点来说，编码方式的埋点肯定是无法满足SkyWalking的需求的。针对这样的情况，Skywalking采用如下的开发模式：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr646u2d7jbqlp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用B&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6ihssyiyipdm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;应用A&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr64qldb7pr82i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;植入应用&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr61jjiip0bbdo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENT-B&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6b7k3kkpsc1n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENT-A&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6cqr4sqfhq9i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;插件打包&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6wpmfyp3nd2d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;官方&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6gvpe9ak7udu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;插件开发&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6kug7cvu71hd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;amp;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6y2n68rwaexo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;社区&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6sefmnoyyprb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JDBC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6j9bz055rh5k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPRING-MVC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6fqlsgjs83tw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JEDIS&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr639lqaimwqan&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DUBBO&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6ar6t089p33&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPI&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr60gg9im9lywi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SKYWALKING CORE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr6w7fjpgxflxa&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/a8a34dfd-df26-4aa4-9d5b-bf23ce3da4ed.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:493.037962962963,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;a8a34dfd-df26-4aa4-9d5b-bf23ce3da4ed&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7hv1poi3yvdg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7r7op3twlip&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking提供了核心的字节码增强能力和相关的扩展接口，对于系统中使用到的中间件可以使用官方或社区提供的插件打包后植入应用进行埋点，如果没有的话甚至可以自己开发插件实现埋点。Skywalking采用字节码增强的方式进行埋点，下面简单介绍字节码增强的相关知识和Skywalking的相关实现。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;两种方式&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;对Java应用实现字节码增强的方式有Attach和Javaagent两种，本文做一个简单的介绍。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Attach&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Attach是一种相对动态的方式，在阿尔萨斯（Arthas）这样的诊断系统中广泛使用，利用JVM提供的Attach API可以实现一个JVM对另一个运行中的JVM的通信。用一个具体的场景举例：我们要实现Attach JVM对一个运行中JVM的监控。如下图所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7zpepel1obhg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;5挂载AGENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr79gluzie2em&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;指定AGENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7pq8siv4kvb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;启动&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7lkity8d2wfq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENT.JAR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7kp0orgwhf1k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;6执行AGENTMAIN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr74ygfvxxcvd3&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;修改字节码&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7cjeof1ddyuq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1 VIRTUALMACHINE.ATTACH(PID)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7lxs4mj2zmq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;运行中的JVM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7imcrq6v7ijf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2获取VIRTUALMACHINE实例&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7o2k7tfsjzm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ATTACH JVM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7lq9c6xuw96i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3建立SOCKET链接&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7972offyn4pj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/50efec8b-91f3-4d40-a143-a0fcf20ab2b0.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:274.3759259259259,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;50efec8b-91f3-4d40-a143-a0fcf20ab2b0&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7wxmii1ksd2d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr76kan3rnhcc8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1Attach JVM利用Attach API获取目标JVM的实例，底层会通过socketFile建立两个JVM间的通信；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2Attach JVM指定目标JVM需要挂载的agent.jar包，挂载成功后会执行agent包中的agentmain方法，此时就可以对目标JVM中类的字节码进行修改；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3Attach JVM通过Socket向目标JVM发送命令，目标JVM收到后会进行响应，以达到监控的目的。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr7byzxwzpo06b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr84nmti7q1bll&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;虽然Attach可以灵活地对正在运行中的JVM进行字节码修改，但在修改时也会受到一些限制，比如不能增减父类、不能增加接口、不能调整字段等。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Javaagent&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Javaagent大家应该相对熟悉，他的启动方式是在启动命令中加入javaagent参数，指定需要挂载的agent：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8hdvggws3wl4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Javaagent在IDE的Debug模式、链路监控系统等场景中广泛使用。它的核心是在目标JVM执行main方法前执行agent的premain方法，以插入前置逻辑：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8ivsvgibt7o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;启动&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr89yvgistexv7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1执行PREMAIN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr84vfj7jvvfr9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JVM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8mse95fnjvq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENT.JAR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr84t17nl66o2y&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2 ADDTRANSFORMER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8sp3fd3vc1d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;传入MYCLASS字节数组&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr895zghgqg0nn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CLASSFILETRANSFORMER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8ps5tkdgtrcg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CLASSLOADER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8vg9oavgpzt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TRANSFORM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8bxz1cmz0cl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-5返回MYCLASS修改后的字节数字&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr89mouq8vqvk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3加载&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr820f9adcron1&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;MYCLASS&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8opabvigm35&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/147d8e03-a089-4487-92dc-34c89f0f68eb.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:285.1592592592593,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;147d8e03-a089-4487-92dc-34c89f0f68eb&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8f4vfm4ikzok&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8benido4k5f5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1目标JVM通过javaagent参数启动后找到指定的agent，执行agent的premain方法；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2agent中通过JVM暴露的接口添加一个Transformer，顾名思义它可以Transform字节码；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;3目标JVM在类加载的时候会触发JVM内置的事件，回调Transformer以实现字节码的增强。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8f5bideyht1&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8fxr7xnqxbxg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;和Attach方式相比，Javaagent只能在main方法之前执行。但是在修改字节码时较为灵活，甚至可以修改JDK的核心类库。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;字节码增强类库&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Java提供了很多字节码增强类库，比如大家耳熟能详的cglib、Javassist，原生的Jdk Proxy还有底层的ASM等。在2014年，一款名为Byte Buddy的字节码增强类库横空出世，并在2015年获得Duke&#x27;s Choice award。Byte Buddy兼顾高性能、易用、功能强大3个方面，下面是摘自其官网的一张常见字节码增强类库性能比较图（单位: 纳秒）：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[108,108,108,108,108,108],&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8f3d552qm08d&amp;quot;},[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:37},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxmooz7iq3tmw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxeiufxuwwa419&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;基线&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxe4kwtko26jca&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Byte Buddy&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxezo7t8x2zy6g&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;cglib&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxemgrkujwp19f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Javassist&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxeg76hgq1wbwp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Jdk Proxy&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxeqmthlhkor6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;简单类创建&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxem77z3ynqwq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.003&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxe56twhyri7r7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;142.772&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±1.390&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxef8s7qmdkh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;515.174&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±26.753&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxe1ltirq8vido&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;193.733&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±4.430&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf1cszfcgzwix&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;70.712&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.645&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf1hj0umbpotj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;接口实现&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfvcdijv032&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.004&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfcq3mxhlv70u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1126.364&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±10.328&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfagak0017osu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;960.527&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±11.788&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfy4qwo6ziixj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1070.766&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±59.865&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfstkvr1739g8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1060.766&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±12.231&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:63},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfwavtsj5jx7k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;方法调用&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf2yyfl6o6rp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.002&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf5luntjgyi5c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.002&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfvg1rc04ohxg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.003&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfew95rsqrhs4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.011&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf1sxuo5jdiab&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.008&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfx6v1o6a1j3n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;类型扩展&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfbvvwslt032l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.004&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxf1z3qodoqer3&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;885.983&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±7.901&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfx10fjt9ccs&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1632.730&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±52.737&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfk3nno8ebaf8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;683.478&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±6.735&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfyfhnwtx4wm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxfh4vgi6nlg97&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;父类方法调用&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgvjvmtxr593&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.004&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgndg57vogs8j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.004&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgm1kkr8z54u9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.021&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgglz0xmm6f65&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;0.025&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;±0.001&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgur1xuljwh3l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;-&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr8sckqrqm9ulk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上图中的对比项我们可以大致分为两个方面：生成快速代码（方法调用、父类方法调用）和快速生成代码（简单类创建、接口实现、类型扩展），我们理所应当要优先选择前者。从数据可以看出Byte Buddy在纳秒级的精度下，在方法调用和父类方法调用上和基线基本没有差距，而位于其后的是cglib。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Byte Buddy和cglib有较为出色的性能得益于它们底层都是基于ASM构建，如果将ASM也加入对比那么它的性能一定是最高的。但是用过ASM的同学虽然不一定能感受到它的高性能，但一定能感受到它噩梦般的开发体验：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr893azeotw58o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9w4rfk25mdbr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9y9xhc75yx9m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking案例分析&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;介绍了这么多，下面结合Skywalking中使用Byte Buddy的案例和大家一起体验下字节码增强的开发过程，其中只简单介绍相关主流程代码，各种细节就不介绍了。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;插件模型&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking为开发者提供了简单易用的插件接口，对于开发者来说不需要知道怎么增强方法的字节码，只需要关心以下几点：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●要增强哪个类的哪个方法？&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking提供了ClassMatch，支持各种类、方法的匹配方式。包括类名、前缀、正则、注解等方式的匹配，除此之外还提供了与、或、非逻辑链接，以支持用户通过各种方式精确定位到一个具体的方法。我们看一个插件中的代码：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr929tcsqdc7ad&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PROTECTED CLASSMATCH&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9c8y1vtx4n6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ENHANCECLASS&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9vhoqnu618ke&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;\&amp;quot;ANNOTATION1\&amp;quot;)),&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9wtsfj5cff3r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AND(NOT(B)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9x3l5y8te1m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;T(BYMETHODANNOTATIONMATCH(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr911z4iit8qog&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr97nz1627bp3l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;.ANNOTATIONS:&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9towvu5twx1c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;...ANNOTATIONS: \&amp;quot;ANNOTATION3\&amp;quot;)));&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr997cwa8qtpf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BYMETHODANNOTATIONMATCH(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr92dpj6os29r8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;...ANNOTATIONS: \&amp;quot;ANNOTATION2\&amp;quot;)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr95ulj4pqttx2&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;OR(BYMETHODANNOTATIONMATCH(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9fl0obpwh9k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/c6d3693e-1f29-4ae9-953d-2fbf9ce87361.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:63.50185185185185,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;c6d3693e-1f29-4ae9-953d-2fbf9ce87361&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9t6iohaa91i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9qn7txr19ua&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这段逻辑表示需要增强不带annotation1注解，并且带有annotaion2注解或annotaion3注解的方法的字节码。ClassMatch通过Builder模式提供用户流式编程的方式，最终Skywalking会将用户提供的一串ClassMatch构建出一个内部使用的类匹配逻辑。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●需要添加/修改什么逻辑？&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;知道了需要增强哪个类的哪个方法，那下一步就是如何增强。Java中的方法可以分为静态方法、实例方法和构造方法三类方法，Skywalking对于这三种方法的增强逻辑为用户提供了不同的扩展点：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[162,162,162,162],&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr98b594lp6id&amp;quot;},[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:99},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxm75zxs8e3g2h&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgh84kfamrorj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;实例方法&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgid0ogg193ec&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;构造方法&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgv254ukg60bc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;静态方法&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxgfmchfq49w8e&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前置&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxhkaa2fc0nc9l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxi5qkcym1veah&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxi065e4u84uhpl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:55},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxipje3mfjfrx8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;后置&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxiyng6hfub68&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxi670h2ljq3qq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxizm0hdwge2jb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:77},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxig41p76c3zgq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;异常时&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxisurnukpsyel&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxi9xpsog178b4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxiu1j4ktx4eae&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:99},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxiijsaj94a8oa&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;参数重写&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxigagj2n2rz9d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxinn65ulg97v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;不支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxigz4un282tn6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;支持&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:99},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjyykxqhiderj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;其他扩展&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:2,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxja2v35wb9fbi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;让原Class实现EnhancedInstance接口，并且添加一个名为_$EnhancedClassField_ws的字段，可通过getSkyWalkingDynamicField和setSkyWalkingDynamicField方法进行访问。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;hidden&amp;quot;:true,&amp;quot;colSpan&amp;quot;:1,&amp;quot;rowSpan&amp;quot;:1},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxmohvoibx5c0j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgb(255, 255, 255)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxm0benzxvysclc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr93pw6u763sx8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;以实例方法为例，Skywalking提供了如下实例方法拦截器：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbr9jnjnkn2aysn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;开发者通过实现该接口即可对一个实例方法进行逻辑扩展（字节码增强）。方法参数列表中的第一个类型为EnhancedInstance的参数其实就是当前对象（this），Skywalking中所有实例方法或构造方法被增强的类都会实现EnhancedInstance接口。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;假设我们有一个Controller，里面只有一个sayHello方法返回\&amp;quot;Hello\&amp;quot;，经过Skywalking增强后，反编译一下它被增强后的字节码文件：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrakeskvax11g8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@RESTCONTROLLER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrat0c5wk8ht6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC  CLASS USERCONTROLLER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbravx8m0tk71il&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;IMPLEMENTS ENHANCEDINSTANCE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbra8i388ek0m6n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;$ENHANCEDCLASSFIELD WS;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbraseta3bcqirn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PRIVATE VOLATILE OBJECT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbraz2qmsljyqea&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC */ INSTMETHODSINTER DELEGATE$MQ8FOKL;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrajbb2anksmp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbraw8kzz2rcnyh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbra04s4aeuqt0vl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;*SYNTHETIC*/INSTMETHODSINTER DELEGATESUCUNNGO;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbra4k3ak7havzx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE /* SYNTHETIC */ CONSTRUCTORINTER DELEGATESDMA5BVO;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrafpwqv93bavu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC*/METHOD CACHEDVALUE$WEJST8DP$C5J5DN0;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbradjnr9hwstp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PRIVATE STATIC FINAL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrafrpuy6xuyro&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbradodwmfzyr1e&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC*/INSTMETHODSINTER DELEGATES41OOQL0;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbra9663oifo9ss&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC*/INSTMETHODSINTER DELEGATESE2T10;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbraixurm76bl3b&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb3wto0o6y27m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC*/ CONSTRUCTORINTER DELEGATESGF77H60;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrbqn0b8gw4nhc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STATIC VOLATILE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrbry7wp11d71r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CFINAL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrbqujqduwr3s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SYNTHETIC */ METHOD CACHEDVALUE$DJYG98GUSC5J5DNO;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb75kok8w473h&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PRIVATE STATIC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb6l3ew8iqv34&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC USERCONTROLLER()&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb5h71aik4hya&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;THIS(NULL);&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb2ldvxb0kjr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DELEGATESGF77H60.INTERCEPT((OBJECT)THIS, NEW OBJECT[O]);&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrbxpojuepvrmg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PRIVATE /* SYNTHETIC*/ USERCONTROLLER(AUXILIARY.CSWTWHEU CSWTWHEU) (&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrbb8fnpoe818&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@GETMAPPING&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrb3i0tyetr25q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STRING SAYHELLO() (&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrcs2s3766v13&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PRIVATE /* SYNTHETIC */ STRING SAYHELLO$ORIGINAL$ESTUZBKA() () F&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrcuzqahwbpmjr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN &#x27;HELLO*;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrca6gcx76ebu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;STATIC L&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrca0lenmrkvme&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CACHEDVALUESDJYG98GJSC5ISDNO - USERCONTROLLER.CLASS.GETMETMETHOD(\&amp;quot;SAYHELLO\&amp;quot;, NEW CLASS&#x27;OJ)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrcbbodsdrazf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INAL /* SYNTHETIC */ STRING SAYHELLOSORIGINALSESTUZBKASACCESSORSDJYG98GJ() (&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdqm0np1o77s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;FINA1&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd7ptk9qkm80g&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN THIS.SAYHELLOSORIGINALSESTUZBKA();&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdrjqwx7185an&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/201fb172-a660-4d9b-823c-9efbe9f14f55.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:361.45733333333334,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;201fb172-a660-4d9b-823c-9efbe9f14f55&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdjxy2c4ite0s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd82xwdcnkbm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;可以看到：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1Skywalking在其中插入了一个名为_$EnhancedClassField_ws的字段，开发者在某些场合可以合理利用该字段存储一些信息。比如存储Spring MVC中Controller的跟路径，或者Jedis、HttpClient链接中对端信息等。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2原来的syHello方法名被修改了但仍保存下来，并且新生成了一个增强后的sayHello方法，静态代码块里将经过字节码增强后的sayHello方法存入缓存字段。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●增强的前置条件是什么？&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在某些时候，并不是只要引入了对应插件就一定会对相关的代码进行字节码增强。比如我们想对Spring MVC的Controller进行埋点，我们使用的是Spring 4.x版本，但是插件却是 5.x 版本的，如果直接对源码进行增强可能会因为版本的差别带来意料之外的问题。Skywalking提供了一种witness机制，简单来说就是当我们的代码中存在指定的类或方式时，当前插件才会进行字节码增强。比如Spring 4.x版本中需要witness这两个类：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdocvcd7apr0j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;STRINGL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd8a9wj7l7vba&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;WITNESSCLASSES&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdk4dngqok93k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PROTECTED&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdnd8co1zbi0g&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;子&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdnoyop9qg9yd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;STRING[]&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdob6k7etk6v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd6whza3k4r2p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;NEW&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd9gmqvvbj0wl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;\&amp;quot;ORG.SPRINGFRAMEWORK.CACHE.INTERCEPTOR.SIMPLEKEY\&amp;quot;,&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdoipgg75xu2s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;\&amp;quot;ORG.SPRINGFRAMEWORK.CACHE.INTERCEPTOR.DEFAULTKEYGENERATOR\&amp;quot;\&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdzrg5ik0fy09&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;子&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd87yihspplqx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;子&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrde8gseuihyuc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/edf4285b-bbc5-4236-a697-3b7d2c1506ec.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:155.75925925925927,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;edf4285b-bbc5-4236-a697-3b7d2c1506ec&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdj2xy3d9qeeo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdzfpdycxomfr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如果粒度不够，还可以对方法进行witness。比如Elastic Search 6.x版本中witness了这个方法：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd43qufuhb67u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PROTECTED LIST&amp;lt;WITNESSMETHOD&amp;gt;WITNESSMETHODS(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdleo2lv8ta&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN COLLECTIONS.SINGLETONLIST(NEW WITNESSMETHOD(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd8fcqyxvjgvm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DECLARINGCLASSNAME: \&amp;quot;ORG.ELASTICSEARCH.SEARCH.SEARCHHITS\&amp;quot;\&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdoroh7jhiuk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;NAMED(\&amp;quot;GETTOTALHITS\&amp;quot;).AND(TAKESARQUMENTS( LENGTH: 0)).AND(RETURNS(LONG.CLASS)&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdepn5z0f8ytd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/32841c68-07ca-4d91-bc13-8b73c17de5cf.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:127.60277777777779,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;32841c68-07ca-4d91-bc13-8b73c17de5cf&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdhun7whg0mzu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrd04v84rnrfvas&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;意思就是SearchHits类中必须有名为getTotalHits、参数列表为空并且返回long的方法。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrdmaf7p6bptj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbretuk0ket1fu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除了上面的扩展点外，Skywalking还支持对jdk核心类库的字节码增强，比如对Callable和Runnable进行增强已支持异步模式下的埋点透传。这就需要和BootstrapClassLoader打交道了，Skywalking帮我们完成了这些复杂的逻辑。Skywalking Agent部分整体的模型如下图所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre4r7pr37m6ie&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SKYWALKING AGENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbreqxmhzi6oh9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JVM INSTRUMENTATION&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrex8j5hs4ju1&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPI&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre67c95v09dek&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ABSTRACTCLASSENHANCEPLUGINDEFINE类增强插件定义的顶层抽象类&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbree18s21z4lpt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;EXTEND&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrejfwvfqpavsr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CLASSENHANCEPLUGINDEFINE 类增强插件定义&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrek1yn6ylyoc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;插桩&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrez3nfb8b9mpq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CORE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrezyoyea29moi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CLASSTATICMETHODSENHANCEPLUGINDEFINE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrehuzvkwzqaqf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CLASSINSTANCEMETHODSENHANCEPLUGINDEFINE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbremubon4iih&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;实例&amp;amp;构造方法增强定义&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre6vqdwjdr2tl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;静态方法增强定义&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrehlk8756aelm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENTBUILDER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrekwjpa8rd0s&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BYTE BUDDY API&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrenfelw4049tc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;依赖&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbreru6kb8b4evi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;依赖&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbreg67uuvp67ve&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INSTANCEMETHODSINTERCEPTPOINT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre2m9r4kik5pq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CONSTRUCTORLNTERCEPTPOINT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre039d8ozz06yr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;STATICMETHODSINTERCEPTPOINT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre7z4ax9je3sb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;构造方法拦截点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre6t8rhhn814&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;实例方法拦截点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre9blalo1krab&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;静态方法拦截点&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbre8v0pkwekfs7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PLUGINFINDER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbreix3sdy9wfhb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TRANSFORMER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbret4tckq5555&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;STATICMETHODSAROUNDINTERCEPTOR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrerpuvpgbbran&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;插件加载器&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf9vjactk94co&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INSTANCEMETHODSAROUNDINTERCEPTOR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfy9atfs737q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;字节码增强&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfso1kgs7as8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INSTANCECONSTRUCTORLNTERCEPTOR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfwutv50vjs7p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;构造方法拦截器&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfjju55g7lojq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;静态方法拦截器&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfkmnjcg20rf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;实例方法拦截器&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf0t78pfha34j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;实现插件规范&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfoxpv90nnnp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;加载外部插件&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf4dazo6fj0gv&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PLUGINS&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf3db49kbe9f7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOGBACK&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf1pipbtuacq8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JDBC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfb0ritu5gjti&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOG4J&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfsn7o9ej8o6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ROCKETMG&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrff7e8bqel78a&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DUBBO&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfdj66vac0mmt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SPRING-MVC&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf6pv8ru0weo4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/9d1d2d35-a349-40d0-9202-9de262ffd977.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:387.128364389234,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;9d1d2d35-a349-40d0-9202-9de262ffd977&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfnbt5yglkh3p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfth0idwifbd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;左侧SPI部分是Skywalking暴露的插件规范接口，开发者根据这些接口实现插件。右侧Core部分负责加载插件并且利用Byte Buddy提供的字节码增强逻辑对应用中指定类和方法的字节码进行增强。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;主流程源码&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;介绍了Skywalking的插件模型后，下面从Javaagent的入口premain开始介绍下主要的流程：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfktmq4rvzdfc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上面的流程主要做了两件事：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1从指定的目录加载所有插件到内存中；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2构建Byte Buddy核心的AgentBuilder插桩到JVM的Instrumentation API上，包括需要增强哪些类以及核心的增强逻辑Transformer。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfmcxsz0xtul9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JVM在类加载的时候会触发JVM内置事件，回调Transformer传入原始类的字节码、类加载器等信息，从而实现对字节码的增强。其中的AbstractClassEnhancePluginDefine就是一个插件的抽象。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfx91xy5cdos&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;通过witness机制检测满足条件后，对静态方法、实例方法和构造方法进行字节码增强。我们以实例方法和构造方法为例：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfuufb9s1rhw9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;根据是否要重写入参、是否是核心类走到不同的逻辑分支，大致的增强逻辑大差不差，就是根据用户自定义的插件找到需要增强的方法和增强逻辑，利用Byte Buddy类库进行增强。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;用户通过方法拦截器实现增强逻辑，但是它是面向用户的，并不能直接用来进行字节码增强，Skywalking加了一个中间层来连接用户逻辑和Byte Buddy类库。上述代码中的XXXInter便是中间层，比如针对实例方法的InstMethodsInter：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfv3o9ubvpaw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;自定义插件&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfh8qmumf80na&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INSTANCEMETHODSAROUNDINTERCEPTOR&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf85x8cx8wkmh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;执行&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrfb5271ym8czf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;SKYWALKING&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrf0ogfu60mx7ce&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;执行---&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgcrz3kl8cfaf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;被增强的方法&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg2ll01wy7inw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;INSTMETHODSINTER#INTERCEPT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgqlfh3ebaoe&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BYTEBUDDY类库&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg5rx00thum6v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;字节码修改&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgbfpar2asd2n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BYTE BUDDY API&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg1hi0w5k8tnq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/ebb7570f-61dc-4df9-8042-0e1bdc22439b.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:280.9657407407407,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;ebb7570f-61dc-4df9-8042-0e1bdc22439b&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgn6crzzfh84q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgpnpzul7swxk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;InstMethodsInter封装用户自定义的逻辑，并且对接ByteBuddy的核心类库，当执行到被字节码增强的方法时会执行InstMethodsInter的intercept方法（可以和上面反编译被增强后类的字节码文件进行对比）：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg1eeyijlo56y&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上述逻辑其实就是下图中红框中的逻辑：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg4vs82kewrfl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;@GETMAPPING&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrghmxqkmlse5v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUBLIC STRI&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg2tp4baksmga&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;LOBJECT)THIS, NEW OBJECT(O], (CALLABLE)NEW AUXILIARY.SCWBSITO(THIG), CACHEDVALUESDJY6989898AJSCSJ5(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg3qx4pgpvo36&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;(STRING)DELEGATE$41OOGL0.INTERCEPT(&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg6dvk1mhdls&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RETURN&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgkxr2b2zo5r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/e12cd749-5fd3-494b-a359-0b26bfe5f431.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:45.52962962962963,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;e12cd749-5fd3-494b-a359-0b26bfe5f431&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgk3zwqafonh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg80lq34x52ba&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Byte Buddy提供了声明式方式，通过几个注解就可以实现字节码增强逻辑。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据收集&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;下一步就是将收集到的Trace数据发送到服务端。为了将对主链路的影响降到最小，一般都采用先存本地、再异步采集的方式。Skywalking和Eagleeye的实现有所不同，我们分别介绍：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;存储&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Eagleeye&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;鹰眼采用并发环形队列存储Trace数据，如下图所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgdebce95d3no&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;PUT INDEX&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgw80qqk4872&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgt4jjdjvuvk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgj0tlk57iitk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg5bv4jffva4x&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgnbkdtneskl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgzumw0jrcfa&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrg27txwog9xyf&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TAKE INDEX&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgbzvd08u5p5n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/50a7f16b-0792-4b3f-987c-0e494f25253f.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:461.8861111111111,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;50a7f16b-0792-4b3f-987c-0e494f25253f&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrgr0m6f5znbz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh1ypkofjehei&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;环形队列在很多日志框架的异步写入过程中很常见，其中主要包括读指针take，指向队列中的最后一条数据；写指针put，指向队列中下一个数据将存放的位置，并且支持原子读、写数据。take和put指针朝一个时钟方向移动，当生产数据的速度超过消费速度时，会出现put指针“追上”take指针的情况（套圈），此时根据不同的策略可以丢弃即将写入的数据或将老数据覆盖。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking在实现上有所区别，采用分区的QueueBuffer存储Trace数据，多个消费线程通过Driver平均分配到各个QueueBuffer上进行数据消费：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhebp4ji3rpfh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据采集&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhzyhdp83if7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CHANNEL&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhumowhleu4tp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATAPARTITIONER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh8s6r76a7xex&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;轮询OR线程ID&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhlumz5d04xul&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;分区&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhtihe5ib9ey8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;BUFFER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhjmd1gl2ey2i&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;普通数组&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhw6due4mv0x&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;QUEUEBUFFER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhp3ix2xwkuol&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;QUEUEBUFFER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhnzik8052br&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;QUEUEBUFFER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh9l5izr7lcsp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ATOMICRANGEINTEGER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhg9x7dr3k9ga&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;+原子下标&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhzkrti137dh7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;OBJECT[&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhvhsar0g6dc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh5i825hykt1u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhe83yhlu1pam&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhhwx357bfh3j&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;两种实现&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhnzb426ziuvp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ARRAYBLOCKINGQUEUEBUFFER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhrvkiynhfuqe&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrht5namkmdta&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhv36pwv50gb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;DATA&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh04lfbxl2xlp4&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JDK阻塞队列&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhbck3if1277k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ARRAYBLOCKINGQUEUE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrh8lfxt1dr20v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;异步消费&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhzgd3eslfpjj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CONSUMER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrhu0rkegyr7w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CONSUMER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrib5aj9dt2od6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CONSUMEDRIVER&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrigiejn6xlyi7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;THREAD&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrikqfcekjkp7q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;THREAD&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrib3tkk8p3ops&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;消费线程分配&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbritm46l10fsz&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;发送给服务端&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbriqo1ure7tio&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/5ed171ac-d73b-4dd1-99f5-3e3a2d0778ec.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:431.33333333333337,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;5ed171ac-d73b-4dd1-99f5-3e3a2d0778ec&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrit6zaz23r2ha&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri0ylr2n1ehdai&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;QueueBuffer有两种实现，除了基于JDK的阻塞队列外，还有一种普通数组+原子下标的方式。Skywalking对于这两种实现有不同的使用场景：基于JDK阻塞队列的实现用在服务端，而普通数组+原子下标的方式用在Agent端，因为后者更加轻量，性能更高。对于后者这里介绍一下其中比较有趣的地方。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;有趣的原子下标&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;普通的Oject数组是无法支持并发的，但只要保证每个线程获取下标的过程是原子的，即可保证数组的线程安全。这需要保证：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;1多线程获取的下标是依次递增的，从0开始到数组容量-1；&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;2当某个线程获取的下标超过数组容量，需要从0开始重新获取。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这其实并不难实现，通过一个原子数和取模操作一行代码就能完成上面的两个功能。但我们看Skywalking是如何实现这个功能的：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbric39dcrsj2ir&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking用了一个长度固定为31的JDK原子数组的固定第15位进行相关原子操作，JDK8中的原子数组利用Unsafe通过偏移量直接对数组中的元素进行内存操作，那为什么要这么做呢？我们先将其称为V1版本，再来看看V2版本，这是Skywalking早期版本使用的代码：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrigjsoitz4xyu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;肉眼可见这段V2版本的代码逻辑不如V1版本，因为在V2中获取当前值和CAS更新这两个步骤是分开的，并不具备原子性，因此并发冲突的可能性更高，从而导致循环次数增加；而使用JDK提供的incrementAndGet方法效率更高。再看下V3版本：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri2dfpq108xqn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;这个版本唯一的区别就是使用AtomicInteger代替原来的AtomicIntegerArray的第15位。还有最后一个最简单的V4版本，通过一个原子数和取模操作完成：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri7iyojd9rgnp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;通过Benchmark压测数据来看看这几个版本的性能有什么差别，固定128线程，3轮预热、5轮正式，每轮10s。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrii5vmpyv3in&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrih88bkjfyd49&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking官方数据（数组大小100）：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[216,216,216],&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrikv4vfyly3jk&amp;quot;},[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:37},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjh0wmggkirhr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjc81739fmk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;得分&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxj80m0w1g4bdo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;描述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjgcunyo5ulub&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V1&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxj1hau61g1bbo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;45832615.061 ± 2987464.163  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxj4h2pq2org7k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子数组第15位操作&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxj8iwn1opk024&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V2&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjc3akdg71d8a&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;13496720.554 ±  240134.803  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjxqkg2ndlc8p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;老版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjo34lpvsv6ck&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V3&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjzivhpm4a01e&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;39201251.850 ± 1005866.969  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjlthex9jt1&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子整数代替原子数组第15位&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrihh1stbzlmdm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●自己在mac上测试的数据（数组大小100）：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[216,216,216],&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbriwnyy5elyk1h&amp;quot;},[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:37},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxjs1vjouvri9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxknvk1fhly8ci&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;得分&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkkifjsba2y9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;描述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkzuo3d2u8qd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V1&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxksx9odnd9pzj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;37368086.272 ± 2702764.084  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkrvq0ymjkduk&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子数组第15位操作&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkahima196sje&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V2&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkjbd98s0ttig&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;8066661.954 ± 1165851.129  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkzpe4xywboh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;老版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxke4nwji2c3o&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V3&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxk817i9pt67v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;26124150.437 ±  684039.516  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkj6h6uuw2a3c&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子整数代替原子数组第15位&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkqgdpqdmsg9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V4&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkbh8e43xxwwt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;51063216.834 ± 7775168.064 ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxkg0if0x38au5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子数取模&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri78x5bqpvqhr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;●自己在mac上测试的数据（数组大小128）：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;table&amp;quot;,{&amp;quot;colsWidth&amp;quot;:[216,216,216],&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbriam8z22a5b5e&amp;quot;},[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:37},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlpd1lc6kdmrm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlyd1l27ibot&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;得分&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlkey9godlzgj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;描述&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxl9wqdo97h53r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V1&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlqe3190e7xqj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;29452469.035 ± 1853738.513  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlq80o5knefg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子数组第15位操作&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlvy4b51egqfn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V2&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxle6mn8ysbnyb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;7998178.059 ±  148894.535  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxl1ywcjipv7qg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;老版本&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlnl1c802kj29&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V3&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxlwsqdreg49p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;39011356.081 ± 3603737.004  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxls18e4rlne2l&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子整数代替原子数组第15位&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]],[&amp;quot;tr&amp;quot;,{&amp;quot;h&amp;quot;:33},[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxl0cqhng8ligok&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;V4&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxl4grtkra5dvu&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;61012525.493 ± 6054137.447  ops/s&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]],[&amp;quot;tc&amp;quot;,{&amp;quot;rowSpan&amp;quot;:1,&amp;quot;colSpan&amp;quot;:1,&amp;quot;fill&amp;quot;:&amp;quot;rgba(0, 0, 0, 0)&amp;quot;,&amp;quot;bdr&amp;quot;:{&amp;quot;top&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;right&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;bottom&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;},&amp;quot;left&amp;quot;:{&amp;quot;val&amp;quot;:&amp;quot;single&amp;quot;,&amp;quot;sz&amp;quot;:1,&amp;quot;color&amp;quot;:&amp;quot;#000000&amp;quot;}},&amp;quot;hidden&amp;quot;:false},[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhrxltckusjkk2v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原子数取模&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri19yb24mnolo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking官方显示通过原子数组的固定第15位操作的V1版本表现最好，而在我自己本机环境测试中V3版本通过原子整数代替的方式和V1版本有高有低，而原子数取模的性能是最高的。个人猜测Skywalking通过原子数组的固定第15位操作是为了进行缓存填充，测试结果和环境有比较大的关系；而不使用原子数取模的原因是原子数的大小会无限递增。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;传输&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;最后一步就是数据的传输，如下图所示：&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbricuh1fhz1z8k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;CONSOLE&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbri505r17iunhg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;VM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrixh99odaxjj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;目标JVM&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrijezrztl4tgn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;RPC-&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbris3280x4v0w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TRACE数据&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbricnvk6pjxop&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;订阅&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrie0y63hnx7fc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;服务端&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrj8mxwbdh9mj3&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;发布&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrj2oomsbtae73&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;MG&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjfqsc51ilhtm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;存储&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjoxepxfn04f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;发送&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrj9su69vzkn4u&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;采集&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjqcxz5rmzk9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;10G&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjbd5mcce5upa&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;AGENT&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjwl4k4j8eyce&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/a4jKqmm0xVdDqw19/img/40e690e4-e2c8-4f46-b3d9-6de5166fc349.png&amp;quot;,&amp;quot;width&amp;quot;:647,&amp;quot;height&amp;quot;:236.63425925925927,&amp;quot;rotation&amp;quot;:0,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;40e690e4-e2c8-4f46-b3d9-6de5166fc349&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjwlozoo1xp4n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjlz7h1w6c78&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Skywalking提供了GRPC和Kafka两种数据传输方式，而鹰眼则先将数据存入本地日志中，再通过agent将数据采集到服务端。和Skywalking相比，用户可以直接在机器上查看trace日志，而Skywalking提供了日志插件以提供可插拔的本地trace存储功能。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从整体上来看，Skywalking采取了埋点和中间件代码分离的方式，在某种意义上实现了应用级透明，但是在后期维护的过程中中间件版本的升级需要配合插件版本的升级，在维护方面带来了一些问题。而Eagleeye编码方式的埋点由中间件团队维护，对于上层的应用也是透明的，更加适合阿里集团内部的环境。&amp;quot;]],[&amp;quot;br&amp;quot;,{&amp;quot;type&amp;quot;:&amp;quot;textWrapping&amp;quot;,&amp;quot;data&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrj77yknc85mt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjejff9lt7yb9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;若有收获，就点个赞吧‍&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrje9qf6enpcye&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;‍&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9xyhbrjotaghjs19p&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]]]&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;传统的大型单体系统随着业务体量的增大已经很难满足市场对技术的需求，通过对将整块业务系统拆分为多个互联依赖的子系统并针对子系统进行独立优化，能够有效提升整个系统的吞吐量。在进行系统拆分之后，完整的业务事务逻辑所对应的功能会部署在多个子系统上，此时用户的一次点击请求会触发若干子系统之间的相互功能调用，如何分析一次用户请求所触发的多次跨系统的调用过程、如何定位存在响应问题的调用链路等等问题是链路追踪技术所要解决的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举一个网络搜索的示例，来说明这样一个链路监控系统需要解决的一些挑战。当用户在搜索引擎中输入一个关键词后，一个前端服务可能会将这次查询分发给数百个查询服务，每个查询服务在其自己的索引中进行搜索。该查询还可以被发送到许多其他子系统，这些子系统可以处理敏感词汇、检查拼写、用户画像分析或寻找特定领域的结果，包括图像、视频、新闻等。所有这些服务的结果有选择地组合在一起，最终展示在搜索结果页面中，我们将这个模型称为一次完整的搜索过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这样一次搜索过程中，总共可能需要数千台机器和许多不同的服务来处理一个通用搜索查询。此外，在网络搜索场景中，用户的体验和延迟紧密相关，一次搜索延时可能是由于任何子系统的性能不佳造成的。开发人员仅考虑延迟可能知道整个系统存在问题，但却无法猜测哪个服务有问题，也无法猜测其行为不良的原因。首先，开发人员可能无法准确知道正在使用哪些服务，随时都可能加入新服务和修改部分服务，以增加用户可见的功能，并改进性能和安全性等其他方面；其次，开发人员不可能是庞大系统中每个内部微服务的专家，每一个微服务可能有不同团队构建和维护；另外，服务和机器可以由许多不同的客户端同时共享，因此性能问题可能是由于另一个应用的行为引起。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;Dapper简介&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在分布式链路追踪方面，Google早在2010年针对其内部的分布式链路跟踪系统Dapper[1]，发表了相关论文对分布式链路跟踪技术进行了介绍（强烈推荐阅读）。其中提出了两个基本要求。第一，拥有广泛的覆盖面。针对庞大的分布式系统，其中每个服务都需要被监控系统覆盖，即使是整个系统的一小部分没有被监控到，该链路追踪系统也可能是不可靠的。第二，提供持续的监控服务。对于链路监控系统，需要7*24小时持续保障业务系统的健康运行，保证任何时刻都可以及时发现系统出现的问题，并且通常情况下很多问题是难以复现的。根据这两个基本要求，分布式链路监控系统的有如下几个设计目标：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;链路监控组件应该以基础通用组件的方式提供给用户，以提高稳定性，应用开发者不需要关心它们。对于Java语言来说，方法可以说是调用的最小单位，想要实现对调用链的监控埋点势必对方法进行增强。Java中对方法增强的方式有很多，比如直接硬编码、动态代理、字节码增强等等。应用级透明其实是一个比较相对的概念，透明度越高意味着难度越大，对于不同的场景可以采用不同的方式。&lt;br data-path=&quot;12,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;低开销是链路监控系统最重要的关注点，分布式系统对于资源和性能的要求本身就很苛刻，因此监控组件必须对原服务的影响足够小，将对业务主链路的影响降到最低。链路监控组件对于资源的消耗主除了体现在增强方法的消耗上，其次还有网络传输和数据存储的消耗，因为对于链路监控系统来说，想要监控一次请求势必会产生出请求本身外的额外数据，并且在请求过程中，这些额外的数据不仅会暂时保存在内存中，在分布式场景中还会伴随着该请求从上游服务传输至下游服务，这就要求产生的额外数据尽可能地少，并且在伴随请求进行网络传输的时候只保留少量必要的数据。&lt;br data-path=&quot;14,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;16,1&quot;/&gt;无论是何种软件系统，可扩展性和开放性都是衡量其质量优劣的重要标准。对于链路监控系统这样的基础服务系统来说，上游业务系统对于链路监控系统来说是透明的，在一个规模较大的企业中，一个基础服务系统往往会承载成千上万个上游业务系统。每个业务系统由不同的团队和开发人员负责，虽然使用的框架和中间件在同一个企业中有大致的规范和要求，但是在各方面还是存在差异的。因此作为一个基础设施，链路监控系统需要具有非常好的可扩展性，除了对企业中常用中间件和框架的支撑外，还要能够方便开发人员针对特殊的业务场景进行定制化的开发。&lt;br data-path=&quot;16,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;数据模型&lt;/span&gt;&lt;/section&gt;&lt;span&gt;&lt;br data-path=&quot;16,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;OpenTracing规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Dapper将请求按照三个维度划分为Trace、Segment、Span三种模型，该模型已经形成了OpenTracing[2]规范。OpenTracing是为了描述分布式系统中事务的语义，而与特定下游跟踪或监控系统的具体实现细节无关，因此描述这些事务不应受到任何特定后端数据展示或者处理的影响。大的概念就不多介绍了，重点看一下Trace、Segment、Span这三种模型到底是什么。&lt;br data-path=&quot;16,9&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;18,1&quot;/&gt;表示一整条调用链，包括跨进程、跨线程的所有Segment的集合。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;18,5&quot;/&gt;表示一个进程（JVM）或线程内的所有操作的集合，即包含若干个Span。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;表示一个具体的操作。Span在不同的实现里可能有不同的划分方式，这里介绍一个比较容易理解的定义方式：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;18,11&quot;/&gt;1、Entry Span：入栈Span。Segment的入口，一个Segment有且仅有一个Entry Span，比如HTTP或者RPC的入口，或者MQ消费端的入口等。&lt;br data-path=&quot;18,13&quot;/&gt;2、Local Span：通常用于记录一个本地方法的调用。&lt;br data-path=&quot;18,15&quot;/&gt;3、Exit Span：出栈Span。Segment的出口，一个Segment可以有若干个Exit Span，比如HTTP或者RPC的出口，MQ生产端，或者DB、Cache的调用等。&lt;br data-path=&quot;18,17&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;按照上面的模型定义，一次用户请求的调用链路图如下所示：&lt;br data-path=&quot;20,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6398809523809523&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XX2I89X4IYYsjzfVNGmoNBuF3z2PqgqGwfe8hIt1HGHmR2TNict4h4TsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;672&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;唯一id&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每个请求有唯一的id还是很必要的，那么在海量的请求下如何保证id的唯一性并且能够包含请求的信息？Eagleeye的traceId设计如下：&lt;br data-path=&quot;63,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3351851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXsZ81M6QzZ0Kibr8VmVh8WEoYQsIDnnqsAVo7MTpibuMOhP6rFrx7vNAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据这个id，我们可以知道这个请求在2022-10-18 10:10:40发出，被11.15.148.83机器上进程号为14031的Nginx（对应标识位e）接收到。其中的四位原子递增数从0-9999，目的是为了防止单机并发造成traceId碰撞。&lt;br data-path=&quot;72,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;关系描述&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将请求划分为Trace、Segment、Span三个层次的模型后，如何描述他们之间的关系？&lt;br data-path=&quot;72,5&quot;/&gt;从【OpenTracing规范】一节的调用链路图中可以看出，Trace、Segment可以作为整个调用链路中的逻辑结构，而Span才是真正串联起整个链路的单元，系统可以通过若干个Span串联起整个调用链路。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;72,7&quot;/&gt;在Java中，方法是以入栈、出栈的形式进行调用，那么系统在记录Span的时候就可以通过模拟出栈、入栈的动作来记录Span的调用顺序，不难发现最终一个链路中的所有Span呈现树形关系，那么如何描述这棵Span树？Eagleeye中的设计很巧妙，EagleEye设计了RpcId来区别同一个调用链下多个网络调用的顺序和嵌套层次。如下图所示：&lt;br data-path=&quot;72,9&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7839285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXZy0wHeCdn9Usvz1YvOIrb8WDTOa0lCQmwOfhPC7OSfFOaQm2icM9pvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;560&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;RpcId用0.X1.X2.X3.....Xi来表示，根节点的RpcId固定从0开始，id的位数（&quot;.&quot;的数量）表示了Span在这棵树中的层级，Id最后一位表示了Span在这一层级中的顺序。那么给定同一个Trace中的所有RpcId，便可以很容易还原出一个完成的调用链：&lt;br data-path=&quot;106,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;-&lt;/span&gt; 0&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;跨进程传输&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再进一步，在整个调用链的收集过程中，不可能将整个Trace信息随着请求携带到下个应用中，为了将跨进程传输的trace信息减少到最小，每个应用（Segment）中的数据一定是分段收集的，这样在Eagleeye的实现下跨Segment的过程只需要携带traceId和rpcid两个简短的信息即可。在服务端收集数据时，数据自然也是分段到达服务端的，但由于种种原因分段数据可能存在乱序和丢失的情况：&lt;br data-path=&quot;109,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6520076481835564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XX6sxApORTgbq7Px99jCslXhYpAicfWGNhUx2JmzdYdKb7lCPD3ZHvhibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图所示，收集到一个Trace的数据后，通过rpcid即可还原出一棵调用树，当出现某个Segment数据缺失时，可以用第一个子节点替代。&lt;br data-path=&quot;159,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;数据埋点&lt;/span&gt;&lt;/section&gt;&lt;span&gt;&lt;br data-path=&quot;159,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如何进行方法增强（埋点）是分布式链路追系统的关键因素，在Dapper提出的要求中可以看出，方法增强同时要满足应用级透明和低开销这两个要求。之前我们提到应用级透明其实是一个比较相对的概念，透明度越高意味着难度越大，对于不同的场景可以采用不同的方式。本文我们介绍阿里的Eagleye和开源的SkyWalking来比较两种埋点方式的优劣。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;159,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;编码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;159,7&quot;/&gt;阿里Eagleye的埋点方式是直接编的码方式，通过中间件预留的扩展点实现。但是按照我们通常的理解来说，编码对于Dapper提出的扩展性和开放性似乎并不友好，那为什Eagleye么要采用这样的方式？个人认为有以下几点：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;159,9&quot;/&gt;1、阿里有中间件的使用规范，不是想用什么就用什么，因此对于埋点的覆盖范围是有限的；&lt;br data-path=&quot;159,11&quot;/&gt;2、阿里有给力的中间件团队专门负责中间件的维护，中间件的埋点对于上层应用来说也是应用级透明的，对于埋点的覆盖是全面的；&lt;br data-path=&quot;159,13&quot;/&gt;3、阿里应用有接入Eagleye监控系统的要求，因此对于可插拔的诉求并没有非常强烈。&lt;br data-path=&quot;159,15&quot;/&gt;从上面几点来说，编码方式的埋点完全可以满足Eagleye的需要，并且直接编码的方式在维护、性能消耗方面也是非常有优势的。&lt;br data-path=&quot;159,17&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字节码增强&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;159,19&quot;/&gt;相比于Eagleye，SkyWalking这样开源的分布式链路监控系统，在开源环境下就没有这么好做了。开源环境下面临的问题其实和阿里集团内部的环境正好相反：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;159,21&quot;/&gt;1、开源环境下每个开发者使用的中间件可能都不一样，想用什么就用什么，因此对于埋点的覆盖范围几乎是无限的；&lt;br data-path=&quot;159,23&quot;/&gt;2、开源环境下，各种中间件都由不同组织或个人进行维护，甚至开发者还可以进行二次开发，不可能说服他们在代码中加入链路监控的埋点；&lt;br data-path=&quot;159,25&quot;/&gt;3、开源环境下，并不一定要接入链路监控体系，大多数个人开发者由于资源有限或其他原因没有接入链路监控系统的需求。&lt;br data-path=&quot;159,27&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上面几点来说，编码方式的埋点肯定是无法满足SkyWalking的需求的。针对这样的情况，Skywalking采用如下的开发模式：&lt;br data-path=&quot;159,29&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7620370370370371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXpicpEM2xJPYu5JcLdQmxibnV1DG8AGJJGicsmnOtEMPPII7ITsKOoQDXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking提供了核心的字节码增强能力和相关的扩展接口，对于系统中使用到的中间件可以使用官方或社区提供的插件打包后植入应用进行埋点，如果没有的话甚至可以自己开发插件实现埋点。Skywalking采用字节码增强的方式进行埋点，下面简单介绍字节码增强的相关知识和Skywalking的相关实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;两种方式&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;178,3&quot;/&gt;对Java应用实现字节码增强的方式有Attach和Javaagent两种，本文做一个简单的介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;178,5&quot;/&gt;&lt;strong&gt;Attach&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br data-path=&quot;178,7&quot;/&gt;&lt;/strong&gt;Attach是一种相对动态的方式，在阿尔萨斯（Arthas）这样的诊断系统中广泛使用，利用JVM提供的Attach API可以实现一个JVM对另一个运行中的JVM的通信。用一个具体的场景举例：我们要实现Attach JVM对一个运行中JVM的监控。如下图所示：&lt;br data-path=&quot;178,9&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42407407407407405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XX7XicibVK5jDPlgp1ib1IyEtXHCicbPUcTpWholHRfxswKYYeaEE4w558Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1、Attach JVM利用Attach API获取目标JVM的实例，底层会通过socketFile建立两个JVM间的通信；&lt;br data-path=&quot;192,1&quot;/&gt;2、Attach JVM指定目标JVM需要挂载的agent.jar包，挂载成功后会执行agent包中的agentmain方法，此时就可以对目标JVM中类的字节码进行修改；&lt;br data-path=&quot;192,3&quot;/&gt;3、Attach JVM通过Socket向目标JVM发送命令，目标JVM收到后会进行响应，以达到监控的目的。&lt;br data-path=&quot;192,5&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然Attach可以灵活地对正在运行中的JVM进行字节码修改，但在修改时也会受到一些限制，比如不能增减父类、不能增加接口、不能调整字段等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;194,1&quot;/&gt;&lt;strong&gt;Javaagent&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;194,3&quot;/&gt;Javaagent大家应该相对熟悉，他的启动方式是在启动命令中加入javaagent参数，指定需要挂载的agent：&lt;br data-path=&quot;194,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;java&lt;/span&gt; -javaagent:/path/agent.jar=key1=value1,key2=value2 -jar myJar.jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Javaagent在IDE的Debug模式、链路监控系统等场景中广泛使用。它的核心是在目标JVM执行main方法前执行agent的premain方法，以插入前置逻辑：&lt;br data-path=&quot;195,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44074074074074077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXBC3cKaHdg6u7xdWZtaLjkfKcHWDjUtnRwr1wcdjHZUS54psDI7FjVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1、目标JVM通过javaagent参数启动后找到指定的agent，执行agent的premain方法；&lt;br data-path=&quot;210,1&quot;/&gt;2、agent中通过JVM暴露的接口添加一个Transformer，顾名思义它可以Transform字节码；&lt;br data-path=&quot;210,3&quot;/&gt;3、目标JVM在类加载的时候会触发JVM内置的事件，回调Transformer以实现字节码的增强。&lt;br data-path=&quot;210,5&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;和Attach方式相比，Javaagent只能在main方法之前执行。但是在修改字节码时较为灵活，甚至可以修改JDK的核心类库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;字节码增强类库&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Java提供了很多字节码增强类库，比如大家耳熟能详的cglib、Javassist，原生的Jdk Proxy还有底层的ASM等。&lt;/span&gt;&lt;span&gt;在2014年，一款名为Byte Buddy[3]的字节码增强类库横空出世，并在2015年获得Duke&#x27;s Choice award。&lt;/span&gt;&lt;span&gt;Byte Buddy兼顾高性能、易用、功能强大3个方面，下面是摘自其官网的一张常见字节码增强类库性能比较图（单位: 纳秒）：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.579020979020979&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXpAPmzIQwgGk9ibhLzBnVmtfSlt0yQLEnlzAMqRbToy2L8BEgeVCmflA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;715&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上图中的对比项我们可以大致分为两个方面：&lt;strong&gt;生成快速代码&lt;/strong&gt;（方法调用、父类方法调用）和&lt;strong&gt;快速生成代码&lt;/strong&gt;（简单类创建、接口实现、类型扩展），我们理所应当要优先选择前者。从数据可以看出Byte Buddy在纳秒级的精度下，在方法调用和父类方法调用上和基线基本没有差距，而位于其后的是cglib。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;214,1&quot;/&gt;Byte Buddy和cglib有较为出色的性能得益于它们底层都是基于ASM构建，如果将ASM也加入对比那么它的性能一定是最高的。但是用过ASM的同学虽然不一定能感受到它的高性能，但一定能感受到它噩梦般的开发体验：&lt;br data-path=&quot;214,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mv.visitFieldInsn(GETSTATIC, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;java/lang/System&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;out&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Ljava/io/PrintStream;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mv.visitLdcInsn(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;begin of sayhello().&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mv.visitMethodInsn(INVOKEVIRTUAL, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;java/io/PrintStream&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;println&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(Ljava/lang/String;)V&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Skywalking案例分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;介绍了这么多，下面结合Skywalking中使用Byte Buddy的案例和大家一起体验下字节码增强的开发过程，其中只简单介绍相关主流程代码，各种细节就不介绍了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;插件模型&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br data-path=&quot;217,5&quot;/&gt;&lt;/span&gt;&lt;span&gt;Skywalking为开发者提供了简单易用的插件接口，对于开发者来说不需要知道怎么增强方法的字节码，只需要关心以下几点：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br data-path=&quot;217,9&quot;/&gt;Skywalking提供了ClassMatch，支持各种类、方法的匹配方式。&lt;/span&gt;&lt;span&gt;包括类名、前缀、正则、注解等方式的匹配，除此之外还提供了与、或、非逻辑链接，以支持用户通过各种方式精确定位到一个具体的方法。&lt;/span&gt;&lt;span&gt;我们看一个插件中的代码：&lt;/span&gt;&lt;br data-path=&quot;217,11&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09814814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXicaZksG8259EiaNqjKcfem1M3WEHdeSSrFMAYyYEOCLT2uX8ZTpuN8yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这段逻辑表示需要增强不带annotation1注解，并且带有annotaion2注解或annotaion3注解的方法的字节码。ClassMatch通过Builder模式提供用户流式编程的方式，最终Skywalking会将用户提供的一串ClassMatch构建出一个内部使用的类匹配逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;231,3&quot;/&gt;知道了需要增强哪个类的哪个方法，那下一步就是如何增强。Java中的方法可以分为静态方法、实例方法和构造方法三类方法，Skywalking对于这三种方法的增强逻辑为用户提供了不同的扩展点：&lt;br data-path=&quot;231,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4064935064935065&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XX6ED9zAAVqYSOmgl0TzibErwiaw3nZfVMLvnicHaccIVjggTBtYgTvfQBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;770&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以实例方法为例，Skywalking提供了如下实例方法拦截器：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; InstanceMethodsAroundInterceptor {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; beforeMethod(EnhancedInstance objInst, Method method, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[] allArguments, Class&amp;lt;?&amp;gt;[] argumentsTypes,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      MethodInterceptResult result) throws Throwable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; afterMethod(EnhancedInstance objInst, Method method, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[] allArguments, Class&amp;lt;?&amp;gt;[] argumentsTypes,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; ret) throws Throwable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; handleMethodException(EnhancedInstance objInst, Method method, &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt;[] allArguments,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                               Class&amp;lt;?&amp;gt;[] argumentsTypes, Throwable t);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;开发者通过实现该接口即可对一个实例方法进行逻辑扩展（字节码增强）。方法参数列表中的第一个类型为EnhancedInstance的参数其实就是当前对象（this），Skywalking中所有实例方法或构造方法被增强的类都会实现EnhancedInstance接口。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;234,1&quot;/&gt;假设我们有一个Controller，里面只有一个sayHello方法返回&quot;Hello&quot;，经过Skywalking增强后，反编译一下它被增强后的字节码文件：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5586666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXNHaibBGSSs010J603KC5jGk6etoo3oto3b7q2RicicyAI4v9dGHSdEP4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看到：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;271,1&quot;/&gt;1、Skywalking在其中插入了一个名为&lt;/span&gt;&lt;span&gt;_$EnhancedClassField_ws&lt;/span&gt;&lt;span&gt;的字段，开发者在某些场合可以合理利用该字段存储一些信息。比如存储Spring MVC中Controller的跟路径，或者Jedis、HttpClient链接中对端信息等。&lt;br data-path=&quot;271,3&quot;/&gt;2、原来的syHello方法名被修改了但仍保存下来，并且新生成了一个增强后的sayHello方法，静态代码块里将经过字节码增强后的sayHello方法存入缓存字段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;271,5&quot;/&gt;&lt;strong&gt;增强的前置条件是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br data-path=&quot;271,7&quot;/&gt;&lt;/strong&gt;在某些时候，并不是只要引入了对应插件就一定会对相关的代码进行字节码增强。比如我们想对Spring MVC的Controller进行埋点，我们使用的是Spring 4.x版本，但是插件却是 5.x 版本的，如果直接对源码进行增强可能会因为版本的差别带来意料之外的问题。Skywalking提供了一种witness机制，简单来说就是当我们的代码中存在指定的类或方式时，当前插件才会进行字节码增强。比如Spring 4.x版本中需要witness这两个类：&lt;br data-path=&quot;271,9&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24074074074074073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXOIWicl96fiaWfrOFdkFwye7abDdwt1iaFjD08m5kRGNgtR66ZzG5ayzCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果粒度不够，还可以对方法进行witness。比如Elastic Search 6.x版本中witness了这个方法：&lt;br data-path=&quot;285,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19722222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXIPV0ryJbIAfiaVb9ibBLTK5uUbgsaITZOOFhgpFiaz2FEDxoBWvWNu9xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;意思就是SearchHits类中必须有名为getTotalHits、参数列表为空并且返回long的方法。&lt;br data-path=&quot;292,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了上面的扩展点外，Skywalking还支持对jdk核心类库的字节码增强，比如对Callable和Runnable进行增强已支持异步模式下的埋点透传。这就需要和BootstrapClassLoader打交道了，Skywalking帮我们完成了这些复杂的逻辑。Skywalking Agent部分整体的模型如下图所示：&lt;br data-path=&quot;294,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.598343685300207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXcgF1WTnPyzhC6E9nRBRTdcZ7TYlBFtU8qZaZK62AKTiaf3QfS9FQDUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;966&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;左侧SPI部分是Skywalking暴露的插件规范接口，开发者根据这些接口实现插件。右侧Core部分负责加载插件并且利用Byte Buddy提供的字节码增强逻辑对应用中指定类和方法的字节码进行增强。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主流程源码&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br data-path=&quot;338,3&quot;/&gt;&lt;/span&gt;&lt;span&gt;介绍了Skywalking的插件模型后，下面从Javaagent的入口premain开始介绍下主要的流程：&lt;/span&gt;&lt;br data-path=&quot;338,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上面的流程主要做了两件事：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;339,1&quot;/&gt;1、从指定的目录加载所有插件到内存中；&lt;br data-path=&quot;339,3&quot;/&gt;2、构建Byte Buddy核心的AgentBuilder插桩到JVM的Instrumentation API上，包括需要增强哪些类以及核心的增强逻辑Transformer。&lt;br data-path=&quot;339,5&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Transformer&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AgentBuilder&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Transformer&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; PluginFinder pluginFinder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Transformer(PluginFinder pluginFinder) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.pluginFinder = pluginFinder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;   * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; typeDescription  类描述信息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;   * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; classLoader      这个类的类加载器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;    * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; module         jdk9中模块信息&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;    * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;           修改后的类的字节码构建器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  @Override&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; DynamicType.Builder&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?&lt;/span&gt;&amp;gt; transform(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; DynamicType.Builder&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?&lt;/span&gt;&amp;gt; builder,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; TypeDescription typeDescription,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ClassLoader classLoader,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; JavaModule module) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    LoadedLibraryCollector.registerURLClassLoader(classLoader);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 根据类信息找到针对这个类进行字节码增强的插件，可能有多个&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;List&lt;/span&gt;&amp;lt;AbstractClassEnhancePluginDefine&amp;gt; pluginDefines = pluginFinder.find(typeDescription);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (pluginDefines.size() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      DynamicType.Builder&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?&lt;/span&gt;&amp;gt; newBuilder = builder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      EnhanceContext context = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; EnhanceContext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (AbstractClassEnhancePluginDefine define : pluginDefines) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 调用插件的define方法得到新的字节码&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        DynamicType.Builder&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?&lt;/span&gt;&amp;gt; possibleNewBuilder = define.define(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          typeDescription, newBuilder, classLoader, context);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (possibleNewBuilder != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          newBuilder = possibleNewBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__comment&quot;&gt;// 返回增强后的字节码给JVM，完成字节码增强&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; newBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; builder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JVM在类加载的时候会触发JVM内置事件，回调Transformer传入原始类的字节码、类加载器等信息，从而实现对字节码的增强。其中的AbstractClassEnhancePluginDefine就是一个插件的抽象。&lt;br data-path=&quot;340,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractClassEnhancePluginDefine&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; DynamicType.Builder&amp;lt;?&amp;gt; define(TypeDescription typeDescription, DynamicType.Builder&amp;lt;?&amp;gt; builder,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     ClassLoader classLoader, EnhanceContext context) throws PluginException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// witness机制&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    WitnessFinder finder = WitnessFinder.INSTANCE;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;//通过类加载器找witness类，没有就直接返回，不进行字节码的改造&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String[] witnessClasses = witnessClasses();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (witnessClasses != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (String witnessClass : witnessClasses) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!finder.exist(witnessClass, classLoader)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;//通过类加载器找witness方法，没有就直接返回，不进行字节码的改造&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    List&amp;lt;WitnessMethod&amp;gt; witnessMethods = witnessMethods();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!CollectionUtil.isEmpty(witnessMethods)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (WitnessMethod witnessMethod : witnessMethods) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!finder.exist(witnessMethod, classLoader)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// enhance开始修改字节码&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DynamicType.Builder&amp;lt;?&amp;gt; newClassBuilder = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.enhance(typeDescription, builder, classLoader, context);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 修改完成，返回新的字节码&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    context.initializationStageCompleted();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; newClassBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; DynamicType.Builder&amp;lt;?&amp;gt; enhance(TypeDescription typeDescription, DynamicType.Builder&amp;lt;?&amp;gt; newClassBuilder,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       ClassLoader classLoader, EnhanceContext context) throws PluginException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 增强静态方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    newClassBuilder = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.enhanceClass(typeDescription, newClassBuilder, classLoader);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 增强实例方法&amp;amp; 构造方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    newClassBuilder = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.enhanceInstance(typeDescription, newClassBuilder, classLoader, context);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; newClassBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}       &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过witness机制检测满足条件后，对静态方法、实例方法和构造方法进行字节码增强。我们以实例方法和构造方法为例：&lt;br data-path=&quot;341,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ClassEnhancePluginDefine&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AbstractClassEnhancePluginDefine&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; DynamicType.Builder&amp;lt;?&amp;gt; enhanceInstance(TypeDescription typeDescription,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           DynamicType.Builder&amp;lt;?&amp;gt; newClassBuilder, ClassLoader classLoader,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           EnhanceContext context) throws PluginException {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取插件定义的构造方法拦截点ConstructorInterceptPoint&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ConstructorInterceptPoint[] constructorInterceptPoints = getConstructorsInterceptPoints();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取插件定义的实例方法拦截点InstanceMethodsInterceptPoint&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    InstanceMethodsInterceptPoint[] instanceMethodsInterceptPoints = getInstanceMethodsInterceptPoints();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    String enhanceOriginClassName = typeDescription.getTypeName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 非空校验&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    boolean existedConstructorInterceptPoint = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (constructorInterceptPoints != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; constructorInterceptPoints.length &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      existedConstructorInterceptPoint = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    boolean existedMethodsInterceptPoints = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (instanceMethodsInterceptPoints != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; instanceMethodsInterceptPoints.length &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      existedMethodsInterceptPoints = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!existedConstructorInterceptPoint &amp;amp;&amp;amp; !existedMethodsInterceptPoints) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; newClassBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 这里就是之前提到的让类实现EnhancedInstance接口，并添加_$EnhancedClassField_ws字段&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!typeDescription.isAssignableTo(EnhancedInstance.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!context.isObjectExtended()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// Object类型、private volatie修饰符、提供方法进行访问&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        newClassBuilder = newClassBuilder.defineField(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;_&lt;span class=&quot;code-snippet__variable&quot;&gt;$EnhancedClassField_ws&lt;/span&gt;&quot;&lt;/span&gt;, Object.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;, ACC_PRIVATE | ACC_VOLATILE)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          .implement(EnhancedInstance.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          .intercept(FieldAccessor.ofField(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;_&lt;span class=&quot;code-snippet__variable&quot;&gt;$EnhancedClassField_ws&lt;/span&gt;&quot;&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        context.extendObjectCompleted();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 构造方法增强&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (existedConstructorInterceptPoint) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (ConstructorInterceptPoint constructorInterceptPoint : constructorInterceptPoints) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// jdk核心类&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isBootstrapInstrumentation()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          newClassBuilder = newClassBuilder.&lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt;(constructorInterceptPoint.getConstructorMatcher())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .intercept(SuperMethodCall.INSTANCE.andThen(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                  .to(BootstrapInstrumentBoost&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                  .forInternalDelegateClass(constructorInterceptPoint&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 非jdk核心类                                                                                                         .getConstructorInterceptor()))));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__comment&quot;&gt;// 找到对应的构造方法，并通过插件自定义的InstanceConstructorInterceptor进行增强&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          newClassBuilder = newClassBuilder.&lt;span class=&quot;code-snippet__keyword&quot;&gt;constructor&lt;/span&gt;(constructorInterceptPoint.getConstructorMatcher())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .intercept(SuperMethodCall.INSTANCE.andThen(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                  .to(new ConstructorInter(constructorInterceptPoint&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                               .getConstructorInterceptor(), classLoader))));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 实例方法增强&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (existedMethodsInterceptPoints) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (InstanceMethodsInterceptPoint instanceMethodsInterceptPoint : instanceMethodsInterceptPoints) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 找到插件自定义的实例方法拦截器InstanceMethodsAroundInterceptor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        String interceptor = instanceMethodsInterceptPoint.getMethodsInterceptor();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 这里在插件自定义的匹配条件上加了一个【不为静态方法】的条件&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ElementMatcher.Junction&amp;lt;MethodDescription&amp;gt; junction = not(isStatic()).and(instanceMethodsInterceptPoint.getMethodsMatcher());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 需要重写入参&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (instanceMethodsInterceptPoint.isOverrideArgs()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__comment&quot;&gt;// jdk核心类&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isBootstrapInstrumentation()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            newClassBuilder = newClassBuilder.method(junction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              .intercept(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     .withBinders(Morph.Binder.install(OverrideCallable.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     .to(BootstrapInstrumentBoost.forInternalDelegateClass(interceptor)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 非jdk核心类 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              newClassBuilder = newClassBuilder.method(junction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .intercept(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       .withBinders(Morph.Binder.install(OverrideCallable.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       .to(new InstMethodsInterWithOverrideArgs(interceptor, classLoader)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 不需要重写入参&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__comment&quot;&gt;// jdk核心类    &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isBootstrapInstrumentation()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              newClassBuilder = newClassBuilder.method(junction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .intercept(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       .to(BootstrapInstrumentBoost.forInternalDelegateClass(interceptor)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__comment&quot;&gt;// 非jdk核心类                                                                   &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 找到对应的实例方法，并通过插件自定义的InstanceMethodsAroundInterceptor进行增强&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            newClassBuilder = newClassBuilder.method(junction)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .intercept(MethodDelegation.withDefaultConfiguration()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       .to(new InstMethodsInter(interceptor, classLoader)));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; newClassBuilder;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}        &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据是否要重写入参、是否是核心类走到不同的逻辑分支，大致的增强逻辑大差不差，就是根据用户自定义的插件找到需要增强的方法和增强逻辑，利用Byte Buddy类库进行增强。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;342,1&quot;/&gt;用户通过方法拦截器实现增强逻辑，但是它是面向用户的，并不能直接用来进行字节码增强，Skywalking加了一个中间层来连接用户逻辑和Byte Buddy类库。上述代码中的XXXInter便是中间层，比如针对实例方法的InstMethodsInter：&lt;br data-path=&quot;342,3&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43425925925925923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXVhEOn1nOZM04w0FGb5ryeARx8HmBias90yb6sHCOIn7PBwlzN7OulRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;InstMethodsInter封装用户自定义的逻辑，并且对接ByteBuddy的核心类库，当执行到被字节码增强的方法时会执行InstMethodsInter的intercept方法（可以和上面反编译被增强后类的字节码文件进行对比）：&lt;br data-path=&quot;355,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InstMethodsInter&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ILog LOGGER = LogManager.getLogger(InstMethodsInter.class);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 用户在插件中定义的实例方法拦截器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; InstanceMethodsAroundInterceptor interceptor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InstMethodsInter&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String instanceMethodsAroundInterceptorClassName, ClassLoader classLoader)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 加载用户在插件中定义的实例方法拦截器&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            interceptor = InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName, classLoader);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; PluginException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Can&#x27;t create InstanceMethodsAroundInterceptor.&quot;&lt;/span&gt;, t);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * 当执行被增强方法时，会执行该intercept方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; obj          实例对象（this）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; allArguments 方法入参&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; method       参数描述&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; zuper        原方法调用的句柄&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;    *  &lt;span class=&quot;code-snippet__doctag&quot;&gt;@param&lt;/span&gt; method       被增强后的方法的引用 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;             方法返回值&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@RuntimeType&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;code-snippet__title&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(@This Object obj, @AllArguments Object[] allArguments, @SuperCall Callable&amp;lt;?&amp;gt; zuper,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Origin Method method)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Throwable {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        EnhancedInstance targetObject = (EnhancedInstance) obj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        MethodInterceptResult result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MethodInterceptResult();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 拦截器前置逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            interceptor.beforeMethod(targetObject, method, allArguments, method.getParameterTypes(), result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            LOGGER.error(t, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;class[{}] before method[{}] intercept failure&quot;&lt;/span&gt;, obj.getClass(), method.getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Object ret = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 是否中断方法执行&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!result.isContinue()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ret = result._ret();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 执行原方法&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ret = zuper.call();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 为什么不能走method.invoke？因为method已经是被增强后方法，调用就死循环了！&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 可以回到之前的字节码文件查看原因，看一下该intercept执行的时机&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 &lt;span class=&quot;code-snippet__comment&quot;&gt;// 拦截器异常时逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                interceptor.handleMethodException(targetObject, method, allArguments, method.getParameterTypes(), t);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t2) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                LOGGER.error(t2, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;class[{}] handle method[{}] exception failure&quot;&lt;/span&gt;, obj.getClass(), method.getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; t;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__comment&quot;&gt;// 拦截器后置逻辑&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ret = interceptor.afterMethod(targetObject, method, allArguments, method.getParameterTypes(), ret);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                LOGGER.error(t, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;class[{}] after method[{}] intercept failure&quot;&lt;/span&gt;, obj.getClass(), method.getName());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上述逻辑其实就是下图中红框中的逻辑：&lt;br data-path=&quot;356,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07037037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXiaW1wC6UQdiae2I1ehWFPcs1UqMXsc4Y6ibBibL295fc3XIRss7s39QJQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Byte Buddy提供了声明式方式，通过几个注解就可以实现字节码增强逻辑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;数据收集&lt;/span&gt;&lt;/section&gt;&lt;span&gt;&lt;br data-path=&quot;364,3&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下一步就是将收集到的Trace数据发送到服务端。为了将对主链路的影响降到最小，一般都采用先存本地、再异步采集的方式。Skywalking和Eagleeye的实现有所不同，我们分别介绍：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;364,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;存储&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Eagleeye&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br data-path=&quot;364,9&quot;/&gt;&lt;/span&gt;&lt;span&gt;鹰眼采用并发环形队列存储Trace数据，如下图所示：&lt;/span&gt;&lt;br data-path=&quot;364,11&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7138888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXznImRUQKib2eHIicMHU49hRJooWo4oPJozwWwwHoBzXX2gXSgt4gL9bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;环形队列在很多日志框架的异步写入过程中很常见，其中主要包括读指针take，指向队列中的最后一条数据；写指针put，指向队列中下一个数据将存放的位置，并且支持原子读、写数据。take和put指针朝一个时钟方向移动，当生产数据的速度超过消费速度时，会出现put指针“追上”take指针的情况（套圈），此时根据不同的策略可以丢弃即将写入的数据或将老数据覆盖。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br data-path=&quot;375,3&quot;/&gt;&lt;/span&gt;&lt;span&gt;Skywalking在实现上有所区别，采用分区的QueueBuffer存储Trace数据，多个消费线程通过Driver平均分配到各个QueueBuffer上进行数据消费：&lt;/span&gt;&lt;br data-path=&quot;375,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXXuUuZhRITZibtLPSedzyUdWCiaMn0zCWw73eGNHOj10WuarFJBAILbxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;QueueBuffer有两种实现，除了基于JDK的阻塞队列外，还有一种普通数组+原子下标的方式。Skywalking对于这两种实现有不同的使用场景：基于JDK阻塞队列的实现用在服务端，而普通数组+原子下标的方式用在Agent端，因为后者更加轻量，性能更高。对于后者这里介绍一下其中比较有趣的地方。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;409,1&quot;/&gt;&lt;strong&gt;有趣的原子下标&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;409,3&quot;/&gt;普通的Oject数组是无法支持并发的，但只要保证每个线程获取下标的过程是原子的，即可保证数组的线程安全。这需要保证：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br data-path=&quot;409,5&quot;/&gt;1、多线程获取的下标是依次递增的，从0开始到数组容量-1；&lt;br data-path=&quot;409,7&quot;/&gt;2、当某个线程获取的下标超过数组容量，需要从0开始重新获取。&lt;br data-path=&quot;409,9&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这其实并不难实现，通过&lt;strong&gt;一个原子数和取模&lt;/strong&gt;操作一行代码就能完成上面的两个功能。但我们看Skywalking是如何实现这个功能的：&lt;br data-path=&quot;409,11&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 提供原子下标的类&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// JDK提供的原子数组&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AtomicIntegerArray values;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 固定值15&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; VALUE_OFFSET = &lt;span class=&quot;code-snippet__number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 数组开始下标，固定为0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 数组最后一个元素的下标，固定为数组的最大长度-1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; endValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxValue)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 创建一个长度为31的原子数组&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicIntegerArray(&lt;span class=&quot;code-snippet__number&quot;&gt;31&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__comment&quot;&gt;// 将第15位设置为初始值0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values.set(VALUE_OFFSET, startValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.startValue = startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.endValue = maxValue - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 核心方法，获取数组的下一个下标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getAndIncrement&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 原子递增&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            next = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values.incrementAndGet(VALUE_OFFSET);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果超过了数组范围，CAS重制到0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (next &amp;gt; endValue &amp;amp;&amp;amp; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.values.compareAndSet(VALUE_OFFSET, next, startValue)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; endValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (next &amp;gt; endValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; next - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking用了一个长度固定为31的JDK原子数组的固定第15位进行相关原子操作，JDK8中的原子数组利用Unsafe通过偏移量直接对数组中的元素进行内存操作，那为什么要这么做呢？我们先将其称为V1版本，再来看看V2版本，这是Skywalking早期版本使用的代码：&lt;br data-path=&quot;410,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AtomicInteger &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; endValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxValue&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicInteger(startValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.startValue = startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.endValue = maxValue - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getAndIncrement&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; current;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 获取当前下标&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            current = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// 如果超过最大范围则从0开始&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            next = current &amp;gt;= &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.endValue ? &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.startValue : current + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__comment&quot;&gt;// CAS更新下标，失败则循环重试&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;.compareAndSet(current, next));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; current;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;肉眼可见这段V2版本的代码逻辑不如V1版本，因为在V2中获取当前值和CAS更新这两个步骤是分开的，并不具备原子性，因此并发冲突的可能性更高，从而导致循环次数增加；而使用JDK提供的incrementAndGet方法效率更高。再看下V3版本：&lt;br data-path=&quot;411,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;// 用原子整型替代V1版本的原子数组&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AtomicInteger value;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; endValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxValue)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.value = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicInteger(startValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.startValue = startValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.endValue = maxValue - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getAndIncrement&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; next;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            next = &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.value.incrementAndGet();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (next &amp;gt; endValue &amp;amp;&amp;amp; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.value.compareAndSet(next, startValue)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; endValue;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (next &amp;gt; endValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; next - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个版本唯一的区别就是使用AtomicInteger代替原来的AtomicIntegerArray的第15位。还有最后一个最简单的V4版本，通过一个原子数和取模操作完成：&lt;br data-path=&quot;412,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; AtomicLong &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; mask;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AtomicRangeInteger&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; startValue, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; maxValue&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicLong(startValue);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.mask = maxValue - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getAndIncrement&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;)(&lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;.incrementAndGet() % mask);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过Benchmark压测数据来看看这几个版本的性能有什么差别，固定128线程，3轮预热、5轮正式，每轮10s。&lt;br data-path=&quot;413,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;版本&lt;br data-path=&quot;416,0,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;得分&lt;br data-path=&quot;416,0,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;描述&lt;br data-path=&quot;416,0,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V1&lt;br data-path=&quot;416,1,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;45832615.061 ± 2987464.163  ops/s&lt;br data-path=&quot;416,1,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子数组第15位操作&lt;br data-path=&quot;416,1,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V2&lt;br data-path=&quot;416,2,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;13496720.554 ±  240134.803  ops/s&lt;br data-path=&quot;416,2,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;老版本&lt;br data-path=&quot;416,2,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V3&lt;br data-path=&quot;416,3,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;39201251.850 ± 1005866.969  ops/s&lt;br data-path=&quot;416,3,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子整数代替原子数组第15位&lt;br data-path=&quot;416,3,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;版本&lt;br data-path=&quot;418,0,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;得分&lt;br data-path=&quot;418,0,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;描述&lt;br data-path=&quot;418,0,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V1&lt;br data-path=&quot;418,1,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;37368086.272 ± 2702764.084  ops/s&lt;br data-path=&quot;418,1,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子数组第15位操作&lt;br data-path=&quot;418,1,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V2&lt;br data-path=&quot;418,2,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;8066661.954 ± 1165851.129  ops/s&lt;br data-path=&quot;418,2,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;老版本&lt;br data-path=&quot;418,2,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V3&lt;br data-path=&quot;418,3,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;26124150.437 ±  684039.516  ops/s&lt;br data-path=&quot;418,3,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子整数代替原子数组第15位&lt;br data-path=&quot;418,3,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V4&lt;br data-path=&quot;418,4,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;51063216.834 ± 7775168.064 ops/s&lt;br data-path=&quot;418,4,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子数取模&lt;br data-path=&quot;418,4,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;版本&lt;br data-path=&quot;420,0,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;得分&lt;br data-path=&quot;420,0,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;描述&lt;br data-path=&quot;420,0,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V1&lt;br data-path=&quot;420,1,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;29452469.035 ± 1853738.513  ops/s&lt;br data-path=&quot;420,1,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子数组第15位操作&lt;br data-path=&quot;420,1,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V2&lt;br data-path=&quot;420,2,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;7998178.059 ±  148894.535  ops/s&lt;br data-path=&quot;420,2,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;老版本&lt;br data-path=&quot;420,2,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V3&lt;br data-path=&quot;420,3,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;39011356.081 ± 3603737.004  ops/s&lt;br data-path=&quot;420,3,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子整数代替原子数组第15位&lt;br data-path=&quot;420,3,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;V4&lt;br data-path=&quot;420,4,0,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;61012525.493 ± 6054137.447  ops/s&lt;br data-path=&quot;420,4,1,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;section&gt;&lt;span&gt;原子数取模&lt;br data-path=&quot;420,4,2,0,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking官方显示通过原子数组的固定第15位操作的V1版本表现最好，而在我自己本机环境测试中V3版本通过原子整数代替的方式和V1版本有高有低，而原子数取模的性能是最高的。个人猜测Skywalking通过原子数组的固定第15位操作是为了进行缓存填充，测试结果和环境有比较大的关系；而不使用原子数取模的原因是原子数的大小会无限递增。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br data-path=&quot;421,1&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;传输&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后一步就是数据的传输，如下图所示：&lt;br data-path=&quot;421,5&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36574074074074076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJOqHpqCSTUDw7snzJVX5XXJNgJyeTo8fQWkI5kibu1zsEkJsm0V4WfMPbQzhGqibvUbqPRHXIBCZicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Skywalking提供了GRPC和Kafka两种数据传输方式，而鹰眼则先将数据存入本地日志中，再通过agent将数据采集到服务端。和Skywalking相比，用户可以直接在机器上查看trace日志，而Skywalking提供了日志插件以提供可插拔的本地trace存储功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;从整体上来看，Skywalking采取了埋点和中间件代码分离的方式，在某种意义上实现了应用级透明，但是在后期维护的过程中中间件版本的升级需要配合插件版本的升级，在维护方面带来了一些问题。而Eagleeye编码方式的埋点由中间件团队维护，对于上层的应用也是透明的，更加适合阿里集团内部的环境。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[1]:https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-2010-1.pdf&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2]https://github.com/opentracing-contrib/opentracing-specification-zh/blob/master/specification.md&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3]https://bytebuddy.net/#/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;article data-clipboard-cangjie=&quot;[&amp;quot;root&amp;quot;,{&amp;quot;copyFrom&amp;quot;:1157878574},[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy6kszjfcsazm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;前言&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy6ng46cdq0mxj&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:false,&amp;quot;sz&amp;quot;:11,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;最近，阿里云EMR重磅推出新版数据湖Datalake，100%兼容社区大数据开源组件，具备极强的弹性能力，支持数据湖构建DLF&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;、&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:false,&amp;quot;sz&amp;quot;:11,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;对象存储OSS和OSS-HDFS，支持 Delta Lake、Hudi、Iceberg 三种湖格式。结合阿里云DataWorks，可以为用户提供从入湖、建模、开发、调度、治理、安全等全链路数据湖开发治理能力，帮助客户提升数据的应用效率。同时，也是满分通过中国信通院评测的数据湖产品。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9gmqw7wjwew2cv2dr&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:false,&amp;quot;sz&amp;quot;:11,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;众所周知，EMR的数据湖文件存储、加速等依托数据湖文件系统JindoFS来实现的。本文主要分享下，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;阿里云EMR数据湖文件系统JindoFS:是如何面向开源和云打造下一代 HDFS的。&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9gn3n93aufjr8zhcao&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;当前问题与挑战&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9gmgchtjlwvxyiiaah&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;了解数据湖文件系统JindoFS (后文简称：JindoFS）的同学可能知道它的一体两面，cache 模式和 block 模式，block 模式提供自己的文件元数据服务，解决对象存储不支持文件、目录语义的问题，同时重用了 cache 模式的缓存服务引擎，支持数据访问加速，整体上大幅优化了用户使用 OSS 的体验。JindoFS 一个系统两个模式部署使用简单，简单到可以退化成客户端模式直接读写 OSS，用户根据场景切换非常方便，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;目前已成为业内大数据和 AI 场景使用阿里云 OSS 最好的访问方式，除了现有阿里云 EMR 的客户，在阿里云上和 IDC 也有大量的用户在使用。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;作为 JindoFS 的系统核心，block 模式在使用过程中我们也积攒了不少经验教训，同时伴随存/算分离的深入人心和数据湖架构的流行，新的问题和挑战也在出现，主要表现在以下几个方面。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4pkf36ieh552crjhjq&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:32},&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;5c4rv0553jv&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原生支持文件、目录语义还不够，开源大数据领域常用的 HDFS 能力成为刚需。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Block 模式提供了文件元数据管理，解决了 HDFS 重度用户使用 OSS 的痛点，同时这部分用户对 HDFS 重要功能也有越来越多的期待，这样迁移过来的时候可以继续使用原来在 HDFS 上的投入和资产。因此 JindoFS 开发了大量的 HDFS 功能，比如数据加密，Ranger 鉴权，和日志审计。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4plzfhaosn14445jv&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:32},&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;5c4rv0553jv&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;extraData&amp;quot;:{}}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;存储和缓存做成一套系统对中小用户确实很友好，但设计上很难满足大规模部署和更加碎片化的计算场景。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 在存储部分表现得越来越像 HDFS，越来越复杂；在缓存部分涌现的需求主要是在更多的计算场景支持更好的策略来做数据访问加速，Hadoop 不再是唯一。前者要求存储功能强大和完善，满足大规模部署；后者要求保持存储功能兼容和不变，在业务透明的情况下选择各种缓存策略进行加速。这两部分功能其实是正交的，co-design 做在一起确实对文件读写更加高效，只需要访问 JindoFS master 一次，不需要往分开的两个系统跑两趟分别拿文件元信息和缓存信息。 &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4pm9kz7tnxa0esr16b&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:32},&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;5c4rv0553jv&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;isChecked&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false,&amp;quot;extraData&amp;quot;:{}}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;半托管部署性能最好，云原生和跨产品访问的诉求日益迫切。&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;原来 Hadoop 平台比较强势，大数据上云本质上就是把线下的 Hadoop 一整套搬到云上来，现在则不一样，阿里云上有非常丰富的计算产品支持，大数据上云不再只是上 Hadoop，因此 JindoFS 除了半托管部署，我们需要支持全托管服务化，构建统一的数据湖存储，方便更多的计算产品在存储方案上拉通对齐。所谓数据湖架构，就是存储统一用一套，支持计算开放百家争鸣。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4pln0u4xxiu695k1bm&amp;quot;,&amp;quot;ind&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot; &amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4q4sni7pw8ni3n6ru&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;为了解决这些问题和应对挑战，我们首先对数据湖文件系统 JindoFS 做了架构升级，将两个模式加以拆分，一分为二，JindoFS 存储系统和 JindoData 加速系统，新的 JindoFS 专注打造下一代数据湖存储系统，缓存加速的功能则交给 JindoData 加速系统，两者松耦合同时也紧密协作。新的 JindoFS 将 HDFS 兼容和功能对齐作为核心目标，把 HDFS 重度用户和IDC用户的上云平迁作为核心考虑要素，并着重解决云原生数据湖场景跨产品打通访问的痛点。目前新版本 JindoFS 已经完成服务化部署嵌入到 OSS 产品，推出全托管 OSS-HDFS 服务，并上线开服使用。关于 JindoFS 我们会有多篇文章从多个方面对它展开介绍，&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;本文着重把它和开源 HDFS 加以对比，系统阐述我们为什么把 JindoFS 打造成为 HDFS，而且是云时代更好的 HDFS。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4po8b2bin95kokadqm&amp;quot;,&amp;quot;ind&amp;quot;:{}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy627aybwz96dt&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;解决方案：将数据湖文件系统&amp;quot;],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 打造成为HDFS&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9gnqmej16osa25tjoe&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:18.666666666666668,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:14,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;一、JindoFS 和 HDFS 系统对比分析&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9gnqdnz27n0nhz8wi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;首先，我们来看下 JindoFS 的系统架构，如下图示。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4di2czn92aqc6qmpg5&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;05h8cz&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:42972,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:264.9398734177215,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/7e1a1866-ee94-4638-8c59-b5e155bec07d.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;15938ab3-66e0-4603-b479-c1b16dee6150&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4di2czn9bbe77brkxh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4pocte6e8oh9q6rx6v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;整个系统利用阿里云 OSS 云产品构建，除了 OSS，主要包括元数据服务 NamespaceService 和 JindoFS 客户端，非常简洁。我们把它和开源 HDFS 做个对比，HDFS 架构如下：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4dhzomk6zlrqqk5ncl&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;ahgyqa&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:64673,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:258.2568203198495,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/8a562a3d-1ecc-4779-9e0e-0b5e88dbf3fd.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;4b4e63ea-9b84-460c-a092-3b66a22a650f&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4gq97a53xcvx7rxjyj&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4di1y5fp19qkjgriy&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;作为对比，我们看到 JindoFS 和 HDFS 在系统整体上还是比较类似的，除了数据存储不一样，都含有一个核心的元数据服务。JindoFS 之所以也采取了这种方式，关键考虑就是要跟 HDFS 对齐，保证元数据管理上的强一致性和严格事务语义支持，缺乏中心化服务这个角色，很多存储功能难以单纯在客户端协调实现，甚至需要依赖分布式事务保证严格语义，过于复杂。另一方面，受益于云原生设计理念和云平台产品支持，JindoFS 在架构上比 HDFS 做了大幅简化，去除了 DataNode 节点，JindoFS 只有客户端和元数据服务。在部署和使用上简便了很多，在许多个 Worker 机器上只需部署客户端就可以了。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4w685rn57jwkgdiqry&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;在数据存储上，JindoFS 使用的阿里云 OSS 和 DataNode 一样使用数据的冗余机制，保证了数据的安全性，高可用性。区别在于 阿里云 OSS 帮助我们解决了副本复制、弹性、线性扩展和运维等问题。而 DataNode 服务需要人工维护，处理坏盘坏节点，处理节点 Decomission 相对复杂，对技术人员要求较高，操作不当容易导致数据丢失风险，在使用体验上经常让人头痛不已。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4dhzomkbxkd1slgv7v&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:21.333333333333332,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy79qnyp3kza4k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:16,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;二、元数据服务&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7sem8wmestq&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;HDFS NameNode 的元数据全量放置在内存当中提供服务，元数据持久化包含 NameNode 保存的 FsImage，和3个 JournlaNode 保存的 EditLog。为了实现服务高可用，需要2个 Zkfc 服务对 NameNode 进行探活，并用3个 Zookeeper 节点进行服务选主。整体架构看起来相对复杂，运维成本也高很多。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7b8bork34yab&amp;quot;,&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;qyskuy&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:50561,&amp;quot;width&amp;quot;:427,&amp;quot;height&amp;quot;:251,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/5737719e-8258-4ce5-b51b-9cd68a91caab.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;09f25f3b-b957-48d4-886d-c9ff8b554c13&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4m52kcvh0p99htox0d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7l3rerzli14r&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 元数据服务的部署模式相对简单很多，只需1个 Leader 节点和2个 Follower 节点。目前默认的元数据存储方式，采用了 Raft 协议+RocksDB 存储引擎的组合方式。利用 Raft 实现3个节点之间的元数据复制，保障了文件元数据的安全性。三个节点由1个 Leader 和2个 Follower 构成。Leader 节点主要提供服务。在 Leader 节点出现问题时，会立马切换到另外一个 Follower 节点担任 Leader 角色。这个操作是毫秒级的，用户基本无感知。在未来，JindoFS 还将探索跨集群、跨AZ的元数据复制。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4m6srl3til224t7nx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;2vrwcy&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;数据湖文件系统JindoFS元数据服务.jpeg&amp;quot;,&amp;quot;size&amp;quot;:129645,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:316.408426483233,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/b814df1a-6335-44c1-b67c-e92922500c43.jpeg&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;ebefd074-5af6-4d46-929f-b118520615d4&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9i27qo3jphc5f0iqcg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4nifz2ll30bqv4ocgm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的 MetaService 是系统的核心，它负责存储文件系统整个目录树的元数据，并服务于 API 调用过来的元数据查询、修改请求。系统中包含了多了 MetaWorker 用于处理一些异步任务，比如元数据分析统计、归档任务处理、异步删除等等。MetaService 负责调度和分配这些任务给多个 MetaWorker ，从而分摊 MetaService 的压力。目前JindoFS使用的元数据存储默认为 RocksDB+Raft 的方式。我们定义并抽象了一层 MetaStore 接口，后面我们还将探索将元数据存储放在 OTS、ArkDB、TiKV 等其它新型的存储引擎上。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4nifz2l0gbvuftdmbg6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;作为比较， HDFS 的 NameNode 负责存储整个系统元数据。它的数据只支持保存在本地磁盘，序列化的方式存储在 FsImage 文件上，真正提供服务的是全量 load 到内存中的数据。受限于内存大小，它能承载的文件数有限，实践中最大很难超过4亿。它只支持2个 NameNode ，虽然社区最新版支持多个 Standby 节点，但是会给 DataNode blockReport 造成更大压力。JindoFS 支持2个 Follower 节点和多个 Learner 节点，增加的 Learner 节点不会给集群带来额外负担。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7kf78jbu3pfb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;使用 RocksDB 存储引擎可以解决元数据规模问题。文件元数据规模，一直是文件系统的难题之一。HDFS NameNode 将所有文件元数据加载到内存的方式，极大限制了其所能支持的文件数。一般认为，HDFS NameNode 所能支撑的文件元数据在4亿左右，即使增加更多的内存硬件，也难以支撑更大规模。JindoFS 的元数据存储，采用了内存+磁盘的组合方式，并且极大提高了元数据存储规模的上限。RocksDB 基于 LSM 数据结构，写入性能出众，而查询性能相对一般，尤其是对list目录操作涉及的 Range Query。JindoFS 采用了精心设计的内存 Cache 层，大幅提高了查询性能，在查询性能上实现超越 HDFS。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7anv271clt5n&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们还对写入性能进行精心优化。RocksDB 的写入性能出众，尤其是当采取 batch 写入之后，我们发现写入瓶颈并没有发生在 RocksDB 以及磁盘上，而是在于内存互斥锁。NameNode 采取全局一把读写锁的方式相对简单，虽然读性能不受影响，但是写入受互斥锁的影响，存在瓶颈。JindoFS 使用了细粒度锁的方式，将写锁细化到子目录（文件）上，这样在同时写入多个不同的文件时，并不会产生互斥，提高了写入并发。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7ze1zjr1w4lr&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;经测试，JindoFS 服务单个 Bucket 在存储达到100亿文件数时，依然能保持在峰值性能的90%以上，并且持续稳定。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918cjdc5vgjy9ymjcx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;l4w43gzeq6m8lovdtjo&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;10亿文件数性能测试&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;l918bxe9l9gfqm1i26&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;f9b2hr&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:32584,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:193.83466666666666,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/14a63a85-9153-4dc1-81f4-4fa8d129fd4c.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;3f0ba2be-a56b-4f27-9d9b-7eeaaf5836d8&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4w465cyppb9trgq3f&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918d0wlue82z48ghh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;NNBench测试&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918cwdv85g1210ixgu&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测试环境使用core节点 8 * ecs.g6e.8xlarge 我们使用8台32core的机器，目的是可以加大同时启动的Mapper个数，使得Mapper任务可以在同一时刻执行，从而测试出元数据服务的性能。结果如下：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918cwdv7ii1tatkxr2&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;fcqokx&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:953160,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:188.5982905982906,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/5176dcda-f5cb-4b11-ac47-742229aab11d.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;d590305c-8f53-4abd-9752-7ce3f6f21ba5&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918cwdv5ybwxchejmu&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从测试结果可以看出，JindoFS在元数据创建、查询两个场景下的性能不输于HDFS。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918doxskvb760f0t&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7kq47jrua8ug&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;OSS 除了存储 JindoFS 文件 Block 之外，JindoFS 的元数据服务可以充分利用 OSS 的海量存储空间，来增强 JindoFS 的元数据能力。首先，JindoFS 的 auditlog 是存储在 OSS 上的，避免了本地写入 auditlog 造成额外的 IO 压力。JindoFS 利用 OSS 存储任务清单，所有的 MetaWorker 节点从 OSS 获取任务清单，避免直连了 MetaService。MetaWork可以处理分析统计、块清理、归档任务等异步任务。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4djgao506voi2jmrhv6&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l918hm5nhv4m60culpd&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:21.333333333333332,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:16,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;三、元数据统计分析&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918he38mojd2nyrrcp&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上文中提到，JindoFS 系统中包含了多了 MetaWorker 用于处理一些异步任务，其中一个关键人物是对元数据进行统计分析。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918kmgf7u5yc4fdd23&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;我们知道，HDFS对元数据进行统计分析，最常用的是用 du/count 命令发送到 NameNode，由NameNode在内存中计算得到目录树、文件数、文件大小统计结果。如果要查询更深子目录的分布，还要进行多次的查询操作，使用起来相对比较繁琐。如果对一个超大目录进行统计，因为是内存中临时计算，往往还要拿读锁比较长的时间，导致服务无法处理写请求。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918n8qfgljl2blm8nc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 将元数据统计分析任务下放到 MetaWorker，由 MetaWorker 进行处理，因此降低了 MetaService 的压力。JindoFS 采用全量 + 增量的计算方式，既保证了高效的计算，也保证了数据的实时准确性。JindoFS 除了提供基本的 du/count 支持，还支持额外的命令查询一个目录下所有文件的大小分布情况，可以直观地看出大文件、小文件的占比。对于 ETL 作业可以提供参考，及时地对小文件进行合并，大文件进行拆解，优化作业执行效率。JindoFS还计划支持文件访问的热度统计，方便用户直观地看到文件的冷热情况，可以及时地对冷文件进行归档处理。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l918tqxzkmhnphj4mco&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;du/count 性能测试&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918wuf4mjz8j0r4hf9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测试方式上，我们分别往 JindoFS 和 HDFS写入1亿个文件，文件的目录层次模拟一个普通用户常用的场景。主要的文件集中在/user和/hive/warehouse等目录下。然后对根目录执行一次 count 命令，然后统计耗时。测试结果如下：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l918u0uh88kruxofzy6&amp;quot;,&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;z331ue&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:278887,&amp;quot;width&amp;quot;:446,&amp;quot;height&amp;quot;:338,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/5deaded0-b077-47a7-9970-c12aabe05f67.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;d176319b-06c5-494d-a7b1-803267fd01e9&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l93ktj5fwmiwnalthn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918wfqchbfwrgjjz74&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;从测试结果中我们可以看出，JindoFS 由于采用了预计算和全量+增量的策略，极大地提高了 du/count 的查询速度。而 HDFS 一次 count 命令需要花费较长时间，而这段时间将很大地影响到正常的作业。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l918u2tm48r7spwwkxn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4gr0c5o6k2czxpnxs4&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:21.333333333333332,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:16,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;四、数据存储&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4gr0dto95ea1857ger&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的文件组织方式是，一个文件会切分成变长的 Block，Block 数据存储在 OSS 上。OSS（Object Storage Service）是阿里云提供的海量、安全、低成本、高持久的云存储服务，单个存储空间的容量不限制。OSS 底层将文件按 Key 进行打散，可以水平线性扩展。这也是 JindoFS 服务采用 OSS 存储 Block 的主要原因。由此我们可以摆脱传统 HDFS 集群的扩容瓶颈。通过 OSS，我们可以存储百PB甚至更多的数据。如果采取将文件按原始方式直接写入 OSS 的方式，可能造成 OSS 的 Key 存在倾斜。比如说 warehouse 目录可能路径较深，并且在不同的 DB 目录，不同的 partition 之间存在数据大小不平衡的问题。JindoFS 服务则很好地解决了这个问题。JindoFS 将目录层次结构保存在元数据服务里，在 OSS 上则保存的是扁平结构的 Block 文件。这些 Block 文件采用了打散的 Key，从而避免了 OSS 可能存在单一prefix热点问题。打散了 OSS Key，JindoFS 服务可以更好地发挥 OSS 带宽的优势。得益于阿里云高效的网络基础设施，OSS 的带宽可以充分得到利用。HDFS 的带宽取决于磁盘规格和数量，一般的用户很难花大量金钱购买高规格的磁盘。通过使用OSS 带宽，省去了用户购买高规格磁盘的费用，可以利用更低的成本达到更大的带宽和性能优势。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4gr5xylr5frocuaej&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;HDFS 同样也是将文件拆分成 128MB 的 Block 打散到各个 DataNode 上，DataNode 也可以很好地扩展到上千台。有一个问题是 DataNode 并不能无限地增加，当 DataNode 达到上千台时，大量的 blockReport 对 NameNode 造成了很大压力，而且首先于 NameNode 内存瓶颈，一个集群中的 block 数量受到了限制。DataNode 在弹性缩容上也相对复杂，缩容一台 DataNode 前要先做Decomission，这个过程要等待在其他 DataNode 重新构建出副本，才能使得这台 DataNode 安全下线，这个过程可能持续几个小时左右，所以弹性上小很多。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l918faw99613mqhcgw&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l918eumaekys1quyg46&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;TestDFSIO测试&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918evqd23xrciszdbx&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测试环境，HDFS集群使用 8 * ecs.d2s.10xlarge， JindoFS集群使用 10* ecs.g5.8xlarge 使得两个集群的 CPU 个数是相等的。由于 HDFS 需要使用本地盘，因此每台机器配备了 7300 Gib * 15块HDD磁盘。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918fug5lkww3ffz24&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918evqdpq8p31vjrk8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;测试结果（单位MB/sec）&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l93mb6xzv93dtmn89m&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;8ummhs&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:292994,&amp;quot;width&amp;quot;:649,&amp;quot;height&amp;quot;:99.84615384615385,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/72f88954-b7ad-4d38-86f2-4169f0d3a089.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;f2f673bf-d30b-44cd-9a17-2cc83a8e4713&amp;quot;}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l918evqd393zht8ha49&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;通过上述测试成绩，我们可以发现 JindoFS 的文件读写IO性能好于 HDFS 。JindoFS 的存算分离架构发挥了优势，充分利用了网络带宽。而 HDFS 由于需要写3副本，因此同时消耗了磁盘和网络带宽，使得整体的吞吐率低于 JindoFS。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4gr7wksdhryiu5ybpb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7vune6cq5sur&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;五、HDFS 兼容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy767nkwiom9lr&amp;quot;,&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;18m1j2on2pt&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{&amp;quot;bold&amp;quot;:true},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;数据兼容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7ryft2xogt6&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 保存的元数据内容，包含了 HDFS 的元数据的所有关键字段。HDFS 的元数据保存在 FSImage，主要包含 INode 定义、Block 定义以及文件 Lease、Snapshot 信息等。拿 INode 定义举例，下图中的 INode 定义， HDFS 使用 Protobuf 序列化，JindoFS 使用更加高效的 Flatbuffer 序列化方式。JindoFS 的 INode 定义包含了 HDFS 的 INode 的所有字段，这样的话，客户的云下HDFS 集群平迁到 JindoFS 时，元数据部分可以快速批量导入，因为 JindoFS 包含了所有 HDFS 字段，因此迁移后元数据不会有差异，就可以做到元数据的兼容性。INode 定义中，例如文件权限，JindoFS 同样支持0777的posix  文件权限，并且支持 sticky bit 位。JindoFS 支持文件 atime 和mtime，也具有 Xattr 字段和 acl 字段，都兼容 HDFS 原有的 Xattr 和 acl 信息。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7cku1nvef6mb&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;除此之外，Block 定义以及文件 Lease、Snapshot 信息也都可以完整地从 HDFS 迁移到JindoFS，而不会有信息的丢失。JindoFS 的元数据定义可以认为是 HDFS 的超集，除了兼容 HDFS的元数据之外，JindoFS 还增加了一些扩展信息，用于支持 JindoFS 的增强功能。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4djhraqql9y677p3jd&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4djhp5di0b6tcvngb&amp;quot;,&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;2x3rg0odtsb&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{&amp;quot;bold&amp;quot;:true},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;接口兼容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4djhp5d3ef06p31btm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的一大特色是对 HDFS 接口的全面兼容。传统的对象存储系统，追求极致的扩展性，文件操作接口上相对简单。而 JindoFS 在两者之间实现了平衡。JindoFS 服务不单单是实现了 HCFS 协议的所有接口，而是从底层的 ClientNamenodeProtocol 协议实现了高度兼容。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4djhp5dcsozrfz9x9d&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;ClientNamenoeProtocol 协议是客户端和服务端元数据服务的通信协议，包含文件基础操作、文件 Lease、Snapshot 相关、安全相关以及其它等一些操作。这些接口比抽象公共类HCFS接口更加详细、复杂。对象存储系统对一些高级文件操作，比如flush、append，显得力不从心，而这些接口对 HBase 这类事务型系统是必要的，JindoFS 从设计上原生支持flush、append操作。另外，recoverLease 并没有在HCFS中暴露，但是对上层业务至关重要，像 HBase、Flink 等一些分布式系统，在分区迁移后，需要调用 recoverLease 来关闭老节点未写完的文件，新节点才可以继续写入该文件，从而实现 failover 逻辑。JindoFS 服务完全遵照HDFS底层协议，实现了 Lease 相关以及其它大部分接口。上层业务可以无缝从 HDFS 迁移至 JindoFS 服务，而不用担心兼容新问题。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;l4djhp5dsa0ws8o90p9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;283kxm&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:38432,&amp;quot;width&amp;quot;:358,&amp;quot;height&amp;quot;:182,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/4d0bb667-0602-42e2-a981-c16feba703fb.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;05b7b881-621e-4311-ab5a-5549ba24e4b0&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4dxx3l0o08ph4f9oc&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;上述表格统计了 JindoFS 在客户端 Protocol 上的覆盖率，可以看到对于文件的基础操作，比如open、create以及append、flush等，JindoFS做到了100%的覆盖率。对于文件 Lease、Snapshot 相关接口也做到了100%覆盖。JindoFS 在安全功能上虽然做到了66%的覆盖率，但是特别支持了Ranger、Kerberos，满足了大部分的业务场景。总体上对 HDFS 接口的覆盖率达到了90%。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;uuid&amp;quot;:&amp;quot;l4djhq2y9s7re07goss&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7cdx9n5ro2wb&amp;quot;,&amp;quot;list&amp;quot;:{&amp;quot;listId&amp;quot;:&amp;quot;a6xuu8x0yxf&amp;quot;,&amp;quot;level&amp;quot;:0,&amp;quot;isOrdered&amp;quot;:false,&amp;quot;isTaskList&amp;quot;:false,&amp;quot;listStyleType&amp;quot;:&amp;quot;SCIR_ECIR_SREC&amp;quot;,&amp;quot;symbolStyle&amp;quot;:{&amp;quot;bold&amp;quot;:true},&amp;quot;listStyle&amp;quot;:{&amp;quot;format&amp;quot;:&amp;quot;bullet&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;●&amp;quot;,&amp;quot;align&amp;quot;:&amp;quot;left&amp;quot;},&amp;quot;hideSymbol&amp;quot;:false},&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;二进制协议兼容&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7ajd1c31i2ft&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 服务的协议接口，是二进制兼容 HDFS 的。这主要体现在接口的方法、请求、返回值完全遵照 HDFS 的设计。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4dyd010in2t2foslfg&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的接口在请求、返回值的字段、类型上跟 HDFS 保持基本一致，因此可以实现业务逻辑高度兼容。比如 getFileInfo 接口，HDFS 客户端传递 Request 的参数是字符串 path，JindoFS 同样支持参数path。HDFS 服务端返回的 Response 的内容包含一个 FileStatus 结构体，里面包含fileId、length、path、permission 等几个字段，JindoFS 返回的 Response 结构体包含了 HDFS 的所有字段，以达到完全兼容，避免了业务系统依赖某个字段而找不到的情况。除此之外，JindoFS 额外返回了一些字段，用于支持高级功能。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4dyko2z4vhxuqzdf7w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Jindo SDK 使用 Rest 方式跟服务端通信，如果上层业务使用 Protobuf 封装的 Rpc Request/Response，或者使用 WebHDFS，那么可以将参数原原本本转为 JindoFS 的 Rest 协议的方式，即可快速实现对  JindoFS服务的调用。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7csluy23jg9j&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 实现接口层的二进制兼容，最大的益处是可以兼容开源的 HDFS 客户端直连 JindoFS 服务，实现平滑迁移。根据以往经验，迁移存储系统数据比较容易，而如何做到线上业务系统极短时间停服，甚至不停服是一个大难题。而如果要替换业务系统的客户端 library，必然会造成系统停服重启。而且往往客户的 gateway 集群有多个，涉及到多个团队，很难一次性地替换所有客户端library。JindoFS 的二进制兼容可以做到兼容 HDFS 的客户端，业务系统只需要在适当的时候切换一下连接地址到 JindoFS，无需替换 HDFS 客户端，即可切换到 JindoFS。&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:12,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy786t0bvaew19&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:11,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;HDFS 快照&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7i9egx2ymcxi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 服务实现了对 Snapshot 功能的支持。并且实现了创建 Snapshot、删除 Snapshot、比较 Snapshot Diff 等接口，在接口上跟 HDFS 保持了一致。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7189aflnu94q&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的 Snapshot 实现是基于 Copy on Write 机制，仅当一个 INode 或一个 Block 发生了修改，才会拷贝 INode 元数据或者 Block 数据。因此，在对一个超大目录做 Snapshot 时，可以做到非常轻量和快速。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7ojqiewcowp9&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;Snapshot 功能有许多应用场景：1. 用于对历史数据进行定期备份，以防因为误操作而删除数据，或者用于法务合规、安全审计等用途。2.用于确保数据的原子性。有些作业会持续往一个目录写文件，如果我们要对这个目录做 DistCp，那么可能会拷贝一些不完整的数据。此时使用提前创建 Snapshot 的方式，对 Snapshot 做 DistCp，可以保证在设个视图下的数据的原子性。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0,&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4ec94n03kggr8q1x0r&amp;quot;,&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;pcf3gk&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:271498,&amp;quot;width&amp;quot;:445,&amp;quot;height&amp;quot;:333,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/0c179db1-79e8-4601-bf04-e2414b26b90b.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;fb6eb9a2-22aa-4ad9-80c8-45d9e4347609&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l4ec9kutbsxj88txtlg&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;如图所示，是 JindoFS 的 Snapshot 的实现原理。例如，图中对目录/a创建了一个 Snapshot \&amp;quot;s1\&amp;quot;，目录当前的状态和s1的状态的差集，保存在目录的 Snapshottable Feature 属性当中。JindoFS 的 snapshot 实现参考了 HDFS，是基于论文《Making Data Structures Persistent》实现的一种高效的 Snapshot 机制。它可以针对单个目录做 Snapshot。查询、删除、插入 Snapshot 的 INode 节点只需要 O(logn) 的时间复杂度。创建一个 Snapshot 仅需要 O(1) 的空间复杂度。因此理论上可以创建大量的 Snapshot，而不用担心性能受到影响。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7o5vyjtjnhz8&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h3&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:12,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7oszc1d5zw4e&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:11,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;HDFS 分层存储&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4ed2lyu9u1ubw985zh&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 分层主要解决客户冷热数据存储成本问题。对于大多数用户数据可以简单的分为冷数据和热数据，根据经验，一般客户60%到80%的数据为冷数据。JindoFS 分层存储中冷数据存放主要依赖 OSS 提供存储类型来提供，OSS 可以提供存储类型分为三种类型：标准存储类型，低频访问存储类型，归档存储类型。JindoFS 分层存储支持存储数据在上述各种数据类型之间进行转换，用户可以根据自己业务的数据类型来确定数据的存储类型，为数据的存储提供一种最优的存储方案，从而达到节省存储成本的目的。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4ed776acvqpxbvujn&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;HDFS 支持 setStoragePolicy 来改变数据 Block 在 DataNode 的存储介质是 SSD、HDD或磁带。而在实际场景中，大多数用户的集群只拥有一种介质，要么全部是 SSD，要么全部是 HDD。这种情况下设置文件的 StoragePolicy 为热数据或者归档，不会产生实质性的效果。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7u8iv7e587k&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 的分层存储基于 OSS，并且做了增强。JindoFS 的目录（文件）有 mtime 属性，可以给用户做分层存储决策提供参考。OSS 不支持对一个目录做批量的存储类型转换。JindoFS 允许用户通过命令行工具，将一个标准存储的目录转为低频或归档类型。JindoFS 会自动将这个目录下的所有文件，均转为相应的存储类型。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l8yji7dv9g7c6j55fi&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h2&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9191d0g4741o5oaqfw&amp;quot;,&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:21.333333333333332,&amp;quot;after&amp;quot;:12,&amp;quot;line&amp;quot;:0.8529411764705882}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:16,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;六、POSIX 支持&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9191rtxwzx959hrv&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;传统 HDFS 对 POSIX 的支持相对有限，主要原因是 HDFS 在架构设计上对已经写入的 Block 不支持做修改操作，只能做追加操作。如果想要修改中间某一部分的数据，必须先 truncate 这个 Block 然后重新做追加操作。HDFS 的锁级别为文件锁，属于粗粒度的，而 POSIX 语义支持对文件的部分内容进行加锁，属于细粒度锁。除此之外，HDFS 还不支持 fallocate。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l9272wzpbfolabwis57&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32}},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 对 POSIX 语义的支持做了大幅增强，通过多版本的机制支持了随机写，并且采用了全新设计的 Lease 管理机制。以下表格总结了 JindoFS 和 HDFS 在 POSIX 语义支持上的差异：&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l92753t3kptxt66nuf&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;vikxgi&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:160988,&amp;quot;width&amp;quot;:396,&amp;quot;height&amp;quot;:189,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/bc3acebf-6563-4b16-a2c2-1150d01aef17.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;b0cdca2d-6444-46b4-a3ec-f43e645608cd&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l927bwu35r77bciqpkv&amp;quot;,&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32,&amp;quot;left&amp;quot;:32},&amp;quot;jc&amp;quot;:&amp;quot;left&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;通过支持几乎完整的 POSIX 语义， 我们就可以将 ClickHouse、DataNode 等其它存储系统的数据通过 Fuse 形式存储到 JindoFS 上，从而利用 JindoFS 存算分离的特性，将数据存放到对象存储系统上，获得无限存储、弹性伸缩等红利。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;uuid&amp;quot;:&amp;quot;l927b8oni5d33ycu1vb&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;h1&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;spacing&amp;quot;:{&amp;quot;before&amp;quot;:14.666666666666668,&amp;quot;after&amp;quot;:14.666666666666668,&amp;quot;line&amp;quot;:0.8529411764705882},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy75ha048hlsx7&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;bold&amp;quot;:true,&amp;quot;sz&amp;quot;:20,&amp;quot;szUnit&amp;quot;:&amp;quot;pt&amp;quot;,&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;总结和展望：全新架构的数据湖文件系统JindoFS将成为云时代最好的HDFS&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{},&amp;quot;uuid&amp;quot;:&amp;quot;l4ecozbmgu2rwuzu006&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;left&amp;quot;:0},&amp;quot;uuid&amp;quot;:&amp;quot;l4ecozbmpky7l6u1oa&amp;quot;,&amp;quot;jc&amp;quot;:&amp;quot;center&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]],[&amp;quot;img&amp;quot;,{&amp;quot;id&amp;quot;:&amp;quot;tiwumm&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;image.png&amp;quot;,&amp;quot;size&amp;quot;:253230,&amp;quot;width&amp;quot;:399,&amp;quot;height&amp;quot;:295,&amp;quot;src&amp;quot;:&amp;quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/5yBRq1gyJW5Pldv1/img/ca291bdf-8c46-478e-80dc-308ff3203772.png&amp;quot;,&amp;quot;extraData&amp;quot;:{&amp;quot;resourceId&amp;quot;:&amp;quot;3975e8c6-7be7-4574-94b6-4815044f97b7&amp;quot;},&amp;quot;rotation&amp;quot;:0},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7xlzp257qkpc&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 经过多年的多年的淬炼，吸取总结了丰富经验，从而正式推出了全新架构的 JindoFS 4.x版本，实现了 HDFS 高度兼容。它适用于大数据分析、机器学习训练、实时计算、OLTP 系统等等，涵盖了许多甚至传统数据湖存储覆盖不到的场景。它的出现解决了数据孤岛，简化了业务的架构，同时保证了高效的性能，实现了让数据发挥出更大的商业价值，为企业实现降本增效的效果。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l927jkvs51sufmpkj1w&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 近期还将推出从 HDFS 等存储到 JindoFS 的平滑迁移服务，做到存储系统不停服，业务系统滚动升级，作业无感知的效果，大幅缩减用户过渡到 JindoFS 的使用成本。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4chouy7juzgkfntng&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 也在持续不断优化核心技术竞争力，包括与 JindoData 加速系统相结合，进一步优化底层能，将高性能、高可用、降成本做到极致。我们后续将继续更多文章，讲解 JindoFS 服务底层技术原理。&amp;quot;]]],[&amp;quot;p&amp;quot;,{&amp;quot;ind&amp;quot;:{&amp;quot;firstLine&amp;quot;:32},&amp;quot;uuid&amp;quot;:&amp;quot;l4m7e333l801jikwon&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;JindoFS 提供文件系统能力，加上 OSS 提供海量存储能力，JindoFS 与 OSS 相辅相成，深度融合，正式推出了&amp;quot;]],[&amp;quot;a&amp;quot;,{&amp;quot;href&amp;quot;:&amp;quot;https://help.aliyun.com/document_detail/405089.htm&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;OSS-HDFS全托管服务&amp;quot;]]],[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;text&amp;quot;},[&amp;quot;span&amp;quot;,{&amp;quot;data-type&amp;quot;:&amp;quot;leaf&amp;quot;},&amp;quot;，只需在创建 OSS Bucket 时勾选“HDFS服务”即可，无需手动部署，方便使用。&amp;quot;]]]]&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247510453&amp;amp;idx=1&amp;amp;sn=adf30a5af65e082872b5dead0dbbae13&amp;amp;chksm=e92a94bade5d1dac881c63f8102fe67ee16348d8d5543da1271b96eeef8e826c3ba0d4b7ad75&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深入理解virtual关键字&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;深入理解virtual关键字&lt;/a&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247510426&amp;amp;idx=1&amp;amp;sn=2d91ba4e5e523785a857242d988fcb8a&amp;amp;chksm=e92a9495de5d1d83b638866dd4218ad4572a4f459a57e98ed70cc6f323db4b1571548666f103&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《领域驱动设计》：从领域视角深入仓储（Repository）的设计和实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;《领域驱动设计》：从领域视角深入仓储（Repository）的设计和实现&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/article&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>