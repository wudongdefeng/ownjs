<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ecff5c9f11cc83a2d73bf89de6c8b4e9</guid>
<title>优质网站同好者周刊（第 108 期） | 倾城博客</title>
<link>https://toutiao.io/k/2ua3wsf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%AF%BC%E8%88%AA&quot;&gt;&lt;code&gt;导航&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/ChatGPT&quot;&gt;&lt;code&gt;ChatGPT&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：ai导航, ai产品, ai写作, chatgpt, 人工智能&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AI 导航是一个集成最新最前沿AI产品的导航网站，提供丰富、多样化的AI产品信息和服务，为用户带来更便捷、高效、科技感的生活体验。为用户提供最新、最全面的AI产品信息，让用户快速、便捷地了解和使用各种AI产品。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.ainavpro.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Ai 导航 | 最新最前沿的 AI 产品&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.ainavpro.com/&quot;&gt;AI 导航&lt;/a&gt; 是一个集成最新最前沿 &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; 产品的 &lt;a href=&quot;https://nicelinks.site/tags/%E5%AF%BC%E8%88%AA&quot;&gt;导航&lt;/a&gt; 网站，提供丰富、多样化的 AI 产品信息和服务，为用户带来更便捷、高效、科技感的生活体验。为用户提供最新、最全面的 AI 产品信息，让用户快速、便捷地了解和使用各种 AI 产品。如果您想通过 AI 产品提升效率，抑或是基于 AI（ChatGPT）技术研发工具产品，可以前往 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.ainavpro.com/&quot;&gt;AI 导航&lt;/a&gt; 以获取更多见闻和灵感。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6409c4d62e215167d398529c&quot;&gt;倾城之链 - Ai 导航 | 最新最前沿的 AI 产品&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%9C%E7%A8%8B&quot;&gt;&lt;code&gt;远程&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E4%BD%9C&quot;&gt;&lt;code&gt;工作&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B9%B3%E5%8F%B0&quot;&gt;&lt;code&gt;平台&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：technology, engineers, hire, teams, software, development, Pakistan, US, Remotebase, freelancers, startups, USA&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Remotebase | Hire silicon valley caliber developers remotely | Remote software engineers jobs&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.remotebase.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Remotebase | Hire remote developers from Top 1% in 24 hours | 2 week free-trial&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.remotebase.com/&quot;&gt;Remotebase&lt;/a&gt; 是一个帮助 &lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%9C%E7%A8%8B&quot;&gt;远程&lt;/a&gt; 工作者和远程团队寻找适合自己的工作和公司的平台。Remotebase 聚焦于远程工作文化，并提供了大量有关远程工作的文章、视频和工具，以帮助远程工作者和远程团队更好地管理自己的工作和生活。通过 3 个简单步骤雇用您理想的工程团队：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;告诉我们您的要求&lt;/strong&gt;：在 Remotebase 的网站上填写表格，告诉他们您想何时聘请远程开发人员、您需要什么样的开发人员技能、您需要多少团队成员以及有关您公司的一些详细信息。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;安排通话&lt;/strong&gt;：在合适的时间与他们通话，讨论您的需求以及您希望与您的技术团队实现的目标。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;24 小时内获取相关开发人员&lt;/strong&gt;：Remotebase 将根据您的要求为您匹配最相关的开发人员，并在 24 小时内组建您的工程团队。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Remotebase 的主要功能是提供一系列远程工作职位列表，涵盖了软件开发、设计、销售、客户服务等多个领域。网站上的每个职位都提供了详细的描述和要求，以便远程工作者更好地了解职位需求和公司文化。此外，Remotebase 还提供了一个可以根据技能和地理位置筛选职位的高级搜索工具，以帮助用户更快地找到符合自己需求的职位。&lt;/p&gt;&lt;p&gt;Remotebase 也提供了一些特色的功能，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可以查看公司的远程工作政策和文化，了解其远程工作的要求和支持；&lt;/li&gt;&lt;li&gt;可以查看当前公司的远程工作人数，以及他们的工作地点和时区，以帮助用户更好地了解团队分布情况；&lt;/li&gt;&lt;li&gt;可以查看公司的历史招聘记录，以了解公司对远程工作者的态度和经验。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总的来说， &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.remotebase.com/&quot;&gt;Remotebase&lt;/a&gt; 是一个很好的远程工作招聘平台，为远程工作者和远程团队提供了更好的机会和工具，以实现更好的远程工作生活。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6409ba782e215167d398510e&quot;&gt;倾城之链 - Remotebase | Hire remote developers from Top 1% in 24 hours | 2 week free-trial&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Vue&quot;&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BB%84%E4%BB%B6%E5%BA%93&quot;&gt;&lt;code&gt;组件库&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/TypeScript&quot;&gt;&lt;code&gt;TypeScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A Vue 3 Component Library. Fairly Complete. Theme Customizable. Uses TypeScript. Fast.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.naiveui.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Naive UI | A Vue 3 Component Library&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.naiveui.com/&quot;&gt;Naive UI&lt;/a&gt; ，一个 Vue 3 组件库；它比较完整，主题可调，用 TypeScript 写的，快。更详细介绍，它所具有的功能特征为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;比较完整&lt;/strong&gt;：有超过 80 个组件，希望能帮你少写点代码；全都可以 treeshaking。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;主题可调&lt;/strong&gt;：提供了一个使用 TypeScript 构建的先进的类型安全主题系统。你只需要提供一个样式覆盖的对象，剩下的都交给 Naive UI。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;使用 TypeScript&lt;/strong&gt;：Naive UI 全量使用 TypeScript 编写，和你的 TypeScript 项目无缝衔接。顺便一提，你不需要导入任何 CSS 就能让组件正常工作。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;快&lt;/strong&gt;：作者尽力让它不要太慢。至少 select、tree、transfer、table、cascader 都可以用虚拟列表。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除上述功能特征之外，它支持启用 JSX &amp;amp; TSX、支持服务端渲染（SSR）、内部基于 CSS in JS 方案..... 该项目在 &lt;a href=&quot;https://github.com/tusen-ai/naive-ui&quot;&gt;Github 开源&lt;/a&gt;，截止目前（2023 年 03 月 08 日）收获 11.9K Star，感兴趣的朋友可移步以了解更多。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/64087a70db7c992ea465003d&quot;&gt;倾城之链 - Naive UI | A Vue 3 Component Library&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%95%88%E7%8E%87&quot;&gt;&lt;code&gt;效率&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E4%BB%A3%E7%A0%81&quot;&gt;&lt;code&gt;代码&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Snippet Explorer is a tool to easily browse and import Snippets directly to Raycast.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/snippets.ray.so.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Snippet Explorer by Raycast&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://snippets.ray.so/&quot;&gt;Snippet Explorer&lt;/a&gt; 一种轻松浏览代码片段（Snippets）并将其直接导入 &lt;a href=&quot;https://nicelinks.site/post/6378d324049fa51046c4ac75&quot;&gt;Raycast&lt;/a&gt; 的工具（基于 &lt;a href=&quot;https://nicelinks.site/post/61c928af5be6454b4e3d5146&quot;&gt;Next.js&lt;/a&gt; 所构建）。其中类别包括 Symbols、Arrows、Unicode、Date、Miscellaneous、Currency、Spelling、Coding、Feedback、GitHub 等内容。&lt;/p&gt;&lt;p&gt;如果您的机器安装了 Raycast 应用程序，通过点击 Snippets 来选择它们。要选择多个，请按住⌘或用鼠标选择它们，然后点击 &quot;添加到 Raycast&quot;按钮。你也可以将 Snippets 下载为 JSON 文件，或复制 URL 与他人分享。添加到 Raycast 之后，即可快速使用这些片段。如果您导入了 &lt;code&gt;Command&lt;/code&gt;，只需输入 &lt;code&gt;!cmd&lt;/code&gt;，即可得到该图标：&lt;code&gt;⌘&lt;/code&gt;；同样，如果您导入了 &lt;code&gt;Apple&lt;/code&gt;，只需输入 &lt;code&gt;!apple&lt;/code&gt;，即可得到：&lt;code&gt;&lt;/code&gt;；如果您是开发人员，导入 &lt;code&gt;Console Log&lt;/code&gt;，只需输入：&lt;code&gt;!log&lt;/code&gt;，即可得 &lt;code&gt;console.log()&lt;/code&gt;（鼠标在括弧中间）；在可以输入文本的环境，都有效，可以提升效率。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/64087343db7c992ea464fea6&quot;&gt;倾城之链 - Snippet Explorer by Raycast&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;&lt;code&gt;AI&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%81%B5%E6%84%9F&quot;&gt;&lt;code&gt;灵感&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;机器学习&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Generate your dream room in seconds.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.roomgpt.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - RoomGPT ｜ Generating dream rooms using AI for everyone.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.roomgpt.io/&quot;&gt;RoomGPT&lt;/a&gt; ， 基于 &lt;a href=&quot;https://nicelinks.site/post/5fd20cb4c06d6302c1907ec7&quot;&gt;Tailwind CSS&lt;/a&gt; 构建、部署在 &lt;a href=&quot;https://nicelinks.site/post/63dba9f93b0bd5224de21d36&quot;&gt;Vercel&lt;/a&gt; 的网站，它提供 &lt;a href=&quot;https://nicelinks.site/tags/AI&quot;&gt;AI&lt;/a&gt; 服务，为每个人打造梦幻房间。只需选择想要的房间主题（现代、极简、优质）和房型（客厅、卧室、浴室、办公室、游戏室），上传照片，等待片刻，就能生成梦幻房间图片。它 100% 免费。&lt;/p&gt;&lt;p&gt;值得一提的是，该项目在 &lt;a href=&quot;https://github.com/Nutlope/roomGPT&quot;&gt;Github 开源&lt;/a&gt; ，如果您感兴趣，可以移步从而了解更多。 RoomGPT 使用被称为 &lt;a href=&quot;https://github.com/lllyasviel/ControlNet&quot;&gt;ControlNet&lt;/a&gt; 的 ML（机器学习）模型来生成房间的变体。此应用程序使您能够上传任何房间的照片，这将使用 Next.js API 路由通过此 ML 模型发送照片，并返回您生成的房间。ML 模型托管在 &lt;a href=&quot;https://replicate.com/&quot;&gt;Replicate&lt;/a&gt; 上， &lt;a href=&quot;https://nicelinks.site/redirect?url=https://upload.io/&quot;&gt;Upload&lt;/a&gt; 用于图像存储。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6403059cdb7c992ea464e0c0&quot;&gt;倾城之链 - RoomGPT ｜ Generating dream rooms using AI for everyone.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/mockups&quot;&gt;&lt;code&gt;mockups&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;&lt;code&gt;图片编辑器&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Create Amazing Mockups&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/shots.so.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Shots - Create Amazing Mockups&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://shots.so/&quot;&gt;Shots&lt;/a&gt;，很精致的一款 Mockups 工具（Create Amazing Mockups），可以用来创建令人惊叹的设备模型，可以做出非常漂亮的图片效果；它支持多类模型，如 iPhone、Mac、iMac、iPad Pro、iPad、iWatch、Sample Desktop、Pro Display XDR、Browser、MacBook Air、截图类等场景，而且支持各种各种，如图片弧度、3D、偏移量、背景、主题、比例等等。此外，Shots 支持在线拷贝图片，也提供直接下载；更棒的是它使用非常简单，上传照片即可开始，且完全免费；简直是不能更棒（Amazing Production）。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6402e783db7c992ea464dd62&quot;&gt;倾城之链 - Shots - Create Amazing Mockups&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;世有伯乐，然后有千里马。千里马常有，而伯乐不常有&lt;/strong&gt;。故虽有名马，祗辱于奴隶人之手，骈死于槽枥之间，不以千里称也。── 唐 · 韩愈《马说》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>890770bce0749e5e3b51cf702380b20d</guid>
<title>TiDB 在 OMS 供应链系统订单业务域的应用</title>
<link>https://toutiao.io/k/gwcbbce</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h4&gt;作者：京东零售 张宾&lt;/h4&gt;

&lt;h3&gt;一、OMS供应链系统系统简介&lt;/h3&gt;

&lt;p&gt;抖快电商业务与京东电商供应链能力之间的连接器，用于承载抖、快京东官方店铺业务。&lt;/p&gt;

&lt;h3&gt;二、面临业务挑战&lt;/h3&gt;

&lt;p&gt;项目初期为了快速适配业务开发，数据都存储在MySQL中，使用京东数据库中间件团队提供JED弹性库按照店铺维度的做的数据库分片。随着业务快速发展，存储数据越来越多，我们在MySQL面临这如下痛点：&lt;/p&gt;

&lt;h4&gt;1.数据库单分片热点&lt;/h4&gt;

&lt;p&gt;随着达人直播场次和拉新活动的增加，出现部分店铺订单量爆涨，由于当前数据库分片策略是按照店铺维度进行分片，存在数据倾斜，系统吞吐量预估到2000 QPS即达到性能瓶颈。按当前的订单量增长速度，半年内部分店铺的订单量可能超千万级，单表数据量过大。&lt;/p&gt;

&lt;h4&gt;2.大表结构修改困难&lt;/h4&gt;

&lt;p&gt;业务模式变化快，为了快速响应业务需求，表结构经常调整。在对一些数据在百万级别以上的大表做 DDL 的时候，修改的时间较长，对存储空间、IO、业务有一定的影响。&lt;/p&gt;

&lt;h4&gt;3.运营端订单列表查询经常超时&lt;/h4&gt;

&lt;p&gt;随着订单量增长，部分店铺的订单量超过千万之后，运营端订单列表查询会超时，运营端运营人员经常使用查询近7天、近30天的订单列表数据超时现象增多，运营端查询体验变差，同时订单列表功能导出也耗时严重。&lt;/p&gt;

&lt;h4&gt;4.抖快历史订单查询问题&lt;/h4&gt;

&lt;p&gt;抖音、快手订单明细数据超过6个后，历史订单不再支持查询，需要将抖音、快手订单明细数据落地存储。&lt;/p&gt;

&lt;h4&gt;5.系统吞吐量优化&lt;/h4&gt;

&lt;p&gt;要提升系统吞吐量，需要调整数据库分片策略，要调整分片策略，首先要先解决运营端列表业务人员查询问题，所以必须首先且迫切的选择一种存储中间解决来解决列表查询问题。&lt;/p&gt;

&lt;h3&gt;三、为什么选择TiDB&lt;/h3&gt;

&lt;p&gt;面对以上痛点，我们开始考虑对订单数据存储的架构进行升级改造，我们根据业务方的诉求和未来数据量的增长，将一些常见数据存储技术方案做来一些对比：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-58d6a18e911f53e7ae0d710dcca3ef4df00.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;TiDB 具有水平弹性扩展，高度兼容 MySQL，在线 DDL，一致性的分布式事务等特性，符合当前系统数据量大，业务变更频繁，数据保存周期长等场景。结合团队成员知识储备和在不影响业务需求迭代情况下，以较少人工成本完成数据异构和数据库分片键的切换，通过调研发现公司数据库团队提供已TiDB中间件能力和支持，我们经过对 TiDB 的内部测试后，确认可以满足现有业务需求。我们最终选择了 TiDB 做为这类需求的数据存储，并通过数据同步中件件DRC平台完成MySQL异构到TiDB。&lt;/p&gt;

&lt;h3&gt;四、技术实施方案&lt;/h3&gt;

&lt;h4&gt;1.系统架构&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-6b21114bd3e118170a7227a89ceefdb0c9a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2. 系统中多数据源支持&lt;/h4&gt;

&lt;p&gt;除了引入一些分库分表组件，Spring自身提供了AbstractRoutingDataSource的方式，让多数数据源的管理成为可能。同时分库分表组件使用上限制很多，使用之前需要了解去学习使用方法和忍受中间件对SQL的苛刻要求，对比中间件以及当前项目使用的Spring技术栈，反而使用Spring自身提供了AbstractRoutingDataSource的方式能够让代码的改动量尽量的减少。&lt;/p&gt;

&lt;p&gt;Spring提供的多数据源能进行动态切换的核心就是spring底层提供了AbstractRoutingDataSource类进行数据源路由。AbstractRoutingDataSource实现了DataSource接口，所以我们可以将其直接注入到DataSource的属性上。&lt;/p&gt;

&lt;p&gt;我们主要继承这个类，实现里面的方法determineCurrentLookupKey()，而此方法只需要返回一个数据库的名称即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MultiDataSource extends AbstractRoutingDataSource {
    @Getter
    private final DataSourceHolder dataSourceHolder;


    public MultiDataSource(DataSource defaultTargetDataSource, Map&amp;lt;Object, Object&amp;gt; targetDataSources) {
        //设置默认数据源，在未指定数据源情况下，则使用默认的数据源访问
        super.setDefaultTargetDataSource(defaultTargetDataSource);
        //多数据源配置
        super.setTargetDataSources(targetDataSources);
        this.dataSourceHolder = new DataSourceHolder();
    }


    @Override
    protected Object determineCurrentLookupKey() {
        //获取数据源上下文对象持有的数据源
        String dataSource = this.dataSourceHolder.getDataSource();
        //如果为空，则使用默认数据源resolvedDefaultDataSource
        if (StringUtils.isBlank(dataSource)) {
            return null;
        }
        return dataSource;
    }




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据源上下文切换存储，使用ThreadLocal绑定这个透传的属性，像Spring的嵌套事务等实现的原理，也是基于ThreadLocal去运行的。所以，DataSourceHolder.本质上是一个操作ThreadLocal的类。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DataSourceHolder {
    /**
     * 保存数据源类型线程安全容器
     */
    private final ThreadLocal&amp;lt;String&amp;gt; CONTEXT_HOLDER = new ThreadLocal&amp;lt;&amp;gt;();


    /**
     * 设置数据源类型
     *
     * @param dataSource 数据源
     */
    public void putDataSource(String dataSource) {
        CONTEXT_HOLDER.set(dataSource);
    }


    /**
     * 获取数据源类型
     *
     * @return
     */
    public String getDataSource() {
        return CONTEXT_HOLDER.get();
    }


    /**
     * 清空数据源类型
     */
    public void clear() {
        CONTEXT_HOLDER.remove();



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义数据源配置自定义注解：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Documented
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface DataSourceAnnotation {
    /**
     * 数据源名称
     *
     * @return
     */
    String value();
}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多数据源选择AOP切面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Slf4j
@Aspect
public  class MultiDataSourceAspect {
    /**
    * 多数据源
    */
    @Setter
    private MultiDataSource multiDataSource;
    /**
     * 定义切入点
     */
    @Pointcut(&quot;execution(* com.jd.mkt.oms.mapper.order.*.*(..))&quot;)
    public void aspect() {
    }
    /**
     * 方法执行前-选择数据具体的数据源并放入到数据源上下文中
     */
    @Before(&quot;aspect()&quot;)
    public void beforeExecute(JoinPoint joinPoint) {
        if (!(joinPoint.getSignature() instanceof MethodSignature)) {
            return;
        }
        MethodSignature methodSignature = ((MethodSignature) joinPoint.getSignature());
        Method method = methodSignature.getMethod();
        //选择具体的数据源
        selectDataSource(method, joinPoint);

    }

    /**
     * 方法执行后-清空数据源上下文
     */
    public void afterExecute(JoinPoint joinPoint) {
        getDataSourceHolder().clear();
    }


    /**
     * 选择具体的数据源
     */
    private void selectDataSource(Method method, JoinPoint joinPoint, String aspectType) {
        //1.获取被aop拦截方法的数据源自定义注解，若有，则使用方法上标注的数据源
        DataSourceAnnotation dataSourceAnno = method.getAnnotation(DataSourceAnnotation.class);
        String dataSourceStr = &quot;&quot;;
        if (dataSourceAnno != null) {
            dataSourceStr = dataSourceAnno.value();
            getDataSourceHolder().putDataSource(dataSourceStr);
            return;
        }
        //2.获取被aop拦截方法所在类上的数据源自定义注解，若有，则使用类上标注的数据源
        Class&amp;lt;?&amp;gt; declaringClass = method.getDeclaringClass();
        dataSourceAnno = declaringClass.getAnnotation(DataSourceAnnotation.class);
        if (dataSourceAnno != null) {
            dataSourceStr = dataSourceAnno.value();
            log.debug(&quot;{}--final method.getDeclaringClass()={}&quot;, aspectType, dataSourceStr);
            getDataSourceHolder().putDataSource(dataSourceStr);
            return;
        }
        //3.获取被aop拦截方法被代理的目标类上的数据源自定义注解，若有，则使用目标类上标注的数据源
        Class&amp;lt;?&amp;gt; targetClass = AopUtils.getTargetClass(joinPoint.getTarget());
        dataSourceAnno = targetClass.getAnnotation(DataSourceAnnotation.class);
        if (dataSourceAnno != null) {
            dataSourceStr = dataSourceAnno.value();
            log.debug(&quot;{}--final AopUtils.getTargetClass={}&quot;, aspectType, dataSourceStr);
            getDataSourceHolder().putDataSource(dataSourceStr);
            return;
        }
        //4.获取被aop拦截方法被代理的泛型上的数据源自定义注解，若有，则使用泛型类上标注的数据源，支持tk.mybatis等泛型接口上声明的数据源配置
        Type[] genericInterfaces = targetClass.getGenericInterfaces();
        if (genericInterfaces.length &amp;gt; 0) {
            if (genericInterfaces[0] instanceof Class) {
                Class genericInterface = (Class) genericInterfaces[0];
                log.debug(&quot;genericInterface:{}&quot;, genericInterface.getName());
                Annotation annotation = genericInterface.getAnnotation(DataSourceAnnotation.class);
                if (annotation instanceof DataSourceAnnotation) {
                    dataSourceAnno = (DataSourceAnnotation) annotation;
                    dataSourceStr = dataSourceAnno.value();
                    log.debug(&quot;final genericInterface={}&quot;, dataSourceStr);
                    getDataSourceHolder().putDataSource(dataSourceStr);
                }
            }
        }
        log.debug(&quot;final selectDataSource {}&quot;, dataSourceStr);
    }


    private DataSourceHolder getDataSourceHolder() {
        return multiDataSource.getDataSourceHolder();
    }




&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3. 具体数据访问方法数据源配置&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;3.1项目中多数据源配置&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;


    &amp;lt;bean id=&quot;mySqlDataSource&quot; parent=&quot;abstractDataSource&quot;&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${mysql.url}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${mysql.username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${mysql.password}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
     &amp;lt;bean id=&quot;tiDbDataSource&quot; parent=&quot;abstractDataSource&quot;&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${tidb.url}&quot;/&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${tidb.username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${tidb.password}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;bean id=&quot;orderMultiDataSource&quot; class=&quot;MultiDataSource&quot; lazy-init=&quot;false&quot;&amp;gt;
        &amp;lt;constructor-arg index=&quot;0&quot; ref=&quot;mySqlDataSource&quot;/&amp;gt;
        &amp;lt;constructor-arg index=&quot;1&quot;&amp;gt;
            &amp;lt;map&amp;gt;
                &amp;lt;entry key=&quot;MySQL&quot; value-ref=&quot;mySqlDataSource&quot;/&amp;gt;
                &amp;lt;entry key=&quot;TiDB&quot; value-ref=&quot;tiDbDataSource&quot;/&amp;gt;
            &amp;lt;/map&amp;gt;
        &amp;lt;/constructor-arg&amp;gt;
    &amp;lt;/bean&amp;gt;


    &amp;lt;bean id=&quot;orderMultiDataSourceAspect&quot; class=&quot;MultiDataSourceAspect&quot;&amp;gt;
        &amp;lt;property name=&quot;multiDataSource&quot; ref=&quot;orderMultiDataSource&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;


    &amp;lt;bean id=&quot;orderTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;orderMultiDataSource&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;


    &amp;lt;!--基于注解进行事物管理--&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;orderTransactionManager&quot;/&amp;gt;


    &amp;lt;bean id=&quot;orderSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;orderMultiDataSource&quot;/&amp;gt;
        &amp;lt;property name=&quot;typeAliasesSuperType&quot; value=&quot;com.jd.mkt.oms.infrastructure.po.base.PO&quot;/&amp;gt;
        &amp;lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:sqlmap/order/*.xml&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;


    &amp;lt;bean class=&quot;tk.mybatis.spring.mapper.MapperScannerConfigurer&quot;&amp;gt;
        &amp;lt;property name=&quot;markerInterface&quot; value=&quot;com.jd.mkt.oms.infrastructure.mapper.base.ISqlMapper&quot;/&amp;gt;
        &amp;lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;orderSessionFactory&quot;/&amp;gt;
        &amp;lt;property name=&quot;basePackage&quot; value=&quot;com.jd.mkt.oms.infrastructure.mapper.order&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/b


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.2 数据访问层Dao类或方法上增加数据源配置注解&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;dao层接口方法增加数据源选择注解&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; /**
     * 根据店铺、平台、订单号查询订单列表
     *
     * @param extShopId    店铺id
     * @param platform     平台
     * @param orderIds     订单号列表
     * @return
     */
    @DataSourceAnnotation(&quot;TiDB&quot;)
    List&amp;lt;CtpOrderSkuPO&amp;gt; selectOrderList(@Param(&quot;extShopId&quot;) String extShopId, @Param(&quot;platform&quot;) int platform, @Param(&quot;orderIds&quot;) List&amp;lt;String&amp;gt; orderIds);


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dao层接口增加数据源选择注解&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@DataSourceAnnotation(&quot;TiDB&quot;)
@Repository
public interface OmsOrderLogMapper {


    /**
     * 查询订单操作日志列表数据
     *
     * @param platform
     * @param orderId
     * @return
     */
    List&amp;lt;OmsOrderLogPO&amp;gt; selectOmsOrderLogs(@Param(&quot;platform&quot;) int platform, @Param(&quot;orderId&quot;) String orderId);

}


&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;4.TiDB数据库索引KV映射原理&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;4.1 SCHEMA的KV映射原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;•聚簇表KV的映射规则&lt;/p&gt;

&lt;p&gt;假设 Column_1 为 Cluster Index&lt;/p&gt;

&lt;p&gt;Key: tablePrefix{ TableID }_recordPrefixSep{ Col1 }&lt;/p&gt;

&lt;p&gt;Value: [col2,col3,col4]&lt;/p&gt;

&lt;p&gt;•非聚簇表KV的映射规则&lt;/p&gt;

&lt;p&gt;Key: tablePrefix{ TableID }_recordPrefixSep{ _TiDb_RowID }&lt;/p&gt;

&lt;p&gt;Value: [col1,col2,col3,col4]&lt;/p&gt;

&lt;p&gt;KV 存储中Value存储真实的行数据&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.2 唯一索引 &amp;amp; 非聚簇表的主键&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Key: tablePrefix{ TableID }_indexPrefixSep{ IndexID }_indexedColumnsValue&lt;/p&gt;

&lt;p&gt;Value: RowID&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.3 二级索引&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Key: tablePrefix{ TableID }_indexPrefixSep{ IndexID }_indexedColumnsValue_{ RowID }&lt;/p&gt;

&lt;p&gt;Value: null&lt;/p&gt;

&lt;h4&gt;5.MySQL和TiDB索引创建和调整&lt;/h4&gt;

&lt;p&gt;基于TiDB索引和MySQL索引映射原理，根据业务处理特性，业务流程处理中需要根据订单号查询业务数据，运营端列表查询和数据导出根据店铺、订单号、时间等多条件组合完成业务数据查询，我们分别在MySQL中创建订单号索引，在TiDB创建基于店铺+时间d额二级索引和基于订单号的唯一索引。&lt;/p&gt;

&lt;h4&gt;6.数据库表路由分片键切换&lt;/h4&gt;

&lt;p&gt;由于我们项目采用DDD领域驱动设计思想搭建的项目代码结构，所以我们只需要在基层设施层完成分片键的路由键的适配切换即可，并借助DRC平台完成MySQL数据库数据迁移，切换后避免了数据热点倾斜和提升系统处理性能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-09-19-14-02SPaFSxxVvGcLYO6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;五、上线后效果&lt;/h3&gt;

&lt;p&gt;1.系统处理性能，根据压测数据，数据库单分片处理QPS约400左右。&lt;/p&gt;

&lt;p&gt;2.避免数据倾斜，按订单号分库后，可保证单表数据量在500万以下，数据量在合理区间。&lt;/p&gt;

&lt;p&gt;3.运营端列表查询和数据导出运营体验，千万级订单数据量查询性能提升了5倍。&lt;/p&gt;

&lt;h3&gt;六、未来规划&lt;/h3&gt;

&lt;p&gt;1.对帐数据由原来使用JED直接替换成TiDB&lt;/p&gt;

&lt;p&gt;2.抖快历史订单详情数据直接写入TiDB&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb35ac2de2d30f7db6312ade24d9ea69</guid>
<title>2022年中国开源创新大赛初赛结果发布 76个项目晋级决赛</title>
<link>https://toutiao.io/k/zt2bbs1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content               autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由中央网信办信息化发展局指导，中国互联网发展基金会、中国网络空间研究院、中国互联网投资基金联合主办，北京长风信息技术产业联盟承办的2022年中国开源创新大赛日前结束初赛评选阶段。初赛阶段评审专家组在众多参赛项目/社区中最终遴选出76个优秀开源项目/社区晋级决赛。&lt;/p&gt;&lt;p&gt;参与初赛阶段评审的专家对参赛项目和社区整体实力表示认可。初赛评审专家、开源社理事庄表伟认为，本次大赛参与项目众多，各具特色，整体上反映出中国开源创新的水平。初赛评审专家、开放基础设施基金会独立董事王庆认为，本次大赛规模空前，参赛作品数量众多且质量优秀，仅云计算和云原生赛道就有超过36个参赛作品，很多都是开源界享誉盛名的中国本土优秀开源创新项目，竞争十分激烈。初赛评审专家、北京大学软件与微电子学院副教授荆琦指出，本次大赛项目百花齐放，包括大型企业开源团队贡献的项目、科研院所开源团队贡献的项目、小团队或者个人的成名项目和一些初创项目。初赛评审专家、亚马逊云科技开发者生态总监郭悦表示，本次大赛参赛项目实力强劲，有基金会孵化的顶级毕业项目，有来自高校的明星项目，还有全球头部企业发起的热门项目。&lt;/p&gt;&lt;p&gt;作为首届面向全国的开源创新大赛，赛事组织形式和组织能力同样受到普遍关注。评审专家们认为，大赛在很短的时间内征集到了海量高水平的项目参赛，非常难得；赛制设置有亮点、有创新，开放赛道和社区赛道给很多推进开源发展的组织提供了展示机会；评分规则根据专家意见制定，初赛采用“盲审盲评”，有专家的现场讨论，有评分后的反馈跟踪，公平公正。&lt;/p&gt;&lt;p&gt;2022年中国开源创新大赛决赛将于2023年4月中旬在北京举行。决赛评审指标体系将增加代码扫描方法和定期增量成绩维度，进一步量化、细化指标体系，为决赛阶段的专家评审提供更多的客观依据。本次公布的所有晋级决赛的参赛项目/社区将荣获2022中国优秀开源项目/社区奖，更多信息请关注赛事官网。&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bs.bjos.club&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bjos.csdn.net&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;http://bjos.oschina.net&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pages.segmentfault.com/kyds&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;附件&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;022&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;年&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;中国开源创新大赛优秀开源项目&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;社区获奖名单&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（晋级决赛名单）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编号&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;优秀开源项目/社区获奖名单&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（晋级决赛名单）&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;1&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;AI元宇宙虚拟数字人&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;2&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache DolphinScheduler&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;3&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Doris&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;4&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache IoTDB&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;5&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Kylin&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;6&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Kyuubi&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;7&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache Linkis&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;8&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Apache StreamPark&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;9&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;Apollo&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;10&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Byzer-lang&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;11&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;ChunJun&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;12&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;CloudWeGo&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;13&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;CodePecker软件成分分析系统 V3.0——“析微”&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;14&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;CodePecker源代码缺陷分析系统（SAST）——“补阙” V7.0&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;15&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;CubeFS云原生存储&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;16&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Curve&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;17&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Dromara&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;18&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Eulaceura&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;19&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Excelize&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;20&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;FeatureProbe&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;21&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;FISCO BCOS 国产开源联盟链生态圈&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;22&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Fluid&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;23&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;genmai&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;24&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;GitCode开源平台                            &lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;25&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;HummerRisk 云原生安全平台&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;26&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Hypercrx&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;27&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Hyperf&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;28&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;IOTSharp&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;29&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;jeewms&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;30&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Karmada&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;31&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;KubeEdge&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;32&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;LinkWeChat&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;33&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Nacos&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;34&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OneOS物联网操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;35&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenCloudOS&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;36&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenCV&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;37&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenDigger&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;38&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;openEuler 发行版（on riscv）&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;39&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;OpenFunction 函数计算平台&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;40&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openGauss&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;41&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openkylin&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;42&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;openKylin RISC-V开源版本&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;43&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;PikaPython&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;44&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;RustDesk 远程桌面&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;45&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;rvcc&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;46&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;SBOM服务&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;47&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Scheme-langserver&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;48&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;ShardingSphere&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;49&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Slime&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;50&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;StoneDB&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;51&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Swow&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;52&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;TDengine 时序数据库&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;53&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;TuGraph图数据库&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;54&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;UKUI桌面环境&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;55&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Volcano&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;56&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;Wechaty&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;57&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;凹语言&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;58&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;稻香AI&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;59&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;迪力匡正软件供应链风险分析工具&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;60&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;定时调度器&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;61&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;基于OpenAPI的业务感知APP日志分析工具&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;62&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;基于开源鸿蒙打造的行业全场景操作系统——在鸿OS&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;63&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;建木&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;64&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;金融业生僻字处理&lt;/span&gt; &lt;span&gt;开源项目&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;65&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;开源问答&lt;/span&gt; &lt;span&gt;Answer&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;66&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;开源指南针&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;67&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;可信3.0开源基础软件&lt;/span&gt;&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;68&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;龙蜥操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;69&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;龙蜥社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;70&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;深度社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;71&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;深度桌面操作系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;72&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;事件网格Apache Event&lt;/span&gt; Mesh&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;73&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;思否开发者社区&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;74&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;腾源会&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;75&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;序列大数据的智能计算&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;76&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;center&quot; nowrap=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;智能高铁废液循环系统&lt;p/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/rAfZEbwugWq83XibXiaMJbRVeiane6WplwcMo5MLO97bsYGicmFomwa4rViaOkoeLvcjLIXXTJWhG0EebmTlEBLyONA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9ce94e05c57e6768454ebe5c297bfc3c</guid>
<title>定位任意时刻性能问题，持续性能分析实践解析</title>
<link>https://toutiao.io/k/lbm4c67</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content               autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/yvBJb5IiafvmiaBnXvbGDru5fwoNCGwhCdc2xA5ahKkfBePMIjkboicYBKINVBY43ZVG1CibXJORibIAzkhpAke0PhQ/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;持续性能剖析简介&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;更好的应用性能，可以提供更好的用户体验，可以降低企业IT成本，可以让系统更稳定和可靠。在应用性能剖析技术出现以前，开发人员排查问题只能依赖各种日志和监控，这需要提前在应用代码中埋点，不但对应用代码侵入性较大且可能由于埋点不全而无法提供足够信息，诊断问题非常费时，很多时候无法找出原因。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着应用性能剖析技术出现，开发人员可以很方便的找出应用程序性能瓶颈（如CPU利用率高、内存占用高等），从而进行优化。但由于早期应用性能剖析技术开销较大，只能在开发环境而不能在生产长时间开启，生产环境出问题时很可能没有被记录下来，开发人员在开发环境模拟和复现问题很困难，导致解决问题的效率很低，也很有可能无法解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;近些年来，性能剖析技术持续发展，功能越来越丰富，开销也显著改善，达到生产环境持续开启水准，不过离广泛普及还存在诸多障碍。性能剖析一般过程有三步：生产环境抓取、保存性能剖析文件、性能剖析文件可视化。当应用体量较大时，这3个步骤每步都存在着难度，需要解决大量计算、存储、产品设计等多方面问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;ARMS Continuous Profiler&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;1]&lt;/strong&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;应运而生，由阿里云ARMS（&lt;strong&gt;应用实时监控服务&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;2]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;）团队和&lt;strong&gt;Dragonwell&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;3]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;团队联合研发。它基于当前最成熟的性能剖析技术，将整个性能剖析过程产品化，适合在生成环境持续开启。与常规性能剖析相比，ARMS Continuous Profiler增加时间维度，核心功能如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;定位任意时刻的性能问题（比如CPU占用高、内存占用高）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持两个时段的性能对比，找出应用演进过程中的性能差异&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;观测应用的调用栈，以便更好的审视和理解代码设计&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;ARMS 持续性能分析功能演示&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们举例来说明如何用ARMS持续性能分析来解决问题。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常见场景一：CPU 热点解析&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以某图书馆的服务应用举例，其Java进程占用大量CPU，接口响应时间达到了十多秒，应用性能很差。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36254295532646047&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbraZdBQhotQxOZbgJyck9hZJvAdciaWBMbicpHXE6mGXrgnwSF3SlkvAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1164&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3687214611872146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbNL67vibKubjbMStuu2hLTogXOWBX0SsDRf4ZFbWRNbOtuADM7iamj2xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.31399317406143346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb3fCknasEnpTXkGEn8GDQYdHib1mRJjXS31YQrbc8ypA3KKyDDKay4Zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为当前应用CPU占用很高，因此我们直接在性能分析类型中选择CPU Time&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;菜单路径：ARMS控制台 -&amp;gt; 应用首页 -&amp;gt; 应用诊断 -&amp;gt; CPU&amp;amp;内存诊断 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1791044776119403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbrtDvvLZWicRichGT1DXVgyeOGsXVQ9jTy3woHvibnAsIKEmbsLUNldVQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;335&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16539263377345378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbR7kVC0IUv8KQ2ibX5zTG6cb0m5HWiaicxO2ANufYApacZiaXMf7RCVibhMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1439&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从火焰图我们可以看到，java.util.LinedList.node(int)方法占用了85%的CPU，对应的业务代码方法是DemoController.countAllBookPages(List)，结合代码，可以发现，这个方法对于对象很多的集合性能很差，因为要从头或者从尾部逐个遍历。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4460285132382892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BboF1gBpDngpDYhdhDiaZsPH4xicRKZ1MQftMSklMwoY92Q7icBB0JNR5nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;定位到原因后，我们可以通过两个解决方案进行修复。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一个方法是将LinkedList修改为下标访问方式更高效的ArrayList&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1796875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbHawt4HPdicsu6pQcWKRbLNCfia01UvTrv7M8VM7uic1fslJ0uibbtIURcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二个方法是将LinkedList的遍历算法从普通for循环修改为增强的for循环&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25415162454873647&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbmPhbxUF2kgpP5A2iawOK6icEDLZKJUFwmpt0gsOhQUYrOqBqJVYLteXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1385&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;将修复后的代码重新部署，以相同压力分别压测两种方案，可以看到接口响应时间显著下降，Java进程CPU利用率显著下降。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.15862808145766344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbhynfr41TicwAQC9NejMMEGDib6icA5Qz2bfA1TbhyoCDubn7n7APCp84g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34084231145935356&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbxXnTyrkic0Uqibg8YB1QV66WjbeV5mSUibrjN08OoCnicR75KO6hHHvY6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1021&quot;/&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;常见场景二：内存申请热点&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以某图书馆的服务应用举例，其Java进程占用大量CPU，接口响应时间达到十多秒，应用性能很差。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.30017452006980805&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbib4gmL6hVMwPpRLsB37Qte2Nw7ibWdQUelUIzVHt0PfzGryL1CTXjTuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1146&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.301556420233463&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbJmP22eOvFU37ReibkBWkAibwbuQgqTVpBhGYVP0rmiaich6nGglv2Cuxsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2728155339805825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbZ507CyWVA9H02mdPXXSV4VWV8kD9ibkbrgV5y8LssBJICrc52Kibo5qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为当前应用CPU占用很高，我们直接在性能分析类型中选择：CPU Time&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;菜单路径：ARMS控制台 -&amp;gt; 应用首页 -&amp;gt; 应用诊断 -&amp;gt; CPU&amp;amp;内存诊断 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1791044776119403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbrtDvvLZWicRichGT1DXVgyeOGsXVQ9jTy3woHvibnAsIKEmbsLUNldVQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;335&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14125200642054575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb0xJHibrK74iaIicRvelztuOCryltyjKqqYrKnsAB88QyCjHic7eXoQqe6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1246&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从CPU热点方法，我们发现Java进程89%的时间都在做GC，说明应用存在很大的内存压力。我们下一步选择内存热点剖析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1476510067114094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbTx62WoC9hcVDdOUhiaGg0dibME5vQOicLGdDCXHOFkuibkgVeaVafc9I9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;447&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19271255060728745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbzaZA8sJdpAZ0R8nJgJSj0kkhUAGNibzUAD7jGfIYDp8DYaY0OcTWVsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1235&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上图的内存申请热点火焰图，我们可以找到过去一段时间所有内存申请中，DemoController.queryAllBooks方法占了99%，进一步检查，可以发现业务代码创建了2万个大对象并保存到了List。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;67&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;注：这个方法本来应该从数据库中读取2万本书，这里进行了简化，但效果相同，都是在堆中创建了一个占用大量内存的List&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28592162554426703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb6AZMApSrr7NN16QYEicc07aChcjhPPbaXJRJvqxEWZPaZdxS6Bjc86g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;689&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个接口本来想实现的是按分页查询书籍列表，但由于实现错误，误将所有书籍都查出来了然后最终只返回了指定分页的部分，所以可以直接从数据库中用分页的方式查询，这样就可以避免大量的Java内存占用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2895845875978326&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbQslJrynjlE2y2qljL1blNuHfkDK5ha6Nmd4N9Z0YIVc1iaQH6RuGdow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1661&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;将修复后的代码重新部署，以前相同压力进行压测，可以看到接口响应时间显著下降，Java进程CPU利用率显著下降。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3041002277904328&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbvTSkYZ2NMfvNYlcCy8ibapABH0VBeWYXHibibricVQ2k16ia1nTJyMMmBUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28679653679653677&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbPxgNSnjRZXdZzhaT6NCux4BtfaguQNbzg5OOxSFz0ayON86242Xuew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;924&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;ARMS 持续性能分析的设计和实现&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1、产品设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;产品整体分为3个部分，第一个部分负责在应用端收集性能剖析数据，第二个部分用于传输和存储剖析结果文件，第三部分用于查询和展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44884241971620614&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bbc1iaQD5u3DrKx9Z1x0QicIRRUQw1vIuFFC3m4icAF3w1DiarUZdD06a14Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1339&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一个部分主要使用&lt;strong&gt;Java Flight Recorder&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;4]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;、&lt;strong&gt;async-profiler&lt;sup&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;/sup&gt;&lt;sup&gt;&lt;strong&gt;5]&lt;/strong&gt;&lt;/sup&gt;&lt;/strong&gt;，我们会根据Java版本情况自动选择其一，其核心功能是周期性对应用程序进行采样，并且不会因为安全点问题导致结果不准确。下图是对一个线程采样6次的例子，可以看到每次采样瞬间的调用栈。最终保存为JFR格式的文件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2652134423251589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbEoyicLbEzQqvRN0sepopA8tMFGz6cvDyn2WHh7Iic3eX1ibDEmFugiaib6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1101&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二个部分比较重要的是JFR Analyzer，其核心功能是读取JFR文件，对其进行解析、计算和聚合，最终生成便于查询和展示的中间结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第三个部分的核心功能是将剖析结果展示为表格或火焰图，也要支持对比能力。&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2、Java Flight Recorder&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;JFR是OpenJDK内置的低开销监控和性能剖析工具，深度集成在虚拟机各个角落。当Oracle在OpenJDK11上开源JDK Flight Recorder之后，阿里巴巴也是作为主要贡献者，与RedHat等社区贡献者一起将 JFR 移植到OpenJDK 8。&lt;/span&gt;&lt;/p&gt;&lt;article&gt;&lt;article&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;JFR由两个部分组成：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第1个部分分布在虚拟机各个关键路径上，负责捕获信息。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;第2个部分是虚拟机内单独模块，负责接收和存储第1个部分产生的数据，这些数据通常也叫做事件。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;JFR包含160种以上事件，JFR事件包含很多有用的上下文信息及时间戳。比如方法执行调用栈、文件访问、特定GC阶段的发生，或特定GC阶段、耗时。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;387&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbVEb5fbHVe3RvlkoWQf8uOI49O8edHfOJtXEFJk1jjeRpzEq7YVj7bg/640?wx_fmt=jpeg&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5019710906701709&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbibE8zxs7ftTicfuE3gpRkbgs50AgIv9RBpic9wiaGLMcmeud89j85xRAcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1522&quot;/&gt;&lt;/p&gt;&lt;/article&gt;&lt;/article&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3、async-profiler&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;async-profiler是一个低开销的Java性能剖析工具，依靠JVM的特定API进行CPU和内存申请的剖析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为OracleJDK 8上JFR功能是商业特性，所以在OracleJDK8上我们用async-profiler作为替换技术，实现相同剖析能力。而对于OpenJDK8，由于内存申请热点剖析功能存在较大性能开销，我们也用async-profiler作为替代技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;async-profiler使用C++开发，以动态库方式加载到JVM进程中，支持生成JFR格式文件，这样不论我们用JFR还是async-profiler，因为文件格式相同，所以分析和存储方案都可以复用。&lt;/span&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5068259385665529&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbDk8Mibnaw5jKpHVPJq1MJ0AmOITD8QxNqT7xWMjyoHkK0I7EVPE3icrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;/section&gt;&lt;/article&gt;&lt;/article&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;118439&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4、JFR File Analyzer&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JFR File Analyzer的输入是JFR文件，输出是一种支持按时间范围高效查询的树状结构。一个JFR文件中可以包含CPU热点、内存申请热点等多个方面的数据，每个方面都有对应的解析和存储实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45165189363416597&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbkIE8AkEOr2hvT7Ah1baiaDoNn6sDPL1l3ibjzHrp4JWfIT9c0jzh3LWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2482&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文介绍了持续性能剖析的产生背景，通过两个例子演示了ARMS Continuous Profiler的实际使用场景，也对ARMS Continuous Profiler的设计和核心模块进行了介绍，其主要特点如下：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4684838160136286&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbtAddwcsmicO9d8Kczo8ibwbX8EgvarFey6pvIAfFwZAuxGtibCzicicmhvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1174&quot;/&gt;&lt;/section&gt;&lt;article&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.49566724436741766&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbicXMyBmD4vdLy2ccSz4ibYZcJhibnIq1V3rCBMBddnZevflP1BE1wTjiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/article&gt;&lt;/article&gt;&lt;p&gt;&lt;span&gt;对ARMS Continuous Profiler感兴趣的读者，可以加入专属服务钉群，或者阅读产品文档，欢迎试用和交流。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;👉 专属服务钉群：&lt;/span&gt;&lt;span&gt;22560019672&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2380410022779043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9BbHulX5gSnhOibu2LszGr4bOSYUkMFeHt5E91x5kn7VoRkpiaRLWeJbFEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;📒 文档：&lt;/span&gt;&lt;span&gt;https://help.aliyun.com/document_detail/473143.html&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;相关链接&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;Cloud Native&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;span&gt;&lt;span&gt;ARMS Continuous Profiler&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://help.aliyun.com/document_detail/473143.html&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;span&gt;应用实时监控服务&lt;strong/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://help.aliyun.com/product/34364.html&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[3] &lt;span&gt;&lt;span&gt;&lt;span&gt;Dragonwell&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://dragonwell-jdk.io/#/index&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[4] &lt;span&gt;&lt;span&gt;Java Flight Recorder&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;[5] &lt;span&gt;&lt;span&gt;async-profiler&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;https://github.com/async-profiler/async-profiler&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;107450&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;5.29875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvlYejOGjn56YVrKGOJ7U9Bb9Ruym7S63OegIcAaiaW38wHOVWgbT6jULctW9eWZ4ib07KrvGPZ2SibQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c8f5c8f0549dcd0233637eebb2fffc12</guid>
<title>浅谈 golang 代码规范, 性能优化和需要注意的坑</title>
<link>https://toutiao.io/k/zor3qgm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-1g0fqss&quot; options=&quot;[object Object]&quot;&gt;&lt;h2 data-first-child=&quot;&quot;&gt;&lt;b&gt;浅谈 golang 代码规范, 性能优化和需要注意的坑&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;编码规范&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;[强制] 声明slice&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;6kE5SRjB&quot;&gt;申明 slice 最好使用&lt;/p&gt;&lt;p data-pid=&quot;vFv1TBOo&quot;&gt;而不是使用&lt;/p&gt;&lt;p data-pid=&quot;jCKp4p-J&quot;&gt;因为 var 并没有初始化，但是 make 初始化了。&lt;/p&gt;&lt;p data-pid=&quot;TmwcWquZ&quot;&gt;但是如果要指定 slice 的长度或者 cap，可以使用 make&lt;/p&gt;&lt;h3&gt;&lt;b&gt;最小作用域&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;if err := DoSomething(); err != nil {
    return err
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;mllQk8T9&quot;&gt;尽量减少作用域, GC 比较友好&lt;/p&gt;&lt;h3&gt;&lt;b&gt;赋值规范&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;ll_jeRrb&quot;&gt;声明一个对象有4种方式：make, new(), var, :=&lt;/p&gt;&lt;p data-pid=&quot;7GmAcomG&quot;&gt;比如:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;t := make([]int, 0)
u := new(User)
var t []int
u := &amp;amp;User{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li data-pid=&quot;OafSxCQX&quot;&gt;var 声明但是不立刻初始化&lt;/li&gt;&lt;li data-pid=&quot;AY-xG25p&quot;&gt;:= 声明并立刻使用&lt;/li&gt;&lt;li data-pid=&quot;1ZRTaW6m&quot;&gt;尽量减少使用 new() 因为他不会初始化值, 使用 u := User{} 更好&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;b&gt;接口命名&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;3_Jf6QVw&quot;&gt;单个功能使用 er 结尾或者名词&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type Reader interface {
    Read(p []byte) (n int, err error)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;nlzqVzRH&quot;&gt;2 个功能&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type ReaderWriter interface {
    Reader
    Writer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;tCWzJGtA&quot;&gt;3 个及以上功能&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type Car interface {
    Drive()
    Stop()
    Recover()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;命名规范&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;代码风格&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;41geWwcL&quot;&gt;[强制] go 文件使用下划线命名&lt;/p&gt;&lt;p data-pid=&quot;8hJWlCQD&quot;&gt;[强制] 常量使用下划线或者驼峰命名, 表达清除不要嫌名字太长&lt;/p&gt;&lt;p data-pid=&quot;x6EYY_IF&quot;&gt;[推荐] 不要在名字中携带类型信息&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 反例
userMap := map[string]User{}
// 正例
users := map[string]User{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;fH3KZ1VL&quot;&gt;[推荐] 方法的参数要能表达含义&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 反例
func CopyFile(a, b string) error 
// 正例
func CopyFile(src, dst string) error 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;MuGZCH8-&quot;&gt;[推荐] 包名一律使用小写字母, 不要加下划线或者中划线&lt;/p&gt;&lt;p data-pid=&quot;B-JL-Fk2&quot;&gt;[推荐] 如果使用了设计模式, 名称中体现设计模式的含义&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type AppFactory interface {
    CreateApp() App
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;fmN1q8Sg&quot;&gt;[推荐] 如果变量名是 bool 类型, 如果字段名不能表达 bool 类型, 可以使用 is 或者 has 前缀&lt;/p&gt;&lt;p data-pid=&quot;Ad1lnn-U&quot;&gt;[强制] 一个变量只能有一个功能, 并和名称一致, 不要把一个变量作为多种用途&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 反例
length := len(userList)
length := len(orderList)
// 正例
userNum := len(userList)
orderNum := len(orderList)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;zHUT6hXS&quot;&gt;[推荐] 如果变量名是 bool 类型, 如果字段名不能表达 bool 类型, 可以使用 is 或者 has 前缀&lt;/p&gt;&lt;h2&gt;&lt;b&gt;golang 基本规范&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;包设计&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;3enSu1h4&quot;&gt;[强制] 包的设计满足单一职责&lt;/p&gt;&lt;p data-pid=&quot;NFU-keKH&quot;&gt;说明: 在 SRP (Single Response Principle) 模式中, 单一职责原则是指一个类只负责一项功能, 并且不能负责多个功能. 将包设计的非常内聚, 减少包之间的 api&lt;/p&gt;&lt;p data-pid=&quot;YJwfIeuN&quot;&gt;[强制] 包的设计遵循最小可见性原则&lt;/p&gt;&lt;p data-pid=&quot;0O1I25Bd&quot;&gt;说明: 仅在包内调用的函数, 或者变量, 或者结构体, 或者接口, 或者类型, 或者函数等等, 需要小写开头, 不可以可以被外部包访问&lt;/p&gt;&lt;p data-pid=&quot;Qtlib3Vm&quot;&gt;[强制] 代码需要可测试性, 使用接口和依赖注入替代硬编码&lt;/p&gt;&lt;p data-pid=&quot;3joFcGwi&quot;&gt;[强制] 单元测试文件放到代码文件同级目录, 便于 golang 工具使用&lt;/p&gt;&lt;p data-pid=&quot;0N1_uxjC&quot;&gt;比如: vscode 在方法上右键可以直接生成测试代码和测试覆盖率并可视化展示执行情况&lt;/p&gt;&lt;h2&gt;&lt;b&gt;布局&lt;/b&gt; &lt;/h2&gt;&lt;p data-pid=&quot;0rGMYCbP&quot;&gt;[推荐] 程序实体之间使用空行区分, 增加可读性&lt;/p&gt;&lt;p data-pid=&quot;0dPd0TDN&quot;&gt;说明: 比如函数中各个模块功能使用空行区分, 增加可读性&lt;/p&gt;&lt;p data-pid=&quot;AOEwr3cx&quot;&gt;[推荐] 每个文件末尾应该有且仅有一个空行&lt;/p&gt;&lt;p data-pid=&quot;L-qOM37N&quot;&gt;[推荐] 一元操作符不要加空格, 二元操作符的才需要&lt;/p&gt;&lt;h3&gt;&lt;b&gt;注释&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;g8ZLN-1N&quot;&gt;[推荐] 可导出的方法, 变量, 结构体等都需要注释&lt;/p&gt;&lt;h3&gt;&lt;b&gt;表达式和语句&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;VMOx2rmu&quot;&gt;[推荐] if 或者循环的嵌套层数不宜大于 3&lt;/p&gt;&lt;p data-pid=&quot;tQVbsG5u&quot;&gt;[推荐] 对于 for 遍历, 优先使用 range 而不是显式&#x27;的下标, 如果 value 占用内存大的话可以使用显式下标&lt;/p&gt;&lt;p data-pid=&quot;xMtkL7-W&quot;&gt;说明: range 可以让代码更加整洁, 特别是多层 for 嵌套的时候, 但是 range 非拷贝值, 如果 value 不是指针类型, 而且占用内存较大会有性能损耗.&lt;/p&gt;&lt;h3&gt;&lt;b&gt;函数&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;6ZOvZviK&quot;&gt;[强制] 命名不要暴露实现细节, 一般以&quot;做什么&quot;来命名而不是&quot;怎么做&quot;&lt;/p&gt;&lt;p data-pid=&quot;cBREXAZk&quot;&gt;[推荐] 短小精悍, 尽量控制到 20 行左右&lt;/p&gt;&lt;p data-pid=&quot;SbbRezgO&quot;&gt;说明: 函数的粒度越小, 可复用的概率越大, 而且函数越多, 高层函数调用起来就是代码可读性很高, 读起来就像一系列解释&lt;/p&gt;&lt;p data-pid=&quot;u5OmKKaq&quot;&gt;[推荐] 单一职责, 函数只做好一件事情, 只做一件事情&lt;/p&gt;&lt;p data-pid=&quot;6oBbqMZN&quot;&gt;[强制] 不要设置多功能函数&lt;/p&gt;&lt;p data-pid=&quot;YkSefD4l&quot;&gt;例如: 一个函数既修改了状态, 又返回了状态, 应该拆分&lt;/p&gt;&lt;p data-pid=&quot;LB5cs5MQ&quot;&gt;[推荐] 为简单的功能编写函数&lt;/p&gt;&lt;p data-pid=&quot;OugXh8b5&quot;&gt;说明: 为 1,2 行代码编写函数也是必要的, 增加代码的可复用性, 增加高层函数的可读性, 可维护性, 可测试性&lt;/p&gt;&lt;h3&gt;&lt;b&gt;参数&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;5aK-fElV&quot;&gt;[推荐] 参数个数限制在 3 个以内, 如果超过了, 可以使用配置类或者 Options 设计模式&lt;/p&gt;&lt;p data-pid=&quot;BBOAvFkf&quot;&gt;说明: 函数的最理想的参数的个数首先是0, 然后是 1, 然后是 2, 3 就会很差了. 因为参数有很多概念性, 可读性差, 而且让测试十分复杂&lt;/p&gt;&lt;p data-pid=&quot;1QB7g5-d&quot;&gt;[推荐] 函数不能含有表示参数&lt;/p&gt;&lt;p data-pid=&quot;F8IilWSq&quot;&gt;说明: 标识参数丑陋不堪, 函数往往根据标识参数走不同的逻辑, 这个和单一职责违背&lt;/p&gt;&lt;p data-pid=&quot;vNrQoP6b&quot;&gt;[强制] struct 作为参数传递的时候, 使用指针&lt;/p&gt;&lt;p data-pid=&quot;PDVszHod&quot;&gt;说明: 函数的执行就是压栈, struct 如果有多个字段将会被多次压栈, 有性能损失, 指针只会被压栈一次&lt;/p&gt;&lt;p data-pid=&quot;feXyPFLA&quot;&gt;[推荐] 在 api(controller) 层对传入的参数进行检查, 而不是每一层都检查一次&lt;/p&gt;&lt;p data-pid=&quot;evLRe7BB&quot;&gt;[推荐] 当 chan 作为函数的参数的时候, 根据最小权限原则, 使用单向 chan&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 读取单向chan
func Parse(ch &amp;lt;-chan struct{}) {
 for v := range ch {
  println(v)
 }
}

// 写入单向chan
func Do(down chan&amp;lt;- struct{}) {
 time.Sleep(time.Second)
 down &amp;lt;- struct{}{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;返回值&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;otcm5cjW&quot;&gt;[推荐] 返回值的个数不要大于 3&lt;/p&gt;&lt;p data-pid=&quot;Gx0T5fgK&quot;&gt;[强制] 统一定义错误, 不要随便抛出错误&lt;/p&gt;&lt;p data-pid=&quot;4YIXhMO4&quot;&gt;说明: 比如记录不存在可能有多种错误&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;record not exits&quot;
&quot;record not exited&quot;
&quot;record not exited!!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;uJxsr_Xi&quot;&gt;上层函数要处理底层的错误的话, 要知道所有的抛出情况, 这个是不现实的, 需要处理的错误应该使用统一文件定义错误码&lt;/p&gt;&lt;p data-pid=&quot;EdHwETlr&quot;&gt;[强制] 没有失败原因的时候, 不要使用 error&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 正例
func IsPhone() bool 
// 反例
func IsPhone() error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;YFRHRc7w&quot;&gt;[推荐] 当多重试几次可以避免失败的时候, 不要返回 error&lt;/p&gt;&lt;p data-pid=&quot;b9Ti9FKO&quot;&gt;错误是偶然发生的, 应该给一个机会重试, 可以避免大多数的偶然问题&lt;/p&gt;&lt;p data-pid=&quot;ie7po2h2&quot;&gt;[推荐] 上层函数不关心 error 的时候,  不要返回 error&lt;/p&gt;&lt;p data-pid=&quot;RbiYUnZl&quot;&gt;比如 Close(), Clear() 抛出了 error, 上层函数大概率不知道怎么处理&lt;/p&gt;&lt;h3&gt;&lt;b&gt;异常设计&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;XK6zO08e&quot;&gt;[推荐] 程序的开发阶段, 坚持速错, 让异常程序崩溃&lt;/p&gt;&lt;p data-pid=&quot;n-FnzEbg&quot;&gt;说明: 速错的本质逻辑就是 &quot;让它挂&quot;, 只有挂了你才第一时间知道错误, panic 能让 bug 尽快被修复&lt;/p&gt;&lt;p data-pid=&quot;WN3nEZO0&quot;&gt;[强制] 程序部署后, 应该避免终止&lt;/p&gt;&lt;p data-pid=&quot;Ejb_AbEX&quot;&gt;是否 recover 应该根据配置文件确定, 默认需要 recover&lt;/p&gt;&lt;p data-pid=&quot;VZ08IiNL&quot;&gt;注意: 有时候需要在延迟函数中释放资源, 比如 panic 之前 read 了 channel, 但是还没有 write 就 panic , 需要在 deffer 函数中做好处理, 防止 channel 阻塞.&lt;/p&gt;&lt;p data-pid=&quot;RRID5Ua2&quot;&gt;[推荐] 当入参不合法的时候, panic&lt;/p&gt;&lt;p data-pid=&quot;sqe-1FVh&quot;&gt;说明: 当入参不合法的时候, panic, 可以让上层函数知道错误, 而不是继续执行(api 应该提前做好参数检查)&lt;/p&gt;&lt;h3&gt;&lt;b&gt;整洁测试&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;G0LPJGGQ&quot;&gt;[强制] 不要为了测试对代码进行入侵式的修改, 应该 mock&lt;/p&gt;&lt;p data-pid=&quot;MoST6VWz&quot;&gt;说明: 禁止为了测试在函数中增加条件分支和测试变量&lt;/p&gt;&lt;p data-pid=&quot;Na4ngKiV&quot;&gt;[推荐] 测试的三要数, 可读性, 可读性, 可读性&lt;/p&gt;&lt;p data-pid=&quot;94nzFNA8&quot;&gt;生产代码的可靠性由测试代码来保证, 测试代码的可靠性由最简单的可读性来保证, 逻辑需要简单到没有 bug&lt;/p&gt;&lt;h2&gt;&lt;b&gt;REFERENCE&lt;/b&gt; &lt;/h2&gt;&lt;p data-pid=&quot;-Fm8o6iX&quot;&gt;bilibili  go 规范&lt;/p&gt;&lt;p data-pid=&quot;NzqU0ql6&quot;&gt;uber go-guide &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/xxjwxc/uber_go_guide_cn&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/xxjwxc/uber_&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;go_guide_cn&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;golang 性能优化&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;内存优化&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;小对象合并&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;SrzzhMeu&quot;&gt;小对象在堆内存上频繁的创建和销毁, 会导致内存碎片, 一般会才使用内存池&lt;/p&gt;&lt;p data-pid=&quot;B3So1khG&quot;&gt;golang 的内存机制也是内存池, 每个 span 大小为 4KB, 同时维护一个 cache, cache 有一个 list 数组&lt;/p&gt;&lt;p data-pid=&quot;hFLk0tvL&quot;&gt;数组里面储存的是链表, 就像 HashMap 的拉链法, 数组的每个格子代表的内存大小是不一样的, 64 位的机器是 8 byte 为基础, 比如下标 0 是 8 byte 大小的链表节点, 下标 1 是 16 byte 的链表节点, 每个下标的内存不一样, 使用的是按需分配最近的内存, 比如一个结构体的内存实际上算下来是 31 byte, 分配的时候会分配 32 byte.&lt;/p&gt;&lt;p data-pid=&quot;wSH9GP-P&quot;&gt;一个下标的一条链表的每个 Node 储存的内存是一致的.&lt;/p&gt;&lt;p data-pid=&quot;I2Mi_xL9&quot;&gt;所以建议将小对象合并为一个 struct&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;for k, v := range m {
    x := struct {k , v string} {k, v} // copy for capturing by the goroutine
    go func() {
        // using x.k &amp;amp; x.v
    }()
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;使用 buf 缓存&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;lnD_x1F4&quot;&gt;协议编码的时候需要频繁的操作 buf, 可以使用 bytes.Buffer 作为缓存区对象, 它会一次性分配足够大的内存, 避免内存不够的时候动态申请内存, 减少内存分配次数, 而且, buf 可以被复用(建议复用)&lt;/p&gt;&lt;h3&gt;&lt;b&gt;slice 和 map 创建的时候, 预估大小指定的容量&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;QHwQNO3R&quot;&gt;预先分配内存, 可以减少动态扩容带来的开销&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;t := make([]int, 0, 100)
m := make(map[string]int, 100)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;6CsRVuGH&quot;&gt;如果不确定 slice 会不会初始化, 使用 var 这样不会分配内存, make([]int,0) 会分配内存空间&lt;/p&gt;&lt;p data-pid=&quot;aAwosE90&quot;&gt;拓展:&lt;/p&gt;&lt;p data-pid=&quot;CNgwTykD&quot;&gt;slice 容量在 1024 前扩容是倍增, 1024 后是1/4&lt;/p&gt;&lt;p data-pid=&quot;TsENwXLc&quot;&gt;map 的扩容机制比较复杂, 每次扩容是 2 倍数, 结构体中有一个 bucket 和 oldBuckets 实现增量扩容&lt;/p&gt;&lt;h3&gt;&lt;b&gt;长调用栈避免申请较多的临时对象&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;WWehSvGa&quot;&gt;说明: goroutine 默认的 栈的大小是 4K, 1.7 改为 2K, 它采用的是连续栈的机制, 当栈空间不够的时候, goroutine 会不断扩容, 每次扩容就先 slice 的扩容一样, 设计新的栈空间申请和旧栈空间的拷贝, 如果 GC 发现现在的空间只有之前的 1/4 又会缩容, 频繁的内存申请和拷贝会带来开销&lt;/p&gt;&lt;p data-pid=&quot;TuxOveyp&quot;&gt;建议: 控制函数调用栈帧的复杂度, 避免创建过多的临时对象, 如果确实需要比较长的调用栈或者 job 类型的代码, 可以考虑将 goroutine 池化&lt;/p&gt;&lt;h3&gt;&lt;b&gt;避免频繁创建临时变量&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;_hrz_2RI&quot;&gt;说明: GC STW 的时间已经优化到最糟糕 1ms 内了, 但是还是有混合写屏障会降低性能, 如果临时变量个数太多, GC 性能损耗就高.&lt;/p&gt;&lt;p data-pid=&quot;LGRqXsFL&quot;&gt;建议: 降低变量的作用域, 使用局部变量, 最小可见性, 将多个变量合并为一个 struct 数组(降低扫描次数)&lt;/p&gt;&lt;h3&gt;&lt;b&gt;大的 struct 使用指针传递&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;qTUSt0-K&quot;&gt;golang 都是值拷贝, 特别是 struct 入栈帧的时候会将变量一个一个入栈, 频繁申请内存, 可以使用指针传递来优化性能&lt;/p&gt;&lt;h2&gt;&lt;b&gt;并发优化&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;goroutine 池化&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;P5X7yclO&quot;&gt;go 虽然轻量, 但是对于高并发的轻量级任务, 比如高并发的 job 类型的代码, 可以考虑使用 goroutine 池化, 减少 goroutine 的创建和销毁, 减少 goroutine 的创建和销毁的开销&lt;/p&gt;&lt;h3&gt;&lt;b&gt;减少系统调用&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;HgKoeC3o&quot;&gt;goroutine 的实现是通过同步模拟异步操作, 比如下面的操作并不会阻塞, runtime 的线程调度&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;z5XONOUl&quot;&gt;网络IO&lt;/li&gt;&lt;li data-pid=&quot;OkrNcw-0&quot;&gt;channel&lt;/li&gt;&lt;li data-pid=&quot;pzb3EVFm&quot;&gt;time.Sleep&lt;/li&gt;&lt;li data-pid=&quot;02YXgXLm&quot;&gt;基于底层异步的 SysCall&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;eGRh1ouh&quot;&gt;下面的阻塞会创建新的线程调度&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;KzpQZluS&quot;&gt;本地 IO&lt;/li&gt;&lt;li data-pid=&quot;Xt9GdSp2&quot;&gt;基于底层同步的 SysCall&lt;/li&gt;&lt;li data-pid=&quot;wow1Saeq&quot;&gt;CGO 调用 IO 或者其他阻塞&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;TCs4opEG&quot;&gt;建议将同步调用: 隔离到可控 goroutine 中, 而不是直接高并 goroutine 调用&lt;/p&gt;&lt;h3&gt;&lt;b&gt;减少锁, 减少大锁&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;MlkpIM7j&quot;&gt;Go 推荐使用 channel 的方式调用而不是共享内存, channel 之间存在大锁, 可以将锁的力度降低&lt;/p&gt;&lt;p data-pid=&quot;vI9dr9kQ&quot;&gt;拓展: channel&lt;/p&gt;&lt;h3&gt;&lt;b&gt;channel 不要传递大数据, 会有值拷贝&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;pC2Myg7s&quot;&gt;channel 的底层是链表 + 锁&lt;/p&gt;&lt;p data-pid=&quot;Ck8gaZml&quot;&gt;不要用 channel 传递图片等数据, 任何的队列的性能都很低, 可以尝试指针优化大对象&lt;/p&gt;&lt;h3&gt;&lt;b&gt;合并请求 singleflight&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;ueXIeKob&quot;&gt;参考: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.lixueduan.com/post/go/singleflight/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;singleflight&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;协议压缩 protobuf&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;yW3RER9z&quot;&gt;protobuf 比 json 的储存效率和解析效率更高, 推荐在持久化或者数据传输的时候使用 protobuf 替代 json&lt;/p&gt;&lt;h3&gt;&lt;b&gt;批量协议&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;zj1YwzwL&quot;&gt;对数据访问接口提供批量协议, 比如门面设计模式或者 pipeline, 可以减少非常多的 IO, QPS, 和拆包解包的开销&lt;/p&gt;&lt;h3&gt;&lt;b&gt;并行请求 errgroup&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;AiUYJOIQ&quot;&gt;对于网关接口, 通常需要聚合多个模块的数据, 当这些业务模块数据之间没有依赖的时候, 可以并行请求, 减少耗时&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;ctxTimeout, cf := context.WithTimeout(context.Background(), time.Second)
defer cf()
g, ctx := errgroup.WithContext(ctxTimeout)
var urls = []string{
    &quot;http://www.golang.org/&quot;,
    &quot;http://www.google.com/&quot;,
    &quot;http://www.somestupidname.com/&quot;,
}
for _, url := range urls {
    // Launch a goroutine to fetch the URL.
    url := url // https://golang.org/doc/faq#closures_and_goroutines
    g.Go(func() error {
        // Fetch the URL.
        resp, err := http.Get(url)
        if err == nil {
            resp.Body.Close()
        }
        return err
    })
}
// Wait for all HTTP fetches to complete.
if err := g.Wait(); err == nil {
    fmt.Println(&quot;Successfully fetched all URLs.&quot;)
}
select {
case &amp;lt;-ctx.Done():
    fmt.Println(&quot;Context canceled&quot;)
default:
    fmt.Println(&quot;Context not canceled&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;其他优化&lt;/b&gt; &lt;/h2&gt;&lt;h2&gt;&lt;b&gt;需要注意的坑&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;channel 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;如何优雅的关闭 channel&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;40F0Sxgh&quot;&gt;参考: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/d24dfbb33781&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;如何优雅的关闭 channel&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;关闭 channel 的坑&lt;/b&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li data-pid=&quot;-RI50Fvh&quot;&gt;关闭已经关闭的 channel 会导致 panic&lt;/li&gt;&lt;li data-pid=&quot;jHrsz0nQ&quot;&gt;给关闭的 channel 发送数据会导致 panic&lt;/li&gt;&lt;li data-pid=&quot;Yxf1BSB4&quot;&gt;从关闭的 channel 中读取数据是初始值默认值&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;b&gt;CCP 原则&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;tHHW-30o&quot;&gt;CCP: Channel Close Principle (关闭通道原则)&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;leatx3lJ&quot;&gt;不要从接收端关闭 channel&lt;/li&gt;&lt;li data-pid=&quot;Wkm8e_ar&quot;&gt;不要关闭有多个发送端的 channel&lt;/li&gt;&lt;li data-pid=&quot;PAz5Ek16&quot;&gt;当发送端只有一个且后面不会再发送数据才可以关闭 channel&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;b&gt;有缓存的 channel 不一定有序&lt;/b&gt;&lt;/h3&gt;&lt;h2&gt;&lt;b&gt;defer 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;defer 中的变量&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;35MNwgdh&quot;&gt;参数传递是在调用的时候&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;i := 1
defer println(&quot;defer&quot;, i)
i++
// defer 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;3bLvRy5c&quot;&gt;非参数的闭包&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;i := 1
defer func() {
    println(&quot;defer&quot;, i)
}()
i++
// defer 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;q-OMl_DB&quot;&gt;有名返回同理闭包, 并且会修改有名返回的返回值&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func main(){
 fmt.Printf(&quot;main: %v\n&quot;, getNum())
 // defer 2
 // main: 2
}

func getNum() (i int) {
 defer func() {
  i++
  println(&quot;defer&quot;, i)
 }()
 i++
 return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;不要 for 循环中调用 deffer&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;1h9w732v&quot;&gt;因为 deffer 只会在函数 return 之后执行, 这样会累积大量的 deffer 而且极其容易出错&lt;/p&gt;&lt;p data-pid=&quot;8vZhfTJs&quot;&gt;建议: 将 for 循环需要 deffer 的代码逻辑封装为一个函数&lt;/p&gt;&lt;h2&gt;&lt;b&gt;HTTP 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;request 超时时间&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;20jq89ge&quot;&gt;golang 的 http 默认的 request 没有超时, 这是一个大坑, 因为如果服务器没有响应, 也没有断开, 客户端会一直等待, 导致客户端阻塞, 量一上来就崩溃了&lt;/p&gt;&lt;h3&gt;&lt;b&gt;关闭 HTTP 的 response&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;7BmSguJw&quot;&gt;http 请求框架的 response 一定要通过 Close 方法关闭, 不然有可能内存泄露&lt;/p&gt;&lt;h2&gt;&lt;b&gt;interface 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;interface 到底什么才等于 nil?&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;2jHWSeh2&quot;&gt;说明: interface{}和接口类型 不同于 struct,  接口底层有 2 个成员, 一个是 type 一个是 value, 只有当 type 和 value 都为 nil 时, interface{} 才等于 nil&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;var u interface{} = (*interface{})(nil)
if u == nil {
    t.Log(&quot;u is nil&quot;)
} else {
    t.Log(&quot;u is not nil&quot;)
}
// u is not nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;6jR7G0iy&quot;&gt;接口&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;var u Car = (Car)(nil)
if u == nil {
    t.Log(&quot;u is nil&quot;)
} else {
    t.Log(&quot;u is not nil&quot;)
}
// u is nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;PvVls0FF&quot;&gt;自定义的 struct&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;var u *user = (*user)(nil)
if u == nil {
    t.Log(&quot;u is nil&quot;)
} else {
    t.Log(&quot;u is not nil&quot;)
}
// u is nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;map 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;map 并发读写&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;suZTyezf&quot;&gt;map 并发读写会 panic, 需要加锁或者使用 sync.Map&lt;/p&gt;&lt;h3&gt;&lt;b&gt;map 不能直接更新 value 的某一个字段&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type User struct{
 name string
}
func TestMap(t *testing.T) {
 m := make(map[string]User)
 m[&quot;1&quot;] = User{name:&quot;1&quot;}
 m[&quot;1&quot;].name = &quot;2&quot;
 // 编译失败，不能直接修改map的一个字段值
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;Hg76y5aL&quot;&gt;需要单独拿出来&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func TestMap(t *testing.T) {
 m := make(map[string]User)
 m[&quot;1&quot;] = User{name: &quot;1&quot;}
 u1 := m[&quot;1&quot;]
 u1.name = &quot;2&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;切片之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;数组是值类型, 切片是引用类型(指针)&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func TestArray(t *testing.T) {
 a := [1]int{}
 setArray(a)
 println(a[0])
 // 0
}
func setArray(a [1]int) {
 a[0] = 1
}
func TestSlice(t *testing.T) {
 a := []int{
  1,
 }
 setSlice(a)
 println(a[0])
 // 1
}
func setSlice(a []int) {
 a[0] = 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;range 遍历&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;j1w36zgf&quot;&gt;range 会给每一个元素创建一个副本, 会有值拷贝, 如果数组存的是大的结构体可以用 index 遍历或者指针优化&lt;/p&gt;&lt;p data-pid=&quot;CCpRZ41I&quot;&gt;因为 value 是副本, 所以不能修改原有的值&lt;/p&gt;&lt;h3&gt;&lt;b&gt;append 会改变地址&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;CGfLCFvp&quot;&gt;slice 类型的本质是一个结构体&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;type slice struct {
 array unsafe.Pointer
 len   int
 cap   int
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;L7SFBySZ&quot;&gt;函数的值拷贝会导致修改失效&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func TestAppend1(t *testing.T) {
 var a []int
 add(a)
 println(len(a))
 // 0
}

func add(a []int) {
 a = append(a, 1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;闭包之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;并发下 go 函数闭包问题&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;for i := 0; i &amp;lt; 3; i++ {
    go func() {
        println(i)
    }()
}
time.Sleep(time.Second)
// 2
// 2
// 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;oTbZNHs8&quot;&gt;说明: 因为闭包导致 i 变量逃逸到堆空间, 所有的 go 共用了 i 变量, 导致并发问题&lt;/p&gt;&lt;p data-pid=&quot;6RzSV99q&quot;&gt;解决方法1: 局部变量&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;for i := 0; i &amp;lt; 3; i++ {
    ii := i
    go func() {
        println(ii)
    }()
}
time.Sleep(time.Second)
// 2
// 0
// 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;JcOq4y39&quot;&gt;解决方法2: 参数传递&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;for i := 0; i &amp;lt; 3; i++ {
    go func(ii int) {
        println(ii)
    }(i)
}
time.Sleep(time.Second)
// 2
// 0
// 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;buffer 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;buffer 对象池&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;U0f9b3Qi&quot;&gt;buffer 对象池一定要用完才还回去, 不然buffer在多处复用导致底层的 []byte 内容不一致&lt;/p&gt;&lt;p data-pid=&quot;KsLvr97v&quot;&gt;参考: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//saltbo.cn/posts/golang-buffer-pool.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;golang-buffer-pool&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;blockquote data-pid=&quot;WmiAKXDA&quot;&gt; 我们的一个 httpClient 返回处理使用了 sync.pool 缓存 buffer, 测试是内存优化了6-8倍&lt;br/&gt; 后面测试的时候发现, 获取的内容会偶尔不一致, review 代码发现可能是并发时候 buffer 指针放回去了还在使用, 导致和buffer pool 里面不一致 首先考虑就是将 buffer 的 bytes 读取出来, 然后再 put 回池子里面 然后 bytes 是一个切片, 底层还是和 buffer 共用一个 []byte, buffer 再次修改的时候底层的 []byte 也会被修改, 导致状态不一致 这些理论上是并发问题, 但是我们测试发现, 单线程调用 httpClient 时候, 有时候会有问题, 有时候又没有问题 官方的 http client 做请求的时候会开一个协程, sync pool在同一个协程下面复用对象是一致的, 但是多协程就会新建, 会尝试通过协程的id获取与之对应的对象, 没有才去新建. 串行执行请求也会产生多个协程, 所以偶尔会触发新建 sync 的buffer, 如果新建就不会报错, 如果不新建就会报错.&lt;br/&gt; &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;select 之坑&lt;/b&gt; &lt;/h2&gt;&lt;h3&gt;&lt;b&gt;for select default 之坑&lt;/b&gt;&lt;/h3&gt;&lt;p data-pid=&quot;WaGHCTIp&quot;&gt;for 中的 default 在 select 一定会执行, CPU 一直被占用不会让出, 导致 CPU 空转&lt;/p&gt;&lt;p data-pid=&quot;hYArL8qf&quot;&gt;示例代码&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;func TestForSelect(t *testing.T) {
 for {
  select {
  case &amp;lt;-time.After(time.Second * 1):
   println(&quot;hello&quot;)
  default:
   if math.Pow10(100) == math.Pow(10, 100) {
    println(&quot;equal&quot;)
   }
  }
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;IndAhkpU&quot;&gt;top CPU 跑满了&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;top - 15:00:50 up 1 day, 15:55,  0 users,  load average: 1.36, 0.85, 0.35
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND   
28632 root      20   0 2168296   1.4g   2244 S 252.8  11.7   1:04.15 __debug_bin   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>