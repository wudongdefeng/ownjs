<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a4ecdfcc731d468b47bf860a8d2e18f1</guid>
<title>SDN系统方法 | 7. 叶棘网络</title>
<link>https://toutiao.io/k/3onbcs0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;随着互联网和数据中心流量的爆炸式增长，SDN已经逐步取代静态路由交换设备成为构建网络的主流方式，本系列是免费电子书《Software-Defined Networks: A Systems Approach》的中文版，完整介绍了SDN的概念、原理、架构和实现方式。原文: &lt;span&gt;Software-Defined Networks: A Systems Approach&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7941988950276243&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0Wrh4F66vU25Muu70coYGUyPUCibM1emicjybSiaej8ibPVJEtyXef2Nk99bk0FgOw7Lhibtjk5rnibicSYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;第7章 叶棘网络(Leaf-Spine Fabric)&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本章介绍了由一组控制程序实现的叶脊交换结构。我们使用运行在ONOS上的SD-Fabric作为示例实现，在之前章节中我们已经介绍过了SD-Fabric的很多方面，所以在进入细节之前先总结一下这些内容。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;SD-Fabric支持叶脊拓扑，这种拓扑通常用于连接数据中心中的多个服务器机架(参见图10)，但也支持多站点部署(参见图17)。SD-Fabric基于裸金属交换机，并配备前几章介绍的软件来构建网络，可以混合使用固定功能流水线和可编程流水线，但在一般在生产中使用前者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SD-Fabric支持大部分L2/L3特性，所有这些特性都作为SDN控制程序重新实现(除了用于中继DHCP请求的DHCP服务器和用于与外部对等实体交换BGP路由的Quagga BGP服务器)。SD-Fabric实现每个服务器机架内部的L2连接，以及机架之间的L3连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SD-Fabric支持接入/边缘网络技术，如PON(见图13)和RAN(见图17)，包括支持(a)路由IP流量到/从连接到这些接入网络的设备，以及(b)将接入网功能卸载到交换机上。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本章不会对所有这些特性进行全面介绍，重点关注的是数据中心架构用例，这足以说明使用SDN原则构建生产级网络的方法。关于SD-Fabric设计决策的更多信息，请访问SD-Fabric网站。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;&lt;span&gt;SD-Fabric&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;. Open Networking Foundation, 2021.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1 特性集&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SDN提供了定制网络的机会，但出于实用原因，采用SDN的第一个要求是重新实现现有功能，并以复制(或改进)传统解决方案的弹性和可伸缩性的方式来实现。SD-Fabric满足了这一要求，我们在这里总结一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，关于L2连接，SD-Fabric支持VLAN，包括基于VLAN id转发流量的原生支持，以及基于外部/内部VLAN id对的Q-in-Q支持。对Q-in-Q的支持与访问网络特别相关，其中使用双标记来隔离属于不同服务类别的流量。此外，SD-Fabric支持跨L3网络的L2隧道(包括单标签和双标签)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，关于L3连接，SD-Fabric支持单播和组播地址的IPv4和IPv6路由。对于后者，SD-Fabric实现了集中式组播树构造(与运行像PIM这样的协议相反)，包含了对希望加入/离开组播组的终端主机的IGMP支持。SD-Fabric还支持ARP(用于IPv4地址转换)和NDP(用于IPv6邻居发现)，同时支持DHCPv4和DHCPv6。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，SD-Fabric在面对链路或交换机故障时提供高可用性。它通过组合众所周知的技术来实现这一点: dual-homing、链路绑定和ECMP链路组。如图39所示，SD-Fabric集群中的每台服务器都连接到一对ToR(或叶子)交换机上，运行在每个计算服务器上的操作系统实现active-active链路绑定。然后，每个叶交换机由一对连接到两个或更多脊交换机的链接连接起来，ECMP组定义了将每个或每组叶交换机连接到给定脊交换机的链接对或者链接组。集群作为一个整体有多个到外部路由的连接，如图中的叶交换机3和4所示。图39中没有显示的事实是，SD-Fabric运行在ONOS之上，ONOS本身是为了可用性而构建的。在如下所示的配置中，ONOS(以及SD-Fabric控制应用程序)在3到5个服务器上都有副本。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.84375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0Wrh4F66vU25Muu70coYGUyAn5YwwKqzPpbJ3iaSCiaXhgLVZ373mv8wJZWGeZdZQ2ibXr83N7X8O26A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;320&quot;/&gt;&lt;figcaption&gt;图39. 通过dual-homing、链路绑定和ECMP组的组合实现高可用性。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链路聚合和ECMP的用处很明显，可以增强包转发机制，在一组(如一对)链路(出口端口)之间实现负载均衡，而不只有一个&quot;最佳&quot;出口链路(出口端口)。这既提高了带宽，又在发生单个链路故障时可以自动恢复。另一种情况是交换机转发流水线支持端口组，因此一旦建立了等价链接，就可以一直为数据平面服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;明确的说，ECMP是SD-Fabric在网络中的所有交换机上统一应用的一种转发策略。SD-Fabric控制程序感知拓扑，并相应的将端口组推送到每个网络交换机上，然后交换机将这些端口组应用到其转发流水线中，流水线通过端口组转发数据包，不需要控制平面的额外参与。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，在可扩展性方面，SD-Fabric拥有支持多达120k路由和250k流表的能力。该配置包括两个脊交换机和八个叶交换机，后者意味着支持多达四个机架的服务器。与可用性一样，SD-Fabric的可扩展性直接得益于ONOS的扩展能力。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.2 段路由(Segment Routing)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一节重点介绍了SD-Fabric的功能，本节主要讨论如何才能做到这一点。SD-Fabric的核心策略基于&lt;em&gt;段路由(Segment Routing, SR)&lt;em&gt;。&quot;segment routing&quot;一词来源于这样一种想法: 任意一对主机之间的端到端路径可以由一组段序列构建，即使用标签交换沿着一段端到端路径遍历一组段序列。Segment routing是一种通用源路由方法，可以通过多种方式实现。对于SD-Fabric，segment routing利用了&lt;/em&gt;MPLS(Multi-Protocol Label Switching)&lt;/em&gt; 转发平面，细节可以参考网络信息。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;延伸阅读:&lt;br/&gt;&lt;span&gt;Multi-Protocol Label Switching&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;. Computer Networks: A Systems Approach, 2020.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当应用于叶棘网络时，总是涉及两个部分: 从叶到棘和从棘到叶。SD-Fabric为交换机编写程序，以匹配有标签或无标签数据包，并根据需要插入或弹出MPLS标签。图40说明了SR如何在SD-Fabric中工作，通过简单的配置在一对主机(10.0.1.1和10.0.2.1)之间转发流量。本例中，与Leaf 1相连的服务器在10.0.1/24子网中，与Leaf 2相连的服务器在10.0.2/24子网中，每个交换机都分配了一个MPLS id: 101、103、102和104。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6861826697892272&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0Wrh4F66vU25Muu70coYGUyTrxZmdOzqYfEZnyT7TsN4Eng9wUibkVo8V1EGuhRbGYkgo0O5g5t8yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;427&quot;/&gt;&lt;figcaption&gt;图40. 用于在一对主机之间转发流量的Segment Routing示例。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当主机1发送目的地址为10.0.2.1的数据包时，默认情况下被转发到服务器的ToR/叶交换机。Leaf 1匹配目的IP地址，了解到这个包需要穿过网络并在Leaf 2出现以到达子网10.0.2/24，因此将MPLS标签102压到包上。因为有了ECMP, Leaf 1可以将产生的数据包转发到任意一个脊交换机，此时交换机匹配MPLS标签102，弹出标签头，并将其转发到Leaf 2。最后，Leaf 2匹配目的IP地址并将数据包转发给主机2。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从该示例中可以了解到，SR是高度格式化的。对于给定的叶脊交换机组合，SD-Fabric首先分配所有标识符，每个机架配置为共享一个IP前缀并在同一个VLAN上。SD-Fabric预计算可能的路径，并在底层交换机中配置相应的match/action规则。ECMP负责处理多路径负载均衡的复杂性，它同样不感知任何端到端路径。从实现角度来看，实现SR的SD-Fabric控制程序将这些match/action规则传给ONOS, ONOS反过来将它们配置在底层交换机上。SD-Fabric还维护自己的Atomix map，以管理连接叶脊交换机的ECMP组。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.3 路由和多播(Routes and Multicast)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了在叶交换机之间建立数据路径的Segment Routing之外，SD-Fabric还利用了第6章介绍的Route和Mcast服务，它们决定每个IP前缀都有哪些叶脊交换机为其服务，以及在哪里能找到连接到每个多播组的所有主机。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SD-Fabric不通过类似OSPF或者PIM这样的分布式协议来学习路由以及构建组播树。相反，它根据全局信息计算出正确答案，然后将映射推送到Route和Mcast服务。因为SD-Fabric强加了简化约束，即每个机架恰好对应一个IP子网，因此这么做很简单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更具体讨论问题，考虑到在第6章中描述的所有ONOS服务都可以通过RESTful API调用，或者通过封装了REST的&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;POST&lt;/code&gt;和&lt;code&gt;DELETE&lt;/code&gt;调用的CLI调用。下面通过CLI来举例说明(因为更容易理解)，可以通过查询Route Service了解现有路由，如下所示:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; routes&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;B: Best route, R: Resolved route&lt;br/&gt;&lt;br/&gt;Table: ipv4&lt;br/&gt;B R  Network            Next Hop        Source (Node)&lt;br/&gt;     0.0.0.0/0          172.16.0.1      FPM (127.0.0.1)&lt;br/&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; *  1.1.0.0/18         10.0.1.20       STATIC&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; *  10.0.99.0/24       10.0.1.1        FPM (127.0.0.1)&lt;/span&gt;&lt;br/&gt;  *  10.0.99.0/24       10.0.6.1        FPM (127.0.0.1)&lt;br/&gt;   Total: 2&lt;br/&gt;&lt;br/&gt;Table: ipv6&lt;br/&gt;B R  Network                   Next Hop                  Source (Node)&lt;br/&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; *  2000::7700/120            fe80::288:ff:fe00:1       FPM (127.0.0.1)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; *  2000::8800/120            fe80::288:ff:fe00:2       FPM (127.0.0.1)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; *  2000::9900/120            fe80::288:ff:fe00:1       FPM (127.0.0.1)&lt;/span&gt;&lt;br/&gt;  *  2000::9900/120            fe80::288:ff:fe00:2       FPM (127.0.0.1)&lt;br/&gt;   Total: 3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以给Route Service添加一个类似的静态路由:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; route-add &amp;lt;prefix&amp;gt; &amp;lt;nexthop&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; route-add 1.1.0.0/18 10.0.1.20 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; route-add 2020::101/120 2000::1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意一点，路由有两种可能的源，一种是&lt;code&gt;STATIC&lt;/code&gt;，意味着SD-Fabric在插入路由时完全知道它分配给集群中每个机架的前缀。(运维人员也可以使用CLI添加&lt;code&gt;STATIC&lt;/code&gt;路由，但这只是一个例外，而不是规则。)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种源是&lt;code&gt;FPM&lt;/code&gt;。FPM(转发平面管理器, Forwarding Plane Manager)是另一个ONOS服务，属于SD-Fabric服务套件之一。它负责从外部源学习路由，输入给被配置为BGP邻区的本地Quagga进程。每当FPM学习到外部路由，就会向Route Service添加相应的基于前缀的下一跳映射，表明通过连接网络和上游的叶交换机(例如图39中的交换机3和4)，目的地前缀是可达的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多播的情况与此类似，使用同样的ONOS CLI可以创建新的多播路由并添加聚合器。例如:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; mcast-host-join -sAddr *&lt;/span&gt;&lt;br/&gt;    -gAddr 224.0.0.1&lt;br/&gt;    -srcs 00:AA:00:00:00:01/None&lt;br/&gt;    -srcs 00:AA:00:00:00:05/None&lt;br/&gt;    -sinks 00:AA:00:00:00:03/None&lt;br/&gt;    -sinks 00:CC:00:00:00:01/None&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该示例指定&lt;em&gt;ASM (Any-Source Multicast)&lt;/em&gt; (&lt;code&gt;sAddr *&lt;/code&gt;)、组播组地址(&lt;code&gt;gAddr&lt;/code&gt;)、组源地址(&lt;code&gt;srcs&lt;/code&gt;)和组聚合地址(&lt;code&gt;sinks&lt;/code&gt;)。聚合地址可以通过如下指令移除:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;onos&amp;gt;&lt;/span&gt;&lt;span&gt; mcast-sink-delete -sAddr *&lt;/span&gt;&lt;br/&gt;    -gAddr 224.0.0.1&lt;br/&gt;    -h  00:AA:00:00:00:03/None&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里同样没有运行PIM，但是SD-Fabric为网络运维人员提供了编程接口，通过一系列这样的调用来定义多播树。例如，当SD-Fabric作为向订户发送IPTV的接入网络的一部分运行时，一种选择是让运营商机顶盒发出类似上面所示的调用(当然，使用RESTful API而不是CLI)。另一种选择是让机顶盒发送IGMP消息，SD-Fabric通过Packet Service(类似于拦截ARP和DHCP报文的Host Service)拦截IGMP消息。因此，当你下一次使用电视遥控器转换频道时，可能就在本书介绍的SDN软件栈上触发了过程调用!&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.4 定制转发(Customized Forwarding)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SD-Fabric是SDN的典型用例，它是一组运行在网络操作系统(Network OS)上控制程序，这些控制程序又运行在一组可编程交换机上，这些交换机以叶脊拓扑的架构连接，每个交换机运行本地交换机操作系统。通过这种方式，SD-Fabric位于自下而上的SDN软件栈的顶点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果我们从一开始就知道支持SD-Fabric特性集的叶脊网络正是我们想要的，那么可能会回到较低的层级，并以此为目的进行调整。随着时间的推移，这就是SD-Fabric所发生的情况，产生了一个名为&lt;code&gt;fabric.p4&lt;/code&gt;的P4程序实现了定制转发平面。我们通过对&lt;code&gt;fabric.p4&lt;/code&gt;的概要总结来结束本章，重点介绍其设计如何与软件栈的其他部分相结合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在此之前，必须认识到，一开始就清楚知道想从网络中获得什么是非常高的标准。网络的发展基于使用和运维的经验，没人从一开始就知道如何编写&lt;code&gt;fabric.p4&lt;/code&gt;，但在整个软件栈的其他层实现了一系列迭代之后(包括引入Tofino作为可编程转发流水线)，&lt;code&gt;fabric.p4&lt;/code&gt;出现了。&lt;em&gt;关键点是，可编程平台使我们能够不断、快速的实现网络的演进&lt;/em&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换句话说，我们在第4章中提到的&lt;code&gt;forard.p4&lt;/code&gt;是&quot;按照我们想要的方式定制转发平面&quot;的典型例子，但该章剩余部分都在讨论无需重新实现特定网络的功能使&lt;code&gt;forward.p4&lt;/code&gt;成为可能的所有机制。简言之，&lt;code&gt;fabric.p4&lt;/code&gt;是&lt;code&gt;forward.p4&lt;/code&gt;的一个具体例子，不过我们现在只介绍了它与控制平面的关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于&lt;code&gt;fabric.p4&lt;/code&gt;有三件事情值得注意。首先，虽然它基于Broadcom OF-DPA流水线，但是松耦合的。这很有意义，因为SD-Fabric最初是在一组基于Tomahawk的交换机上实现的。&lt;code&gt;fabric.p4&lt;/code&gt;流水线比OF-DPA更简单，消除了SD-Fabric不需要的表，从而使得&lt;code&gt;fabric.p4&lt;/code&gt;更容易控制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次，&lt;code&gt;fabric.p4&lt;/code&gt;被设计来模拟ONOS的FlowObjective API，从而简化了将FlowObjective映射到P4Runtime的过程。图41显示了&lt;code&gt;fabric.p4&lt;/code&gt;的入口流水线，虽然没有显示出口流水线，但在一般情况下，只是对头字段的简单重写。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8797953964194374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0Wrh4F66vU25Muu70coYGUyaEtxlBMpQ2UvQNYLn4mqZvo3NWyeX3fNKh5qx3bkLHDJpib7aicNldgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;391&quot;/&gt;&lt;figcaption&gt;图41. 由&lt;code&gt;fabric.p4&lt;/code&gt;支持的逻辑流水线，用于对FlowObjective API的Filtering, Forwarding和Next阶段的并行处理。&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，&lt;code&gt;fabric.p4&lt;/code&gt;被设计为可配置的，从而可以有选择的包含额外的功能。在编写基于ASIC的转发流水线进行优化的代码时，这并不容易，而且在实践中会大量使用预处理条件(例如，&lt;code&gt;#ifdefs&lt;/code&gt;)。下面显示的代码片段是&lt;code&gt;fabric.p4&lt;/code&gt;的入口函数的主要控制块。第9章将在较高层次上更深入讨论下面这些可选扩展:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;UPF(用户平面功能, User Plane Function):&lt;/strong&gt; 增强IP功能，支持4G/5G移动网络。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;BNG(宽带网络网关, Broadband Network Gateway):&lt;/strong&gt; 增强IP功能，支持光纤到家。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;INT(带内网络遥测, Inband Network Telemetry):&lt;/strong&gt; 增加度量收集和遥测输出指令。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;apply {&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifdef&lt;/span&gt; UPF&lt;/span&gt;&lt;br/&gt;    upf_normalizer.apply(hdr.gtpu.isValid(), hdr.gtpu_ipv4,&lt;br/&gt; hdr.gtpu_udp, hdr.ipv4, hdr.udp, hdr.inner_ipv4,&lt;br/&gt; hdr.inner_udp);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// UPF&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// Filtering Objective&lt;/span&gt;&lt;br/&gt;    pkt_io_ingress.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;    filtering.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifdef&lt;/span&gt; UPF&lt;/span&gt;&lt;br/&gt;    upf_ingress.apply(hdr.gtpu_ipv4, hdr.gtpu_udp, hdr.gtpu,&lt;br/&gt; hdr.ipv4, hdr.udp, fabric_metadata, standard_metadata);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// UPF&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// Forwarding Objective&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (fabric_metadata.skip_forwarding == _FALSE) {&lt;br/&gt;        forwarding.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;    }&lt;br/&gt;    acl.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// Next Objective&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (fabric_metadata.skip_next == _FALSE) {&lt;br/&gt;        next.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;if&lt;/span&gt; defined INT&lt;/span&gt;&lt;br/&gt;        process_set_source_sink.apply(hdr, fabric_metadata,&lt;br/&gt;     standard_metadata);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// INT&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    } &lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifdef&lt;/span&gt; BNG&lt;/span&gt;&lt;br/&gt;    bng_ingress.apply(hdr, fabric_metadata, standard_metadata);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt; &lt;span&gt;// BNG&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，&lt;code&gt;upf.p4&lt;/code&gt;(未显示)实现了UPF扩展的转发平面，支持包括3GPP蜂窝网络标准要求的GTP隧道封装/解封装，将SD-Fabric网络连接到无线接入网络基站。同样，&lt;code&gt;bng.p4&lt;/code&gt;(未显示)实现PPPoE终端，一些无源光网络部署通过它将SD-Fabric网络连接到家庭路由器。最后，这段没什么实际意义的代码片段介绍了&lt;code&gt;fabric.p4&lt;/code&gt;核心功能的基本结构。首先应用&lt;em&gt;filtering对象&lt;/em&gt;(&lt;code&gt;filtering.apply&lt;/code&gt;)，然后应用&lt;em&gt;forwarding对象&lt;/em&gt;(&lt;code&gt;forwarding.apply&lt;/code&gt;和&lt;code&gt;acl.apply&lt;/code&gt;)，最后应用&lt;em&gt;next对象&lt;/em&gt;(&lt;code&gt;next.apply&lt;/code&gt;)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了选择包含哪些扩展之外，预处理器还定义了几个常量，包括每个逻辑表的大小。显然，这种实现是构建可配置转发流水线的底层方法。设计更高级的语言结构，包括在运行时向流水线动态添加功能的能力，还是一个未完成的研究课题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;VNF卸载&lt;/p&gt;&lt;p&gt;&lt;em&gt;UPF和BNG扩展是被称为VNF卸载的优化技术的例子。VNF是虚拟网络功能(Virtual Network Function)的缩写，指的是在虚拟机中作为软件运行的功能。卸载是指重新实现该功能，使其运行在交换机转发流水线中，而不是在通用服务器上。通过这种方式，数据包可以从源直接转发到目的地，而不必被服务器处理，因此通常会提供更好的性能。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;调用UPF和BNG等功能作为卸载&quot;优化&quot;可以说是选择性记忆的一个例子。准确的说，我们把IP转发能力放到了交换机上，而不是通过运行在通用处理器上的软件处理。简单来说，UPF和BNG是专门的IP路由器，分别提供蜂窝和有线接入网络的特定功能。从宏观上讲，网络是由转发功能的一组组合构建而成的，我们现在有了更多选择，可以选择实现每个转发功能的最合适的硬件芯片。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Software-Defined Networks: A Systems Approach: &lt;em&gt;https://sdn.systemsapproach.org/index.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;SD-Fabric: &lt;em&gt;https://opennetworking.org/sd-fabric&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Multi-Protocol Label Switching: &lt;em&gt;https://book.systemsapproach.org/scaling/mpls.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f3369e526a083b3c15a493db4c862cba</guid>
<title>明明加了唯一索引，为什么还是产生重复数据？</title>
<link>https://toutiao.io/k/18ha9kp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间我踩过一个坑：在&lt;code&gt;mysql8&lt;/code&gt;的一张&lt;code&gt;innodb&lt;/code&gt;引擎的&lt;code&gt;表&lt;/code&gt;中，加了&lt;code&gt;唯一索引&lt;/code&gt;，但最后发现&lt;code&gt;数据&lt;/code&gt;竟然还是&lt;code&gt;重复&lt;/code&gt;了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到底怎么回事呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文通过一次踩坑经历，聊聊唯一索引，一些有意思的知识点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6843971631205674&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaV2kTJTudFHCMtcpoxjkiaP7PKKJD6Bjh4fhDd2pNyNcB3BBbiaK0fFAicQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;1.还原问题现场&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间，为了防止商品组产生重复的数据，我专门加了一张&lt;code&gt;防重表&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果大家对防重表，比较感兴趣，可以看看我的另一篇文章 《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&amp;amp;mid=2247495570&amp;amp;idx=1&amp;amp;sn=eed3102c7dffc4ddbc59844dd9b865a5&amp;amp;chksm=c0e8377af79fbe6c29aefa3ae3aab48c6459b673005e2f97ae402172f6e5cdf8573aea5e7663&amp;amp;token=758132007&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;高并发下如何防重？&lt;/a&gt;》，里面有详细的介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题就出在商品组的防重表上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体表结构如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; &lt;span&gt;`product_group_unique`&lt;/span&gt; (&lt;br/&gt;  &lt;span&gt;`id`&lt;/span&gt; &lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`category_id`&lt;/span&gt; &lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`unit_id`&lt;/span&gt; &lt;span&gt;bigint&lt;/span&gt; &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`model_hash`&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;COLLATE&lt;/span&gt; utf8mb4_bin &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`in_date`&lt;/span&gt; datetime &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;  PRIMARY &lt;span&gt;KEY&lt;/span&gt; (&lt;span&gt;`id`&lt;/span&gt;)&lt;br/&gt;) &lt;span&gt;ENGINE&lt;/span&gt;=&lt;span&gt;InnoDB&lt;/span&gt; &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;CHARSET&lt;/span&gt;=utf8mb4 &lt;span&gt;COLLATE&lt;/span&gt;=utf8mb4_bin;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证数据的&lt;code&gt;唯一性&lt;/code&gt;，我给那种商品组防重表，建了唯一索引：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;alter&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; product_group_unique &lt;span&gt;add&lt;/span&gt; &lt;span&gt;unique&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; &lt;br/&gt;ux_category_unit_model(category_id,unit_id,model_hash);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据分类编号、单位编号和商品组属性的hash值，可以唯一确定一个商品组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给商品组防重表创建了&lt;code&gt;唯一索引&lt;/code&gt;之后，第二天查看数据，发现该表中竟然产生了重复的数据：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17824074074074073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaVyEM4C4nKnHwWricgfSoQIgF5SsbmEPp2ZGyxj7XZibaeLqBqAxd9eQUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;表中第二条数据和第三条数据重复了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是为什么呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot; data-remoteid=&quot;c1659667113645&quot;&gt;&lt;strong&gt;&lt;span&gt;2.唯一索引字段包含null&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你仔细查看表中的数据，会发现其中一个比较特殊地方：商品组属性的hash值（model_hash字段）可能为&lt;code&gt;null&lt;/code&gt;，即商品组允许不配置任何属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在product_group_unique表中插入了一条model_hash字段等于100的重复数据：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13800904977375567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaVSicUyRyOnibLc3BrNE02WZNzmFgUvlicPcJvcm5icMfA2aYeGiaRSZS8Ljw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot;/&gt;执行结果：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3004807692307692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaViafHT4SWeib0RqzbTvPHD2qIXZsYn9VcPY4sicXImTB57IzIHjWxgpgdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;从上图中看出，mysql的唯一性约束生效了，重复数据被拦截了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们再插入两条model_hash为null的数据，其中第三条数据跟第二条数据中category_id、unit_id和model_hash字段值都一样。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17824074074074073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaVyEM4C4nKnHwWricgfSoQIgF5SsbmEPp2ZGyxj7XZibaeLqBqAxd9eQUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;从图中看出，竟然执行成功了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换句话说，如果唯一索引的字段中，出现了null值，则唯一性约束不会生效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终插入的数据情况是这样的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当model_hash字段不为空时，不会产生重复的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当model_hash字段为空时，会生成重复的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们需要特别注意：创建唯一索引的字段，都不能允许为null，否则mysql的唯一性约束可能会失效。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot; data-remoteid=&quot;c1659667113649&quot;&gt;&lt;span&gt;&lt;strong&gt;3.逻辑删除表加唯一索引&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道唯一索引非常简单好用，但有时候，在表中它并不好加。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不信，我们一起往下看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常情况下，要删除表的某条记录的话，如果用&lt;code&gt;delete&lt;/code&gt;语句操作的话。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-remoteid=&quot;c1659667113650&quot;/&gt;&lt;code&gt;&lt;span&gt;delete&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; product &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;123&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种delete操作是&lt;code&gt;物理删除&lt;/code&gt;，即该记录被删除之后，后续通过sql语句基本查不出来。（不过通过其他技术手段可以找回，那是后话了）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有另外一种是&lt;code&gt;逻辑删除&lt;/code&gt;，主要是通过&lt;code&gt;update&lt;/code&gt;语句操作的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-remoteid=&quot;c1659667113651&quot;/&gt;&lt;code&gt;&lt;span&gt;update&lt;/span&gt; product &lt;span&gt;set&lt;/span&gt; delete_status=&lt;span&gt;1&lt;/span&gt;,edit_time=&lt;span&gt;now&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;br/&gt;&lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;123&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逻辑删除需要在表中额外增加一个删除状态字段，用于记录数据是否被删除。在所有的业务查询的地方，都需要过滤掉已经删除的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过这种方式删除数据之后，数据任然还在表中，只是从逻辑上过滤了删除状态的数据而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实对于这种逻辑删除的表，是没法加唯一索引的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设之前给商品表中的&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;model&lt;/code&gt;加了唯一索引，如果用户把某条记录删除了，delete_status设置成1了。后来，该用户发现不对，又重新添加了一模一样的商品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于唯一索引的存在，该用户第二次添加商品会失败，即使该商品已经被删除了，也没法再添加了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题显然有点严重。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有人可能会说：把&lt;code&gt;name&lt;/code&gt;、&lt;code&gt;model&lt;/code&gt;和&lt;code&gt;delete_status&lt;/code&gt;三个字段同时做成&lt;code&gt;唯一索引&lt;/code&gt;不就行了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：这样做确实可以解决用户逻辑删除了某个商品，后来又重新添加相同的商品时，添加不了的问题。但如果第二次添加的商品，又被删除了。该用户第三次添加相同的商品，不也出现问题了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可见，如果表中有逻辑删除功能，是不方便创建唯一索引的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果真的想给包含逻辑删除的表，增加唯一索引，该怎么办呢？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 删除状态+1&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过前面知道，如果表中有逻辑删除功能，是不方便创建唯一索引的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其根本原因是，记录被删除之后，delete_status会被设置成1，默认是0。相同的记录第二次删除的时候，delete_status被设置成1，但由于创建了唯一索引（把name、model和delete_status三个字段同时做成唯一索引），数据库中已存在delete_status为1的记录，所以这次会操作失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们为啥不换一种思考：不要纠结于delete_status为1，表示删除，当delete_status为1、2、3等等，只要大于1都表示删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的话，每次删除都获取那条相同记录的最大删除状态，然后加1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样数据操作过程变成：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;添加记录a，delete_status=0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除记录a，delete_status=1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加记录a，delete_status=0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除记录a，delete_status=2。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加记录a，delete_status=0。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;删除记录a，delete_status=3。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于记录a，每次删除时，delete_status都不一样，所以可以保证唯一性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案的优点是：不用调整字段，非常简单和直接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点是：可能需要修改sql逻辑，特别是有些查询sql语句，有些使用delete_status=1判断删除状态的，需要改成delete_status&amp;gt;=1。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 增加时间戳字段&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;导致逻辑删除表，不好加唯一索引最根本的地方在逻辑删除那里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们为什么不加个字段，专门处理逻辑删除的功能呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：可以增加&lt;code&gt;时间戳&lt;/code&gt;字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把name、model、delete_status和timeStamp，四个字段同时做成唯一索引&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在添加数据时，timeStamp字段写入默认值&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后一旦有逻辑删除操作，则自动往该字段写入时间戳。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样即使是同一条记录，逻辑删除多次，每次生成的时间戳也不一样，也能保证数据的唯一性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间戳一般精确到&lt;code&gt;秒&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除非在那种极限并发的场景下，对同一条记录，两次不同的逻辑删除操作，产生了相同的时间戳。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时可以将时间戳精确到&lt;code&gt;毫秒&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案的优点是：可以在不改变已有代码逻辑的基础上，通过增加新字段实现了数据的唯一性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点是：在极限的情况下，可能还是会产生重复数据。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 增加id字段&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，增加时间戳字段基本可以解决问题。但在在极限的情况下，可能还是会产生重复数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有办法解决这个问题呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：增加&lt;code&gt;主键&lt;/code&gt;字段：delete_id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案的思路跟增加时间戳字段一致，即在添加数据时给delete_id设置默认值1，然后在逻辑删除时，给delete_id赋值成当前记录的主键id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把name、model、delete_status和delete_id，四个字段同时做成唯一索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可能是最优方案，无需修改已有删除逻辑，也能保证数据的唯一性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot; data-remoteid=&quot;c1659667113655&quot;&gt;&lt;span&gt;&lt;strong&gt;4. 重复历史数据如何加唯一索引？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面聊过如果表中有逻辑删除功能，不太好加唯一索引，但通过文中介绍的三种方案，可以顺利的加上唯一索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但来自灵魂的一问：如果某张表中，已存在&lt;code&gt;历史重复数据&lt;/code&gt;，该如何加索引呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最简单的做法是，增加一张&lt;code&gt;防重表&lt;/code&gt;，然后把数据初始化进去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以写一条类似这样的sql：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-remoteid=&quot;c1659667113656&quot;/&gt;&lt;code&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; product_unqiue(&lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt;,category_id,unit_id,&lt;span&gt;model&lt;/span&gt;) &lt;br/&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;max&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;), &lt;span&gt;select&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;,category_id,unit_id,&lt;span&gt;model&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; product&lt;br/&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;,category_id,unit_id,&lt;span&gt;model&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做可以是可以，但今天的主题是直接在原表中加唯一索引，不用防重表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，这个唯一索引该怎么加呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实可以借鉴上一节中，增加&lt;code&gt;id&lt;/code&gt;字段的思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;增加一个delete_id字段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过在给product表创建唯一索引之前，先要做数据处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取相同记录的最大id：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-remoteid=&quot;c1659667113657&quot;/&gt;&lt;code&gt;&lt;span&gt;select &lt;span&gt;max&lt;/span&gt;&lt;span&gt;(id)&lt;/span&gt;, select name,category_id,unit_id,model from product&lt;br/&gt;group by name,category_id,unit_id,model&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后将delete_id字段设置成1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后将其他的相同记录的delete_id字段，设置成当前的主键。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能区分历史的重复数据了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当所有的delete_id字段都设置了值之后，就能给name、model、delete_status和delete_id，四个字段加唯一索引了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完美。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot; data-remoteid=&quot;c1659667113658&quot;&gt;&lt;span&gt;&lt;strong&gt;5.给大字段加唯一索引&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们聊一个有趣的话题：如何给大字段增加唯一索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，我们需要给几个字段同时加一个唯一索引，比如给name、model、delete_status和delete_id等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果model字段很大，这样就会导致该唯一索引，可能会占用较多存储空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道唯一索引，也会走索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在索引的各个节点中存大数据，检索效率会非常低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此，有必要对唯一索引长度做限制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前mysql innodb存储引擎中索引允许的最大长度是3072 bytes，其中unqiue key最大长度是1000 bytes。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果字段太大了，超过了1000 bytes，显然是没法加唯一索引的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，有没有解决办法呢？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.1 增加hash字段&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以增加一个hash字段，取大字段的hash值，生成一个较短的新值。该值可以通过一些hash算法生成，固定长度16位或者32位等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只需要给name、hash、delete_status和delete_id字段，增加唯一索引。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样就能避免唯一索引太长的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但它也会带来一个新问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般hash算法会产生hash冲突，即两个不同的值，通过hash算法生成值相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然如果还有其他字段可以区分，比如：name，并且业务上允许这种重复的数据，不写入数据库，该方案也是可行的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2 不加唯一索引&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果实在不好加唯一索引，就不加唯一索引，通过其他技术手段保证唯一性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果新增数据的入口比较少，比如只有job，或者数据导入，可以单线程顺序执行，这样就能保证表中的数据不重复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果新增数据的入口比较多，最终都发mq消息，在mq消费者中单线程处理。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.3 redis分布式锁&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于字段太大了，在mysql中不好加唯一索引，为什么不用&lt;code&gt;redis分布式锁&lt;/code&gt;呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但如果直接加给name、model、delete_status和delete_id字段，加&lt;code&gt;redis分布式锁&lt;/code&gt;，显然没啥意义，效率也不会高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以结合5.1章节，用name、model、delete_status和delete_id字段，生成一个hash值，然后给这个新值加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即使遇到hash冲突也没关系，在并发的情况下，毕竟是小概率事件。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.112033195020747&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5h0fXib0knGRicz0mvfnhSPaVuQFjPOicrkYMV6uh5K8qTzVy19CCIFmySSiblIV6Rgree6OXjDqym4Sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;482&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot; data-remoteid=&quot;c1659667113663&quot;&gt;&lt;span&gt;&lt;strong&gt;6.批量插入数据&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些小伙们，可能认为，既然有redis分布式锁了，就可以不用唯一索引了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那是你没遇到，批量插入数据的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如通过查询操作之后，发现有一个集合：list的数据，需要批量插入数据库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用redis分布式锁，需要这样操作：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-remoteid=&quot;c1659667113664&quot;/&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt;(Product product: list) {&lt;br/&gt;   &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        String hash = hash(product);&lt;br/&gt;        rLock.lock(hash);&lt;br/&gt;        &lt;span&gt;//查询数据&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;//插入数据&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;       log.error(e);&lt;br/&gt;    } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;        rLock.unlock();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要在一个循环中，给每条数据都加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样性能肯定不会好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然有些小伙伴持反对意见，说使用redis的&lt;code&gt;pipeline&lt;/code&gt;批量操作不就可以了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是一次性给500条，或者1000条数据上锁，最后使用完一次性释放这些锁？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想想都有点不靠谱，这个锁得有多大呀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;极容易造成锁超时，比如业务代码都没有执行完，锁的过期时间就已经到了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种批量操作，如果此时使用mysql的唯一索引，直接批量insert即可，一条sql语句就能搞定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库会自动判断，如果存在重复的数据，会报错。如果不存在重复数据，才允许插入数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651513306&amp;amp;idx=1&amp;amp;sn=5090d25f4c0080a201a13c07a8c6b542&amp;amp;chksm=bd258da58a5204b3e9fd6a36ef5dea0d573a5ee5aa6d9cf7837ab5ebb16967be1ad1ea874638&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;记一次因索引合并导致的MySQL死锁分析过程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;记一次因索引合并导致的MySQL死锁分析过程&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651509874&amp;amp;idx=1&amp;amp;sn=bad9e3a655c722f18ffc503e236839f1&amp;amp;chksm=bd25b80d8a52311bdabcb826b1ffa70cc56ab7a7918e6d12e28f8139198a0f2f60ab2fbc1695&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;普通索引 PK 唯一性索引，用哪个好？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;普通索引 PK 唯一性索引，用哪个好？&lt;/a&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2ea4bbcc2078532cbea50644608be231</guid>
<title>一张图，详解大数据技术架构</title>
<link>https://toutiao.io/k/6ikz89j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDI0NDg1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/yOK5gyhLaq9FdibKe7tlzu5Uiay4icYKUrduOGV1UNMricEtY8fRZic5umDuHGbV7Qick75HiaWiaGJqSpDWzicovsgmpLg/0?wx_fmt=png&quot; data-nickname=&quot;大数据架构师&quot; data-alias=&quot;bigdata_arch&quot; data-signature=&quot;我们是一群好彭友，一起分享大量干货，包括数字化转型、大数据技术及架构、数据管理、项目方案、数据仓库、数据分析技巧。欢迎关注，与5万数据人一起成长！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;       &lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7549132947976879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p2v54xNeNEZyzeQaHVczNECxNtdbqFOq65LelibiawduCicnu8BtPPoHep3uH0d7M77eh7eicj9MhLZUpO6dxkxo8Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;865&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这是某公司使用的大数据平台架构图，大部分公司应该都差不多。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从这张大数据的整体架构图上看来，大数据的核心层应该是：数据采集层、数据存储与分析层、数据共享层、数据应用层，可能叫法有所不同，本质上的角色都大同小异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我下面就按这张架构图上的线索，慢慢来剖析一下，大数据的核心技术都包括什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大数据采集&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据采集的任务就是把数据从各种数据源中采集和存储到数据存储上，期间有可能会做一些简单的清洗。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;数据源的种类比较多：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、网站日志&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;作为互联网行业，网站日志占的份额最大，网站日志存储在多台网站日志服务器上，一般是在每台网站日志服务器上部署flume agent，实时的收集网站日志并存储到HDFS上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、业务数据库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;业务数据库的种类也是多种多样，有Mysql、Oracle、SqlServer等，这时候，我们迫切的需要一种能从各种数据库中将数据同步到HDFS上的工具，Sqoop是一种，但是Sqoop太过繁重，而且不管数据量大小，都需要启动MapReduce来执行，而且需要Hadoop集群的每台机器都能访问业务数据库；应对此场景，淘宝开源的DataX，是一个很好的解决方案，有资源的话，可以基于DataX之上做二次开发，就能非常好的解决。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.550561797752809&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEZyzeQaHVczNECxNtdbqFOq1M7piahPmiaiaJ1X90ZYxSDxYILkiakUIN31lAZdXNLm3icibPCia5h2wIB0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;979&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当然，Flume通过配置与开发，也可以实时的从数据库中同步数据到HDFS。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、来自于Ftp/Http的数据源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有可能一些合作伙伴提供的数据，需要通过Ftp/Http等定时获取，DataX也可以满足该需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4、其他数据源&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;比如一些手工录入的数据，只需要提供一个接口或小程序，即可完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大数据存储与分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;毋庸置疑，HDFS是大数据环境下数据仓库/数据平台最完美的数据存储解决方案。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;离线数据分析与计算，也就是对实时性要求不高的部分，在笔者看来，Hive还是首当其冲的选择，丰富的数据类型、内置函数；压缩比非常高的ORC文件存储格式；非常方便的SQL支持，使得Hive在基于结构化数据上的统计分析远远比MapReduce要高效的多，一句SQL可以完成的需求，开发MR可能需要上百行代码；&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5114285714285715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEZyzeQaHVczNECxNtdbqFOqhfO5NMrfQsG3rU9exNLBjMSZTWqkxoT9KPpLm81hJoBTsiaiatLicTrGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，使用Hadoop框架自然而然也提供了MapReduce接口，如果真的很乐意开发Java，或者对SQL不熟，那么也可以使用MapReduce来做分析与计算；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark是这两年非常火的，经过实践，它的性能的确比MapReduce要好很多，而且和Hive、Yarn结合的越来越好，因此，必须支持使用Spark和SparkSQL来做分析和计算。因为已经有Hadoop Yarn，使用Spark其实是非常容易的，不用单独部署Spark集群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大数据共享&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里的数据共享，其实指的是前面数据分析与计算后的结果存放的地方，其实就是关系型数据库和NOSQL数据库；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面使用Hive、MR、Spark、SparkSQL分析和计算的结果，还是在HDFS上，但大多业务和应用不可能直接从HDFS上获取数据，那么就需要一个数据共享的地方，使得各业务和产品能方便的获取数据；和数据采集层到HDFS刚好相反，这里需要一个从HDFS将数据同步至其他目标数据源的工具，同样，DataX也可以满足。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，一些实时计算的结果数据可能由实时计算模块直接写入数据共享。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大数据应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1、业务产品（CRM、ERP等）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务产品所使用的数据，已经存在于数据共享层，直接从数据共享层访问即可；&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、报表（FineReport、业务报表）&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同业务产品，报表所使用的数据，一般也是已经统计汇总好的，存放于数据共享层；&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3、即席查询&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;即席查询的用户有很多，有可能是数据开发人员、网站和产品运营人员、数据分析人员、甚至是部门老大，他们都有即席查询数据的需求；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种即席查询通常是现有的报表和数据共享层的数据并不能满足他们的需求，需要从数据存储层直接查询。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;即席查询一般是通过SQL完成，最大的难度在于响应速度上，使用Hive有点慢，可以用SparkSQL，它的响应速度较Hive快很多，而且能很好的与Hive兼容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，你也可以使用Impala，如果不在乎平台中再多一个框架的话。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4、OLAP&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前，很多的OLAP工具不能很好的支持从HDFS上直接获取数据，都是通过将需要的数据同步到关系型数据库中做OLAP，但如果数据量巨大的话，关系型数据库显然不行；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时候，需要做相应的开发，从HDFS或者HBase中获取数据，完成OLAP的功能；比如：根据用户在界面上选择的不定的维度和指标，通过开发接口，从HBase中获取数据来展示。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5、其它数据接口&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种接口有通用的，有定制的。比如：一个从Redis中获取用户属性的接口是通用的，所有的业务都可以调用这个接口来获取用户属性。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实时数据计算&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;现在业务对数据仓库实时性的需求越来越多，比如：实时的了解网站的整体流量；实时的获取一个广告的曝光和点击；在海量数据下，依靠传统数据库和传统实现方法基本完成不了，需要的是一种分布式的、高吞吐量的、延时低的、高可靠的实时计算框架；Storm在这块是比较成熟了，但我选择Spark Streaming，原因很简单，不想多引入一个框架到平台中，另外，Spark Streaming比Storm延时性高那么一点点，那对于我们的需要可以忽略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们目前使用Spark Streaming实现了实时的网站流量统计、实时的广告效果统计两块功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做法也很简单，由Flume在前端日志服务器上收集网站日志和广告日志，实时的发送给Spark Streaming，由Spark Streaming完成统计，将数据存储至Redis，业务通过访问Redis实时获取。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;—&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;strong/&gt;&lt;/h1&gt;&lt;h1 data-track=&quot;46&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;任务调度与监控&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在数据仓库/数据平台中，有各种各样非常多的程序和任务，比如：数据采集任务、数据同步任务、数据分析任务等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些任务除了定时调度，还存在非常复杂的任务依赖关系，比如：数据分析任务必须等相应的数据采集任务完成后才能开始；数据同步任务需要等数据分析任务完成后才能开始；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就需要一个非常完善的任务调度与监控系统，它作为数据仓库/数据平台的中枢，负责调度和监控所有任务的分配与运行。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDI0NDg1OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/yOK5gyhLaq9FdibKe7tlzu5Uiay4icYKUrduOGV1UNMricEtY8fRZic5umDuHGbV7Qick75HiaWiaGJqSpDWzicovsgmpLg/0?wx_fmt=png&quot; data-nickname=&quot;大数据架构师&quot; data-alias=&quot;bigdata_arch&quot; data-signature=&quot;我们是一群好彭友，一起分享大量干货，包括数字化转型、大数据技术及架构、数据管理、项目方案、数据仓库、数据分析技巧。欢迎关注，与5万数据人一起成长！&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42452830188679247&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yOK5gyhLaqicSoW9ibIZXsbELc8riaCPy5aanEiclqFzIiaZv63pMorqxsmLhpt0wfYica7Q70icOJRJ8nwFRxGDkmcZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7f2b9da48f5581db867e6f74a4c01710</guid>
<title>这个技术总监，把 RabbitMQ 讲得那叫一个透彻，佩服！</title>
<link>https://toutiao.io/k/zsheoa9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;310&quot; data-backw=&quot;550&quot; data-ratio=&quot;0.564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/SQgibibsTCtKibaQFMDyqafbcIrxOq2vnQfb9sibkqX9vtvqnIDjE8HxEAV3skobca9BxZjkgr0VdWuOhP9OWAfq2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，我是涛哥。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;作为程序员，也不能天天太沉闷吧，有一些自己的爱好挺好，我的朋友楼仔很爱臭美，来看他在他家阳台唱王菲的《红豆》。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;来感受一下程序员楼仔同学 Men Sxx 而有趣的灵魂，觉得挺有意思，唱得不错，所以贴过来(&lt;/span&gt;&lt;span&gt;视频已经获得楼仔同学的授权&lt;/span&gt;&lt;span&gt;)：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAA810irrFusAAAAAstQy6ubaLX4KHWvLEZgBPE96EEDQZwFO6CzNPgMIsZJJlpY0TeC9urFXmQnRMW&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzSDhTClCCboJB2gNg76xmNfEGgXoOdRq7X2LqKQxHtiaxD2yZucRohH9ic4vEYLBanLYHkZrBiaDgxXzkhEPS0guBg&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibA5u9YZ04rgNPyXlQIuN4hunDjJGEuIxgAGg2s18ib7DBT5sxCSbLzlOW3lgyzgHiaLc&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/DSlmZVcJw0TE2Ek3jTppdtezPd6Q98iahUiazVKvtDDgQ/0&quot; data-username=&quot;v2_060000231003b20faec8c7ea8f19c6d7cf0ceb33b077b5895100c420d6b5d2ad53f47e5a8a81@finder&quot; data-nickname=&quot;楼仔人生&quot; data-desc=&quot;楼哥，你只会唱周杰伦的歌吧，哥可是全能，比如这首王菲的《红豆》，哈哈~~&quot; data-nonceid=&quot;18042734886853877033&quot; data-type=&quot;video&quot; data-width=&quot;1280&quot; data-height=&quot;720&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我也一直想学个乐器，这不，还没开始动手，囧囧囧 ... &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SQgibibsTCtKibaQFMDyqafbcIrxOq2vnQfSeqHoWOOhPx6lLzqY4L5aZ8zeuN2ERI1BQYrK0icZ3TjRUe5m4UEbFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;听完歌了，来聊技术。大家知道，我经常玩一些项目搭建的事情，自己平时做了很多有趣且实用的小项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;有很多读者和公众号号主朋友偶尔会找我沟通项目搭建的事情，他们其中有些也完成了一些项目学习，他们反馈收获还挺多，比如：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg5NDYzMDEyNQ==&amp;amp;mid=2247491724&amp;amp;idx=1&amp;amp;sn=de8d383a81fd781db6e7966fb79f67d9&amp;amp;chksm=c01e010ef7698818394f58dac107608d4d3b14d77d0dad8f53b05bcf5fcd40b540888df5c62f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;我竟然也做了一个支付系统啊？那叫一个炫酷 ~&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我竟然也做了一个支付系统啊？那叫一个炫酷(点击链接) ~&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;今天的这篇文章，主要聊消息队列。常见的消息队列很多，主要包括 RabbitMQ、Kafka、RocketMQ 和 ActiveMQ，相关的选型可以看我之前的系列，&lt;/span&gt;&lt;strong&gt;这篇文章只讲 RabbitMQ，先讲原理，后搞实战。&lt;/strong&gt;&lt;span&gt;直接上思维导图：&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0847029077117574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSL5cRfpJNPML2UIEeDHWf5tdj6Rc7Ep3QPjiaSwzMhU91hR72dYD73Vfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;791&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;1. 消息队列&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;1.1 消息队列模式&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息队列目前主要 2 种模式，分别为“点对点模式”和“发布/订阅模式”。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.1.1 点对点模式&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个具体的消息只能由一个消费者消费，多个生产者可以向同一个消息队列发送消息，但是一个消息在被一个消息者处理的时候，这个消息在队列上会被锁住或者被移除并且其他消费者无法处理该消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要额外注意的是，如果消费者处理一个消息失败了，消息系统一般会把这个消息放回队列，这样其他消费者可以继续处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30250990752972257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLaKTHNFbmRshmZtCMmVIDWuHO6303CPfhDe0azAUAFk1eIQG7LhUhxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;757&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1.1.2 发布/订阅模式&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单个消息可以被多个订阅者并发的获取和处理。一般来说，订阅有两种类型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;临时（ephemeral）订阅&lt;/strong&gt;：这种订阅只有在消费者启动并且运行的时候才存在。一旦消费者退出，相应的订阅以及尚未处理的消息就会丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;持久（durable）订阅&lt;/strong&gt;：这种订阅会一直存在，除非主动去删除。消费者退出后，消息系统会继续维护该订阅，并且后续消息可以被继续处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3006896551724138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLJCEZDaMHKMCicqOEWgS5PTpe4tpkeb0msIamDxJ7g2pJOQWzg8JXKwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;725&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;1.2 衡量标准&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对消息队列进行技术选型时，需要通过以下指标衡量你所选择的消息队列，是否可以满足你的需求：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息顺序&lt;/strong&gt;：发送到队列的消息，消费时是否可以保证消费的顺序，比如A先下单，B后下单，应该是A先去扣库存，B再去扣，顺序不能反。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息路由&lt;/strong&gt;：根据路由规则，只订阅匹配路由规则的消息，比如有A/B两者规则的消息，消费者可以只订阅A消息，B消息不会消费。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息可靠性：是否会存在丢消息的情况，比如有A/B两个消息，最后只有B消息能消费，A消息丢失。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息时序&lt;/strong&gt;：主要包括“消息存活时间”和“延迟/预定的消息”，“消息存活时间”表示生产者可以对消息设置TTL，如果超过该TTL，消息会自动消失；“延迟/预定的消息”指的是可以延迟或者预订消费消息，比如延时5分钟，那么消息会5分钟后才能让消费者消费，时间未到的话，是不能消费的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息留存&lt;/strong&gt;：消息消费成功后，是否还会继续保留在消息队列。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;容错性&lt;/strong&gt;：当一条消息消费失败后，是否有一些机制，保证这条消息是一种能成功，比如异步第三方退款消息，需要保证这条消息消费掉，才能确定给用户退款成功，所以必须保证这条消息消费成功的准确性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;伸缩&lt;/strong&gt;：当消息队列性能有问题，比如消费太慢，是否可以快速支持库容；当消费队列过多，浪费系统资源，是否可以支持缩容。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;：支持的最高并发数。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;2. RabbitMQ 原理初探&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RabbitMQ 2007 年发布，是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 基本概念&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到RabbitMQ，就不得不提AMQP协议。AMQP协议是具有现代特征的二进制协议。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先了解一下AMQP协议中间的几个重要概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Server：接收客户端的连接，实现AMQP实体服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Connection：连接，应用程序与Server的网络连接，TCP连接。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Channel：信道，消息读写等操作在信道中进行。客户端可以建立多个信道，每个信道代表一个会话任务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Message：消息，应用程序和服务器之间传送的数据，消息可以非常简单，也可以很复杂。由Properties和Body组成。Properties为外包装，可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body就是消息体内容。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Virtual Host：虚拟主机，用于逻辑隔离。一个虚拟主机里面可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名称的Exchange或Queue。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Exchange：交换器，接收消息，按照路由规则将消息路由到一个或者多个队列。如果路由不到，或者返回给生产者，或者直接丢弃。RabbitMQ常用的交换器常用类型有direct、topic、fanout、headers四种，后面详细介绍。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Binding：绑定，交换器和消息队列之间的虚拟连接，绑定中可以包含一个或者多个RoutingKey。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RoutingKey：路由键，生产者将消息发送给交换器的时候，会发送一个RoutingKey，用来指定路由规则，这样交换器就知道把消息发送到哪个队列。路由键通常为一个“.”分割的字符串，例如“com.rabbitmq”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Queue：消息队列，用来保存消息，供消费者消费。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 工作原理&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AMQP 协议模型由三部分组成：生产者、消费者和服务端，执行流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;生产者是连接到 Server，建立一个连接，开启一个信道。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者声明交换器和队列，设置相关属性，并通过路由键将交换器和队列进行绑定。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者也需要进行建立连接，开启信道等操作，便于接收消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者发送消息，发送到服务端中的虚拟主机。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虚拟主机中的交换器根据路由键选择路由规则，发送到不同的消息队列中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;订阅了消息队列的消费者就可以获取到消息，进行消费。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4993788819875776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLfGKVOuJwUEecElnO27UfgEORmamd6qnr7AZbNpXn8kLvjWkEwtWkjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1610&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 常用交换器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RabbitMQ常用的交换器类型有direct、topic、fanout、headers四种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Direct Exchange：见文知意，直连交换机意思是此交换机需要绑定一个队列，要求该消息与一个特定的路由键完全匹配。简单点说就是一对一的，点对点的发送。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4257493188010899&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLOEDMv7DlLR5XK5AaNmQjJicNural7bQlYL3cGibB0TUqA6mVhlqqKfMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1468&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Fanout Exchange：这种类型的交换机需要将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。简单点说就是发布订阅。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4558918222794591&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLmOPzRtptiagyIxB2gANA8zhExhXK9xKcHCtgzVJL2DngRK4lWj0nfGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1553&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Topic Exchange：直接翻译的话叫做主题交换机，如果从用法上面翻译可能叫通配符交换机会更加贴切。这种交换机是使用通配符去匹配，路由到对应的队列。通配符有两种：&quot;*&quot; 、 &quot;#&quot;。需要注意的是通配符前面必须要加上&quot;.&quot;符号。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;*符号：有且只匹配一个词。比如 a.*可以匹配到&quot;a.b&quot;、&quot;a.c&quot;，但是匹配不了&quot;a.b.c&quot;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;#符号：匹配一个或多个词。比如&quot;rabbit.#&quot;既可以匹配到&quot;rabbit.a.b&quot;、&quot;rabbit.a&quot;，也可以匹配到&quot;rabbit.a.b.c&quot;。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6012509773260359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSL6tdcfxDibT4x8jiaUfFzjAjbkBISLkF302AjbZ3COpnibdnz5BAicoicH1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1279&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Headers Exchange：这种交换机用的相对没这么多。它跟上面三种有点区别，它的路由不是用routingKey进行路由匹配，而是在匹配请求头中所带的键值进行路由。创建队列需要设置绑定的头部信息，有两种模式：全部匹配和部分匹配。如上图所示，交换机会根据生产者发送过来的头部信息携带的键值去匹配队列绑定的键值，路由到对应的队列。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.68046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLL0WkSsAlU7jwic8y84gKMEclWXTUYicHa4h9TS02bt1hicPJZbib09BX3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.4 消费原理&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看几个基本概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;broker：每个节点运行的服务程序，功能为维护该节点的队列的增删以及转发队列操作请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;master queue：每个队列都分为一个主队列和若干个镜像队列。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mirror queue：镜像队列，作为master queue的备份。在master queue所在节点挂掉之后，系统把mirror queue提升为master queue，负责处理客户端队列操作请求。注意，mirror queue只做镜像，设计目的不是为了承担客户端读写压力。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群中有两个节点，每个节点上有一个broker，每个broker负责本机上队列的维护，并且borker之间可以互相通信。集群中有两个队列A和B，每个队列都分为master queue和mirror queue（备份）。那么队列上的生产消费怎么实现的呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3989120580235721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLQe3iaJleYL1EmuN00KdaJ8qGgB9zP4PRIgRzZicCuzFDIG7Fn3p5RvdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1103&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于消费队列，如下图有两个consumer消费队列A，这两个consumer连在了集群的不同机器上。RabbitMQ集群中的任何一个节点都拥有集群上所有队列的元信息，所以连接到集群中的任何一个节点都可以，主要区别在于有的consumer连在master queue所在节点，有的连在非master queue节点上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为mirror queue要和master queue保持一致，故需要同步机制，正因为一致性的限制，导致所有的读写操作都必须都操作在master queue上（想想，为啥读也要从master queue中读？和数据库读写分离是不一样的），然后由master节点同步操作到mirror queue所在的节点。即使consumer连接到了非master queue节点，该consumer的操作也会被路由到master queue所在的节点上，这样才能进行消费。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4521178637200737&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLaRoOYUSQiboEMJSR7SHzPYF9djSJia9d1lM9LMGhJCQmCSKHf7Aib8plw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于生成队列，原理和消费一样，如果连接到非 master queue 节点，则路由过去。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45681381957773515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLQBcpdYF0GjOncSNGaaKxHN7ObOOqBE4MqibAQntd5FviaIY1XDBLBtTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所以，到这里小伙伴们就可以看到 RabbitMQ的不足：由于master queue单节点，导致性能瓶颈，吞吐量受限。虽然为了提高性能，内部使用了Erlang这个语言实现，但是终究摆脱不了架构设计上的致命缺陷。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.5 高级特性&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.5.1 过期时间&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Time To Live，也就是生存时间，是一条消息在队列中的最大存活时间，单位是毫秒，下面看看RabbitMQ过期时间特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RabbitMQ可以对消息和队列设置TTL。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RabbitMQ支持设置消息的过期时间，在消息发送的时候可以进行指定，每条消息的过期时间可以不同。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RabbitMQ支持设置队列的过期时间，从消息入队列开始计算，直到超过了队列的超时时间配置，那么消息会变成死信，自动清除。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果两种方式一起使用，则过期时间以两者中较小的那个数值为准。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当然也可以不设置TTL，不设置表示消息不会过期；如果设置为0，则表示除非此时可以直接将消息投递到消费者，否则该消息将被立即丢弃。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.5.2 消息确认&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证消息从队列可靠地到达消费者，RabbitMQ提供了消息确认机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者订阅队列的时候，可以指定autoAck参数，当autoAck为true的时候，RabbitMQ采用自动确认模式，RabbitMQ自动把发送出去的消息设置为确认，然后从内存或者硬盘中删除，而不管消费者是否真正消费到了这些消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当autoAck为false的时候，RabbitMQ会等待消费者回复的确认信号，收到确认信号之后才从内存或者磁盘中删除消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息确认机制是RabbitMQ消息可靠性投递的基础，只要设置autoAck参数为false，消费者就有足够的时间处理消息，不用担心处理消息的过程中消费者进程挂掉后消息丢失的问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.5.3 持久化&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息的可靠性是RabbitMQ的一大特色，那么RabbitMQ是如何保证消息可靠性的呢？答案就是消息持久化。持久化可以防止在异常情况下丢失数据。RabbitMQ的持久化分为三个部分：交换器持久化、队列持久化和消息的持久化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;交换器持久化可以通过在声明队列时将durable参数设置为true。如果交换器不设置持久化，那么在RabbitMQ服务重启之后，相关的交换器元数据会丢失，不过消息不会丢失，只是不能将消息发送到这个交换器了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;队列的持久化能保证其本身的元数据不会因异常情况而丢失，但是不能保证内部所存储的消息不会丢失。要确保消息不会丢失，需要将其设置为持久化。队列的持久化可以通过在声明队列时将durable参数设置为true。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置了队列和消息的持久化，当RabbitMQ服务重启之后，消息依然存在。如果只设置队列持久化或者消息持久化，重启之后消息都会消失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，也可以将所有的消息都设置为持久化，但是这样做会影响RabbitMQ的性能，因为磁盘的写入速度比内存的写入要慢得多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于可靠性不是那么高的消息可以不采用持久化处理以提高整体的吞吐量。鱼和熊掌不可兼得，关键在于选择和取舍。在实际中，需要根据实际情况在可靠性和吞吐量之间做一个权衡。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.5.4 死信队列&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当消息在一个队列中变成死信之后，他能被重新发送到另一个交换器中，这个交换器成为死信交换器，与该交换器绑定的队列称为死信队列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息变成死信有下面几种情况：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DLX也是一个正常的交换器，和一般的交换器没有区别，他能在任何的队列上面被指定，实际上就是设置某个队列的属性。当这个队列中有死信的时候，RabbitMQ会自动将这个消息重新发送到设置的交换器上，进而被路由到另一个队列，我们可以监听这个队列中消息做相应的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;死信队列有什么用？当发生异常的时候，消息不能够被消费者正常消费，被加入到了死信队列中。后续的程序可以根据死信队列中的内容分析当时发生的异常，进而改善和优化系统。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2.5.5 延迟队列&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般的队列，消息一旦进入队列就会被消费者立即消费。延迟队列就是进入该队列的消息会被消费者延迟消费，延迟队列中存储的对象是的延迟消息，“延迟消息”是指当消息被发送以后，等待特定的时间后，消费者才能拿到这个消息进行消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;延迟队列用于需要延迟工作的场景。最常见的使用场景：淘宝或者天猫我们都使用过，用户在下单之后通常有30分钟的时间进行支付，如果这30分钟之内没有支付成功，那么订单就会自动取消。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了延迟消费，延迟队列的典型应用场景还有延迟重试。比如消费者从队列里面消费消息失败了，可以延迟一段时间以后进行重试。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.6 特性分析&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里才是内容的重点，不仅需要知道Rabbit的特性，还需要知道支持这些特性的原因：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息路由（支持）&lt;/strong&gt;：RabbitMQ可以通过不同的交换器支持不同种类的消息路由；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息有序（不支持）&lt;/strong&gt;：当消费消息时，如果消费失败，消息会被放回队列，然后重新消费，这样会导致消息无序；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息时序（非常好）&lt;/strong&gt;：通过延时队列，可以指定消息的延时时间，过期时间TTL等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;容错处理（非常好）&lt;/strong&gt;：通过交付重试和死信交换器（DLX）来处理消息处理故障；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;伸缩（一般）&lt;/strong&gt;：伸缩其实没有非常智能，因为即使伸缩了，master queue还是只有一个，负载还是只有这一个master queue去抗，所以我理解RabbitMQ的伸缩很弱（个人理解）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;持久化（不太好）&lt;/strong&gt;：没有消费的消息，可以支持持久化，这个是为了保证机器宕机时消息可以恢复，但是消费过的消息，就会被马上删除，因为RabbitMQ设计时，就不是为了去存储历史数据的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息回溯（不支持）&lt;/strong&gt;：因为消息不支持永久保存，所以自然就不支持回溯。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高吞吐（中等）&lt;/strong&gt;：因为所有的请求的执行，最后都是在master queue，它的这个设计，导致单机性能达不到十万级的标准。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;3. RabbitMQ环境搭建&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我用的是Mac，所以直接可以参考官网：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://www.rabbitmq.com/install-homebrew.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，一定需要先执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;brew update&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后再执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;brew install rabbitmq&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;之前没有执行brew update，直接执行brew install rabbitmq时，会报各种各样奇怪的错误，其中“403 Forbidde”居多。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是在执行“brew install rabbitmq”，会自动安装其它的程序，如果你使用源码安装Rabbitmq，因为启动该服务依赖erlang环境，所以你还需手动安装erlang，但是目前官方已经一键给你搞定，会自动安装Rabbitmq依赖的所有程序，是不是很棒！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8125786163522013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLRgDl6W2qQxnoyhLcYDVJ8LOgrnUnEqzPE8Bwbonic9TtPOiaOJRIJQqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1590&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后执行成功的输出如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7472647702407003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLLM7LXibUxu6twuxWr12GPCA7J06xHsx1t26bYIMQX4ZFN2R811ZPALA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1828&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动服务：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 启动方式1：后台启动&lt;/span&gt;&lt;br/&gt;brew services start rabbitmq&lt;br/&gt;&lt;span&gt;# 启动方式2：当前窗口启动&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /usr/&lt;span&gt;local&lt;/span&gt;/Cellar/rabbitmq/3.8.19&lt;br/&gt;rabbitmq-server&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在浏览器输入：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;http://localhost:15672/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会出现RabbitMQ后台管理界面（用户名和密码都为guest）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7035019455252919&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLFCHbNANdOCE4iapJRCibLd4pJiaYMx9U5vU7M03XGWhsq2RJCn5oRHcsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1285&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过brew安装，一行命令搞定，真香！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;4. RabbitMQ测试&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;4.1 添加账号&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先得启动mq&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;## 添加账号&lt;/span&gt;&lt;br/&gt;./rabbitmqctl add_user admin admin&lt;br/&gt;&lt;span&gt;## 添加访问权限&lt;/span&gt;&lt;br/&gt;./rabbitmqctl set_permissions -p &lt;span&gt;&quot;/&quot;&lt;/span&gt; admin &lt;span&gt;&quot;.*&quot;&lt;/span&gt; &lt;span&gt;&quot;.*&quot;&lt;/span&gt; &lt;span&gt;&quot;.*&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;## 设置超级权限&lt;/span&gt;&lt;br/&gt;./rabbitmqctl set_user_tags admin administrator&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;4.2 编码实测&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为代码中引入了java 8的特性，pom引入依赖：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;com.rabbitmq&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;amqp-client&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;5.5.1&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;plugins&amp;gt;&lt;br/&gt;    &amp;lt;plugin&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;configuration&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;source&lt;/span&gt;&amp;gt;8&amp;lt;/&lt;span&gt;source&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;target&amp;gt;8&amp;lt;/target&amp;gt;&lt;br/&gt;        &amp;lt;/configuration&amp;gt;&lt;br/&gt;    &amp;lt;/plugin&amp;gt;&lt;br/&gt;&amp;lt;/plugins&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开始写代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RabbitMqTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//消息队列名称&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String QUEUE_NAME = &lt;span&gt;&quot;hello&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; java.io.IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建连接工程&lt;/span&gt;&lt;br/&gt;        ConnectionFactory factory = &lt;span&gt;new&lt;/span&gt; ConnectionFactory();&lt;br/&gt;        factory.setHost(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPort(&lt;span&gt;5672&lt;/span&gt;);&lt;br/&gt;        factory.setUsername(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPassword(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//创建连接&lt;/span&gt;&lt;br/&gt;        Connection connection = factory.newConnection();&lt;br/&gt;        &lt;span&gt;//创建消息通道&lt;/span&gt;&lt;br/&gt;        Channel channel = connection.createChannel();&lt;br/&gt;        &lt;span&gt;//生成一个消息队列&lt;/span&gt;&lt;br/&gt;        channel.queueDeclare(QUEUE_NAME, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;            String message = &lt;span&gt;&quot;Hello World RabbitMQ count: &quot;&lt;/span&gt; + i;&lt;br/&gt;            &lt;span&gt;//发布消息，第一个参数表示路由（Exchange名称），为&quot;&quot;则表示使用默认消息路由&lt;/span&gt;&lt;br/&gt;            channel.basicPublish(&lt;span&gt;&quot;&quot;&lt;/span&gt;, QUEUE_NAME, &lt;span&gt;null&lt;/span&gt;, message.getBytes());&lt;br/&gt;            System.out.println(&lt;span&gt;&quot; [x] Sent &#x27;&quot;&lt;/span&gt; + message + &lt;span&gt;&quot;&#x27;&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;//关闭消息通道和连接&lt;/span&gt;&lt;br/&gt;        channel.close();&lt;br/&gt;        connection.close();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;consumer&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; java.io.IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建连接工厂&lt;/span&gt;&lt;br/&gt;        ConnectionFactory factory = &lt;span&gt;new&lt;/span&gt; ConnectionFactory();&lt;br/&gt;        factory.setHost(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPort(&lt;span&gt;5672&lt;/span&gt;);&lt;br/&gt;        factory.setUsername(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPassword(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//创建连接&lt;/span&gt;&lt;br/&gt;        Connection connection = factory.newConnection();&lt;br/&gt;        &lt;span&gt;//创建消息信道&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; Channel channel = connection.createChannel();&lt;br/&gt;        &lt;span&gt;//消息队列&lt;/span&gt;&lt;br/&gt;        channel.queueDeclare(QUEUE_NAME, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[*] Waiting for message. To exist press CTRL+C&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        DeliverCallback deliverCallback = (consumerTag, delivery) -&amp;gt; {&lt;br/&gt;            String message = &lt;span&gt;new&lt;/span&gt; String(delivery.getBody(), &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;            System.out.println(&lt;span&gt;&quot; [x] Received &#x27;&quot;&lt;/span&gt; + message + &lt;span&gt;&quot;&#x27;&quot;&lt;/span&gt;);&lt;br/&gt;        };&lt;br/&gt;        channel.basicConsume(QUEUE_NAME, &lt;span&gt;true&lt;/span&gt;, deliverCallback, consumerTag -&amp;gt; {});&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行send()后控制台输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 0&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 1&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 2&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 3&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 4&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 5&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 6&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 7&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 8&#x27;&lt;/span&gt;&lt;br/&gt;[x] Sent &lt;span&gt;&#x27;Hello World RabbitMQ count: 9&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7005388760585065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLdeAagu2Z8CWrmO4TsX37JIEm85zNxv6UJapq9HgjVuwzxOP9lapqZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1299&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行consumer()后：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7076689445709947&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLIdBibNY90PafBxEvbYE5ktoVjvVROIA8HPFqaYSLJOiaadGPV5UYKRxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1317&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;示例中的代码讲解，可以直接参考官网：https://www.rabbitmq.com/tutorials/tutorial-one-java.html&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;5. 基本使用姿势&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.1 公共代码封装&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;封装工厂类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RabbitUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ConnectionFactory &lt;span&gt;getConnectionFactory&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建连接工程，下面给出的是默认的case&lt;/span&gt;&lt;br/&gt;        ConnectionFactory factory = &lt;span&gt;new&lt;/span&gt; ConnectionFactory();&lt;br/&gt;        factory.setHost(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPort(&lt;span&gt;5672&lt;/span&gt;);&lt;br/&gt;        factory.setUsername(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setPassword(&lt;span&gt;&quot;admin&quot;&lt;/span&gt;);&lt;br/&gt;        factory.setVirtualHost(&lt;span&gt;&quot;/&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; factory;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;封装生成者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MsgProducer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publishMsg&lt;/span&gt;&lt;span&gt;(String exchange, BuiltinExchangeType exchangeType, String toutingKey, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;        ConnectionFactory factory = RabbitUtil.getConnectionFactory();&lt;br/&gt;        &lt;span&gt;//创建连接&lt;/span&gt;&lt;br/&gt;        Connection connection = factory.newConnection();&lt;br/&gt;        &lt;span&gt;//创建消息通道&lt;/span&gt;&lt;br/&gt;        Channel channel = connection.createChannel();&lt;br/&gt;        &lt;span&gt;// 声明exchange中的消息为可持久化，不自动删除&lt;/span&gt;&lt;br/&gt;        channel.exchangeDeclare(exchange, exchangeType, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 发布消息&lt;/span&gt;&lt;br/&gt;        channel.basicPublish(exchange, toutingKey, &lt;span&gt;null&lt;/span&gt;, message.getBytes());&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Sent &#x27;&quot;&lt;/span&gt; + message + &lt;span&gt;&quot;&#x27;&quot;&lt;/span&gt;);&lt;br/&gt;        channel.close();&lt;br/&gt;        connection.close();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;封装消费者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MsgConsumer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;consumerMsg&lt;/span&gt;&lt;span&gt;(String exchange, String queue, String routingKey)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;        ConnectionFactory factory = RabbitUtil.getConnectionFactory();&lt;br/&gt;        &lt;span&gt;//创建连接&lt;/span&gt;&lt;br/&gt;        Connection connection = factory.newConnection();&lt;br/&gt;        &lt;span&gt;//创建消息信道&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; Channel channel = connection.createChannel();&lt;br/&gt;        &lt;span&gt;//消息队列&lt;/span&gt;&lt;br/&gt;        channel.queueDeclare(queue, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;//绑定队列到交换机&lt;/span&gt;&lt;br/&gt;        channel.queueBind(queue, exchange, routingKey);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;[*] Waiting for message. To exist press CTRL+C&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        Consumer consumer = &lt;span&gt;new&lt;/span&gt; DefaultConsumer(channel) {&lt;br/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handleDelivery&lt;/span&gt;&lt;span&gt;(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,&lt;br/&gt;                                       &lt;span&gt;byte&lt;/span&gt;[] body)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;                String message = &lt;span&gt;new&lt;/span&gt; String(body, &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                    System.out.println(&lt;span&gt;&quot; [x] Received &#x27;&quot;&lt;/span&gt; + message);&lt;br/&gt;                } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;                    System.out.println(&lt;span&gt;&quot; [x] Done&quot;&lt;/span&gt;);&lt;br/&gt;                    channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        };&lt;br/&gt;        &lt;span&gt;// 取消自动ack&lt;/span&gt;&lt;br/&gt;        channel.basicConsume(queue, &lt;span&gt;false&lt;/span&gt;, consumer);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.2 Direct方式&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3096590909090909&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLAqDxFoyHu8amIHOzh95K7Jp0Xic4NBG4WCBFFYFKe8iaFtz6ib34cqkicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5.2.1 Direct示例&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DirectProducer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME = &lt;span&gt;&quot;direct.exchange&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publishMsg&lt;/span&gt;&lt;span&gt;(String routingKey, String msg)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            MsgProducer.publishMsg(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, routingKey, msg);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        DirectProducer directProducer = &lt;span&gt;new&lt;/span&gt; DirectProducer();&lt;br/&gt;        String[] routingKey = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span&gt;&quot;bbb&quot;&lt;/span&gt;, &lt;span&gt;&quot;ccc&quot;&lt;/span&gt;};&lt;br/&gt;        String msg = &lt;span&gt;&quot;hello &amp;gt;&amp;gt;&amp;gt; &quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;            directProducer.publishMsg(routingKey[i % &lt;span&gt;3&lt;/span&gt;], msg + i);&lt;br/&gt;        }&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;----over-------&quot;&lt;/span&gt;);&lt;br/&gt;        Thread.sleep(&lt;span&gt;1000&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行生产者，往消息队列中放入10条消息，其中key分别为“aaa”、“bbb”和“ccc”，分别放入qa、qb、qc三个队列：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4394977168949772&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLbKDAGibsKNRYl7XQ26c6bSiaQjYmjZvUL0YxrSKMKjy4POlXvk77If7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是qa队列的信息：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7868396663577386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLFWUUGLeXsCdQia0A3cQpgR57syacBLy3dKEwFZPfC5V5NgTh22bWRUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1079&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DirectConsumer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String exchangeName = &lt;span&gt;&quot;direct.exchange&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;msgConsumer&lt;/span&gt;&lt;span&gt;(String queueName, String routingKey)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            MsgConsumer.consumerMsg(exchangeName, queueName, routingKey);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (TimeoutException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        DirectConsumer consumer = &lt;span&gt;new&lt;/span&gt; DirectConsumer();&lt;br/&gt;        String[] routingKey = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span&gt;&quot;bbb&quot;&lt;/span&gt;, &lt;span&gt;&quot;ccc&quot;&lt;/span&gt;};&lt;br/&gt;        String[] queueNames = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;qa&quot;&lt;/span&gt;, &lt;span&gt;&quot;qb&quot;&lt;/span&gt;, &lt;span&gt;&quot;qc&quot;&lt;/span&gt;};&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;            consumer.msgConsumer(queueNames[i], routingKey[i]);&lt;br/&gt;        }&lt;br/&gt;        Thread.sleep(&lt;span&gt;1000&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行后的输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[*] Waiting &lt;span&gt;for&lt;/span&gt; message. To exist press CTRL+C&lt;br/&gt; [x] Received &lt;span&gt;&#x27;hello &amp;gt;&amp;gt;&amp;gt; 0&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &#x27;&lt;/span&gt;hello &amp;gt;&amp;gt;&amp;gt; 3&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &lt;span&gt;&#x27;hello &amp;gt;&amp;gt;&amp;gt; 6&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &#x27;&lt;/span&gt;hello &amp;gt;&amp;gt;&amp;gt; 9&lt;br/&gt; [x] Done&lt;br/&gt;[*] Waiting &lt;span&gt;for&lt;/span&gt; message. To exist press CTRL+C&lt;br/&gt; [x] Received &lt;span&gt;&#x27;hello &amp;gt;&amp;gt;&amp;gt; 1&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &#x27;&lt;/span&gt;hello &amp;gt;&amp;gt;&amp;gt; 4&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &lt;span&gt;&#x27;hello &amp;gt;&amp;gt;&amp;gt; 7&lt;br/&gt; [x] Done&lt;br/&gt;[*] Waiting for message. To exist press CTRL+C&lt;br/&gt; [x] Received &#x27;&lt;/span&gt;hello &amp;gt;&amp;gt;&amp;gt; 2&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &lt;span&gt;&#x27;hello &amp;gt;&amp;gt;&amp;gt; 5&lt;br/&gt; [x] Done&lt;br/&gt; [x] Received &#x27;&lt;/span&gt;hello &amp;gt;&amp;gt;&amp;gt; 8&lt;br/&gt; [x] Done&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，分别从qa、qb、qc中将不同的key的数据消费掉。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5.2.2 问题探讨&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;有个疑问：这个队列的名称qa、qb和qc是RabbitMQ自动生成的么，我们可以指定队列名称么？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我做了个简单的实验，我把消费者代码修改了一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    DirectConsumer consumer = &lt;span&gt;new&lt;/span&gt; DirectConsumer();&lt;br/&gt;    String[] routingKey = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span&gt;&quot;bbb&quot;&lt;/span&gt;, &lt;span&gt;&quot;ccc&quot;&lt;/span&gt;};&lt;br/&gt;    String[] queueNames = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;qa&quot;&lt;/span&gt;, &lt;span&gt;&quot;qb&quot;&lt;/span&gt;, &lt;span&gt;&quot;qc1&quot;&lt;/span&gt;}; &lt;span&gt;// 将qc修改为qc1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;        consumer.msgConsumer(queueNames[i], routingKey[i]);&lt;br/&gt;    }&lt;br/&gt;    Thread.sleep(&lt;span&gt;1000&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行后如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45955882352941174&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLXibY42YtqywT0VLbmBaEO4aNG7pw5ibjkbon5vgHzfyLBmKGBh8feicoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以发现，多了一个qc1，所以可以判断这个界面中的queues，是消费者执行时，会将消费者指定的队列名称和direct.exchange绑定，绑定的依据就是key。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们把队列中的数据全部消费掉，然后重新执行生成者后，会发现qc和qc1中都有3条待消费的数据，因为绑定的key都是“ccc”，所以两者的数据是一样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27906976744186046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSL3iaDzQWIb01UQcEOv94Dn4VBHjyAPwfDhA9QGBzzZxaIFZ5uVWePN4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;817&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;绑定关系如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7348242811501597&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLpD65jicq08bldM1xceCCicicbUrdIOLzTO8soq7hdXsKkDgOljTFlibCqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;626&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：当没有Queue绑定到Exchange时，往Exchange中写入的消息也不会重新分发到之后绑定的queue上。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;思考：不执行消费者，看不到这个Queres中信息，我其实可以把这个界面理解为消费者信息界面。不过感觉还是怪怪的，这个queues如果是消费者信息，就不应该叫queues，我理解queues应该是RabbitMQ中实际存放数据的queues，难道是我理解错了？&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.3 Fanout方式（指定队列）&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3209509658246657&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLbCDAcU5KfbfRnoc45QZgTbInKXyLTRZ7ibsupcGRROPW11mtPU9JOIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;673&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产者封装：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;FanoutProducer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME = &lt;span&gt;&quot;fanout.exchange&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publishMsg&lt;/span&gt;&lt;span&gt;(String routingKey, String msg)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            MsgProducer.publishMsg(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, routingKey, msg);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        FanoutProducer directProducer = &lt;span&gt;new&lt;/span&gt; FanoutProducer();&lt;br/&gt;        String msg = &lt;span&gt;&quot;hello &amp;gt;&amp;gt;&amp;gt; &quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;            directProducer.publishMsg(&lt;span&gt;&quot;&quot;&lt;/span&gt;, msg + i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;FanoutConsumer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME = &lt;span&gt;&quot;fanout.exchange&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;msgConsumer&lt;/span&gt;&lt;span&gt;(String queueName, String routingKey)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            MsgConsumer.consumerMsg(EXCHANGE_NAME, queueName, routingKey);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (TimeoutException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        FanoutConsumer consumer = &lt;span&gt;new&lt;/span&gt; FanoutConsumer();&lt;br/&gt;        String[] queueNames = &lt;span&gt;new&lt;/span&gt; String[]{&lt;span&gt;&quot;qa-2&quot;&lt;/span&gt;, &lt;span&gt;&quot;qb-2&quot;&lt;/span&gt;, &lt;span&gt;&quot;qc-2&quot;&lt;/span&gt;};&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;            consumer.msgConsumer(queueNames[i], &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行生成者，结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35990037359900373&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLt6PxYOBS9SyqyMasAOe9hkzwCiaxgxCyEl1y8J8dLBqz55plOQU2AGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;803&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们发现，生产者生产的10条数据，在每个消费者中都可以消费，这个是和Direct不同的地方，但是使用Fanout方式时，有几个点需要注意一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;生产者的routkey可以为空，因为生产者的所有数据，会下放到每一个队列，所以不会通过routkey去路由；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者需要指定queues，因为消费者需要绑定到指定的queues才能消费。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3859910581222057&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLRPTSibibdDicMtniafLia9QyicVjWgt2ADibv0yzYCibmpADiacEg2tWEaCbpIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;671&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这幅图就画出了Fanout的精髓之处，exchange会和所有的queue进行绑定，不区分路由，消费者需要绑定指定的queue才能发起消费。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：往队列塞数据时，可能通过界面看不到消息个数的增加，可能是你之前已经开启了消费进程，导致增加的消息马上被消费了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.4 Fanout方式（随机获取队列）&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我们是指定了队列，这个方式其实很不友好，比如对于Fanout，我其实根本无需关心队列的名字，如果还指定对应队列进行消费，感觉这个很冗余，所以我们这里就采用随机获取队列名字的方式，下面代码直接Copy官网。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成者封装：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publishMsgV2&lt;/span&gt;&lt;span&gt;(String exchange, BuiltinExchangeType exchangeType, String message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;    ConnectionFactory factory = RabbitUtil.getConnectionFactory();&lt;br/&gt;    &lt;span&gt;//创建连接&lt;/span&gt;&lt;br/&gt;    Connection connection = factory.newConnection();&lt;br/&gt;    &lt;span&gt;//创建消息通道&lt;/span&gt;&lt;br/&gt;    Channel channel = connection.createChannel();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 声明exchange中的消息&lt;/span&gt;&lt;br/&gt;    channel.exchangeDeclare(exchange, exchangeType);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 发布消息&lt;/span&gt;&lt;br/&gt;    channel.basicPublish(exchange, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, message.getBytes(&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;Sent &#x27;&quot;&lt;/span&gt; + message + &lt;span&gt;&quot;&#x27;&quot;&lt;/span&gt;);&lt;br/&gt;    channel.close();&lt;br/&gt;    connection.close();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者封装：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;consumerMsgV2&lt;/span&gt;&lt;span&gt;(String exchange)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, TimeoutException &lt;/span&gt;{&lt;br/&gt;    ConnectionFactory factory = RabbitUtil.getConnectionFactory();&lt;br/&gt;    Connection connection = factory.newConnection();&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; Channel channel = connection.createChannel();&lt;br/&gt;&lt;br/&gt;    channel.exchangeDeclare(exchange, &lt;span&gt;&quot;fanout&quot;&lt;/span&gt;);&lt;br/&gt;    String queueName = channel.queueDeclare().getQueue();&lt;br/&gt;    channel.queueBind(queueName, exchange, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot; [*] Waiting for messages. To exit press CTRL+C&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    DeliverCallback deliverCallback = (consumerTag, delivery) -&amp;gt; {&lt;br/&gt;        String message = &lt;span&gt;new&lt;/span&gt; String(delivery.getBody(), &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot; [x] Received &#x27;&quot;&lt;/span&gt; + message + &lt;span&gt;&quot;&#x27;&quot;&lt;/span&gt;);&lt;br/&gt;    };&lt;br/&gt;    channel.basicConsume(queueName, &lt;span&gt;true&lt;/span&gt;, deliverCallback, consumerTag -&amp;gt; { });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生产者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;public class FanoutProducer {&lt;br/&gt;    private static final String EXCHANGE_NAME = &lt;span&gt;&quot;fanout.exchange.v2&quot;&lt;/span&gt;;&lt;br/&gt;    public void publishMsg(String msg) {&lt;br/&gt;        try {&lt;br/&gt;            MsgProducer.publishMsgV2(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, msg);&lt;br/&gt;        } catch (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    public static void main(String[] args) {&lt;br/&gt;        FanoutProducer directProducer = new FanoutProducer();&lt;br/&gt;        String msg = &lt;span&gt;&quot;hello &amp;gt;&amp;gt;&amp;gt; &quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int i = 0; i &amp;lt; 10000; i++) {&lt;br/&gt;            directProducer.publishMsg(msg + i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;FanoutConsumer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String EXCHANGE_NAME = &lt;span&gt;&quot;fanout.exchange.v2&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;msgConsumer&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            MsgConsumer.consumerMsgV2(EXCHANGE_NAME);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (TimeoutException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        FanoutConsumer consumer = &lt;span&gt;new&lt;/span&gt; FanoutConsumer();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;            consumer.msgConsumer();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行后，管理界面如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3794178794178794&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLa941gRzBicAMPRrFcTIeczDLCgavUHfMzqcoeZFUwvgiaxQicsRK5FdDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7972972972972973&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLtqIUtXbX2GyGO6EXOtthicTjjzvTcgt6LJSs8YQxrX0TCloHecVtwIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5852981969486823&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLeNkcn2pwzWRY43AjJlIB22Mug5AIsIaMia4dXZRTNhA9Up9VrNWyL9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1442&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;5.5 Topic方式&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29254571026722925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLibsbLDCrtxSR6XDtbq4XkRaWxLqtP9F5Mm9QNd317M2LKhsbOJLpusQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码详见官网：https://www.rabbitmq.com/tutorials/tutorial-five-java.html&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;更多方式，请直接查看官网：https://www.rabbitmq.com/getstarted.html&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9128959276018099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLEBqF1pxoH0xnM8THYI4LSLLrjvTXSer8gmia4rI3eRfHH1PeeA20ZCBIDdOexiboUJjTav8Ismxicpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;6. RabbitMQ 进阶&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;6.1 durable 和 autoDeleted&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在定义Queue时，可以指定这两个参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * Declare an exchange.&lt;br/&gt; * &lt;span&gt;@see&lt;/span&gt; com.rabbitmq.client.AMQP.Exchange.Declare&lt;br/&gt; * &lt;span&gt;@see&lt;/span&gt; com.rabbitmq.client.AMQP.Exchange.DeclareOk&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; exchange the name of the exchange&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; type the exchange type&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; durable true if we are declaring a durable exchange (the exchange will survive a server restart)&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; autoDelete true if the server should delete the exchange when it is no longer in use&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; arguments other properties (construction arguments) for the exchange&lt;br/&gt; * &lt;span&gt;@return&lt;/span&gt; a declaration-confirm method to indicate the exchange was successfully declared&lt;br/&gt; * &lt;span&gt;@throws&lt;/span&gt; java.io.IOException if an error is encountered&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;Exchange.&lt;span&gt;DeclareOk &lt;span&gt;exchangeDeclare&lt;/span&gt;&lt;span&gt;(String exchange, BuiltinExchangeType type, &lt;span&gt;boolean&lt;/span&gt; durable, &lt;span&gt;boolean&lt;/span&gt; autoDelete,&lt;br/&gt;    Map&amp;lt;String, Object&amp;gt; arguments)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;&lt;span&gt;/**&lt;br/&gt;* Declare a queue&lt;br/&gt;* &lt;span&gt;@see&lt;/span&gt; com.rabbitmq.client.AMQP.Queue.Declare&lt;br/&gt;* &lt;span&gt;@see&lt;/span&gt; com.rabbitmq.client.AMQP.Queue.DeclareOk&lt;br/&gt;* &lt;span&gt;@param&lt;/span&gt; queue the name of the queue&lt;br/&gt;* &lt;span&gt;@param&lt;/span&gt; durable true if we are declaring a durable queue (the queue will survive a server restart)&lt;br/&gt;* &lt;span&gt;@param&lt;/span&gt; exclusive true if we are declaring an exclusive queue (restricted to this connection)&lt;br/&gt;* &lt;span&gt;@param&lt;/span&gt; autoDelete true if we are declaring an autodelete queue (server will delete it when no longer in use)&lt;br/&gt;* &lt;span&gt;@param&lt;/span&gt; arguments other properties (construction arguments) for the queue&lt;br/&gt;* &lt;span&gt;@return&lt;/span&gt; a declaration-confirm method to indicate the queue was successfully declared&lt;br/&gt;* &lt;span&gt;@throws&lt;/span&gt; java.io.IOException if an error is encountered&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;Queue.&lt;span&gt;DeclareOk &lt;span&gt;queueDeclare&lt;/span&gt;&lt;span&gt;(String queue, &lt;span&gt;boolean&lt;/span&gt; durable, &lt;span&gt;boolean&lt;/span&gt; exclusive, &lt;span&gt;boolean&lt;/span&gt; autoDelete,&lt;br/&gt;    Map&amp;lt;String, Object&amp;gt; arguments)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;6.1.1 durable&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;持久化，保证RabbitMQ在退出或者crash等异常情况下数据没有丢失，需要将queue，exchange和Message都持久化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若是将queue的持久化标识durable设置为true，则代表是一个持久的队列，那么在服务重启之后，会重新读取之前被持久化的queue。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然队列可以被持久化，但是里面的消息是否为持久化，还要看消息的持久化设置。即重启queue，但是queue里面还没有发出去的消息，那队列里面还存在该消息么？这个取决于该消息的设置。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;6.1.2 autoDeleted&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动删除，如果该队列没有任何订阅的消费者的话，该队列会被自动删除。这种队列适用于临时队列。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个Queue被设置为自动删除时，当消费者断掉之后，queue会被删除，这个主要针对的是一些不是特别重要的数据，不希望出现消息积累的情况。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;6.1.3 小节&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当一个Queue已经声明好了之后，不能更新durable或者autoDelted值；当需要修改时，需要先删除再重新声明&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费的Queue声明应该和投递的Queue声明的 durable,autoDelted属性一致，否则会报错&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于重要的数据，一般设置 durable=true, autoDeleted=false&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于设置 autoDeleted=true 的队列，当没有消费者之后，队列会自动被删除&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;6.4 ACK&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行一个任务可能需要花费几秒钟，你可能会担心如果一个消费者在执行任务过程中挂掉了。一旦RabbitMQ将消息分发给了消费者，就会从内存中删除。在这种情况下，如果正在执行任务的消费者宕机，会丢失正在处理的消息和分发给这个消费者但尚未处理的消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，我们不想丢失任何任务，如果有一个消费者挂掉了，那么我们应该将分发给它的任务交付给另一个消费者去处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了确保消息不会丢失，RabbitMQ支持消息应答。消费者发送一个消息应答，告诉RabbitMQ这个消息已经接收并且处理完毕了。RabbitMQ就可以删除它了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此手动ACK的常见手段：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 接收消息之后，主动ack/nak&lt;br/&gt;Consumer consumer = new DefaultConsumer(channel) {&lt;br/&gt;    @Override&lt;br/&gt;    public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,&lt;br/&gt;            byte[] body) throws IOException {&lt;br/&gt;        String message = new String(body, &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;        try {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot; [ &quot;&lt;/span&gt; + queue + &lt;span&gt;&quot; ] Received &#x27;&quot;&lt;/span&gt; + message);&lt;br/&gt;            channel.basicAck(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;        } catch (Exception e) {&lt;br/&gt;            channel.basicNack(envelope.getDeliveryTag(), &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;// 取消自动ack&lt;br/&gt;channel.basicConsume(queue, &lt;span&gt;false&lt;/span&gt;, consumer);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;7. 结语&lt;/h1&gt;&lt;p&gt;这篇文章不难，但基本都讲清楚了，希望大家都有所收获。&lt;/p&gt;&lt;p&gt;今天先这样，咱们下次见。准备睡觉咯，结果发现碗还没有洗完，这......&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3521df932cf98e86e85d42d6eb8d008d</guid>
<title>朝九晚五不加班，我的秘密全在这里~</title>
<link>https://toutiao.io/k/dhyc5y5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2248876&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpQib99dNFR1scNLWlHX8ZXxVT2IrulmK6nb5Ret3wInjMcDSzuA36pgA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;667&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;今天给大家带来的文章是&lt;span&gt;「知群运营TOP班」&lt;/span&gt;小组同学的优秀文章！悄悄告诉，同学们90%第一次写公众号哦！（请把优秀打在评论区！）&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;参与者：小鹿、 小蛋黄、 R 、zhong、 忒忒 、小达&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我想大家都听过这么几个事情：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大厂裁员&lt;/span&gt;&lt;/strong&gt;消息不断传来，很多互联网大中小厂都深受其中，&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;更有传大厂裁员跳楼事件令人惋惜……&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另一方面面对&lt;strong&gt;&lt;span&gt;应届生 1076 万人，规模和增幅均创新高。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;更是诞生了“毕业即失业”的事件，从官方发布的数据来看，2022 届高校毕业生的整体去向落实率是 23.6 ％，还没有超过 30 ％......&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;这些数据背后的逻辑到底是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;压力的背后究竟如何涅槃重生？&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpHZE1p9vxfAkHxvLiaI21zsBylXtTibxOocCQibCTE6xIoCmX4FVrGPdbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最近有很多小伙伴都在跟我讨论：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.0130719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYp929Mb7X2KLhBvNOEQgPoPdsbNufUBTUke0K0GlQKib4CRpyKjZwc18g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;765&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;明明很努力工作了，为什么没有加薪还被弃用？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpkJKNgGibPNpoosuEpNu9GLrA1Dg2S5Kqf3M1xmFicVibLYWPVUCzRk0vA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;196&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;我的朋友跳槽工资涨幅一倍，而我跳来跳去还是在同水平徘徊…&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9380531&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpveGQlVGJ327FlecYf3phbKCL2CTLBvH9sdNibeFGAYoPGxaKY2cCf8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;678&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;为什么一样工作，别人就可以升职加薪，而我还在原地踏步？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这些我把他们归因于&lt;strong&gt;职场效率&lt;/strong&gt;和&lt;strong&gt;职场效能&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于“高效”的“效”，有两个概念，分别是“&lt;strong&gt;&lt;span&gt;效率&lt;/span&gt;&lt;/strong&gt;”和“&lt;strong&gt;&lt;span&gt;效能&lt;/span&gt;&lt;/strong&gt;”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;p&gt;效率指在单位时间里完成的工作量，或者说是某一工作所获的成果与完成这一工作所花时间和人力的比值。所谓的工作产出与投入之比；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;效能则是指使用行为目的和手段方面的正确性与效果方面的有利性。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;管理大师彼得·德鲁克曾在《有效的主管》一书中简明扼要地指出：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;“效率是‘以正确的方式做事’，而效能则是‘做正确的事’。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3311688&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpFo8EWmhEXia33AfL1D8nkqxnX1QicrlMSPhHSEwH4qIpB2CpahiaZOZyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;154&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3340564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYp1bVooibrEudIpdRuBm6kEy9za9NtFUJnX0cfS6DldFZwtcVcOsH3sdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;461&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;所以，所谓的工作的高效，就是把事情高效率完成并且有一个好的结果。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;无论我提多少职场效能的相关论据，大家或多或少也会有一些疑惑，我们职场效能应该如何实现呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那就要借助工具了，这也是本篇文字的重中之重，他能让你的职场开启倍速成长，让你的人生开挂～让我们一起来看看吧！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;影响效率究竟有哪些方面：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首当其冲的肯定是&lt;strong&gt;&lt;span&gt;计划和时间管理，文件的云端管理，团队沟通会议&lt;/span&gt;&lt;/strong&gt;，一些效率工具的使用都是必不可少的，那我们先来说说第一个吧：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NO.1&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;计划和时间&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一天有24小时，成功的人、失败的人、不学无术的人过着同样的一天。时间很公平给了所有人同样的24小时，可是造就了截然不同的人生，究竟是什么原因？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我想大家脑海的第一反应当然是：&lt;strong&gt;自我管理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所有的“管理”，核心都是“自我管理”，而“自我管理”的核心，是“时间管理”。而时间管理的背后是精力管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;究其本质，无非就是在有限的时间内做到产出最大化和自我满足从而获得成长让自己变得更加值钱。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在知群《精力管理》课程中提到，时间管理=精力管理。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8175583&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpx0pO7Py2TicqNon9qE2A0w3Hx7QC2DYEOruNcLSQ85iar2CYWK0mwPRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;729&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;来源：《为什么精英都是时间控》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;大多数人只会“时间管理”， 而不是精力管理。懂得科学用脑，会让你事半功倍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7203704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYp7WZkHEqqiaN2Wm5hAxZZiauvGJuEQLlS2psIVN1O104v67HqDbciasRDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;来源：《为什么精英都是时间控》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何提升计划和时间管理，善用工具，事半功倍！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在疫情防控环境下，很多人都经历了居家办公，无论是公司还是个人都发现了一个问题，就是&lt;strong&gt;工作效率不高&lt;/strong&gt;，一不留神一天就过去了……&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在家无拘无束有时候甚至选择了躺平，持久以来愈加焦虑，完全失去了对自我的掌控感，脱离了轨道。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5614583&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpibPcW2VAFEm7IKzLqicHZ6ECiaIViarpoAFs2JibGna18WPSG1B8O09icA5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个时候能够帮助我们快速回归轨道上的方法就是先去借助一些时间管理的工具从而达到事半功倍的效果，例如：&lt;strong&gt;&lt;span&gt;滴答清单、番茄todo&lt;/span&gt;&lt;/strong&gt;…通过工具的的使用找到自我掌控感，&lt;strong&gt;&lt;span&gt;在逐步回归我们时间管理的轨道上。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;滴答清单&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;IOS丨Android丨免费&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpCQnwet8VhO55Jf80Dq56uMaTUlkYSicmVth7W8O2lLkYiaeicK3el5PDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;*关注「最美应用」，后台回复「0805」可获取本文应用下载地址。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;番茄时钟&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;IOS丨Android丨免费&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4296296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpFcLXEaiap0qMNAt8qpHVEPVMlkhERMy13l9M8KbtrfSiarsL5Bv0LacA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;列举了这两款产品不仅限这两款，他们都可以帮助你保持专注，完成更多工作，任务清单、提醒、安排......轻松的记录大小事务，让你的工作记录井井有条，高效能完成工作/生活事情。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;*关注「最美应用」，后台回复「0805」可获取本文应用下载地址。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;GTD&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;每日清零管理法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;GTD，也叫 Getting Things Done，GTD。如何运用？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;据百度百科资料显示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;GTD 就是 Getting Things Done 的缩写，意思是“把需要做的事情处理好”，是一个管理时间的方法。GTD的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。GTD的五个核心原则是：收集、整理、组织、回顾、执行。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;GTD 的核心理念在于清空大脑，然后一步步按照设定的路线去努力执行。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;把时间当资产，让自己值钱。你对待时间的样子，就是你未来的样子。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NO.2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;文件云管理&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;居家远程办公，每天有开不完的会，超多版本文件，对接不完的工作…同事的文件只是改了几个字就要重发很多遍，稍微大一点的文件就要等上几个小时，这都很大程度上耗费了我们的时间和精力，导致了我们工作效率的降低。文件云端管理就车成了我效率提升的必备，无云端不文件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如我常用的：飞书、百度云盘、石墨文档等等……&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;飞书&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;IOS丨Android丨免费&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpz6LlAuibjINuz3cBWCJrpibKKnNN4EtfjERXZBVBtdI138F3RQ3r1UBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;飞书是真正的一站式企业沟通与协作平台，整合视频会议、即时消息、日历、云文档、邮箱、工作台等功能于—体，打造高效的办公方式，加速企业和个人成长。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;*关注「最美应用」，后台回复「0805」可获取本文应用下载地址。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;百度云盘&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;IOS丨Android丨免费&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpbpbibuG7icReIYcecNDhfR06yW79HdmlPcvEkCgsegHusTQYsamxbyVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;百度云盘是一个网盘，由百度推出的一项云存储服务产品，您可以通过百度网盘轻松地进行照片、视频、文档等文件的网络备份、同步和分享。空间大、速度快、安全稳固。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;特别强调一个功能叫做&lt;strong&gt;同步空间&lt;/strong&gt;，熟练掌握对在家和在公司办公十分方便，再也不用U盘拷来拷去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6282306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpYVnKuxgMjLianxdCiauJe1FUAnFZHmb7ibK3GxfJzwjcWjHR0fdUuwVbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;503&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;*关注「最美应用」，后台回复「0805」可获取本文应用下载地址。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;◆ ◇ ◆&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;石墨文档&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;IOS丨Android丨免费&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpFksv2Y8PmBYZsFd3NkaByibXNPqZnuIPeAwNF7f98RW08iakVbrRYxcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;石墨文档是中国一款&lt;strong&gt;支持云端实时协作的企业办公服务软件&lt;/strong&gt;(功能类比于 Google Docs、Quip )，可以实现多人同时在&lt;strong&gt;同一文档及表格上进行编辑和实时讨论，同步响应速度达到毫秒级。&lt;/strong&gt;我平常写文章做笔记习惯在石墨文档书写，还可以共享。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;*关注「最美应用」，后台回复「0805」可获取本文应用下载地址。&lt;/p&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NO.3&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;团队的沟通&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然互联网的发展速度已经可以让我们随时随地和另一个人联系，但这并不代表能真正地提高沟通效率。沟通的方式也有很多，例如电话沟通、E-mail沟通、会议沟通等，如果能够找到正确的沟通方式，就能达成沟通重要的一步。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如何提高团队工作的效率？对其目标拆解为任务，加强沟通频次，进行早启动晚复盘。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如果在线上，对于团队沟通会议建议尝试上边提到的飞书，也可以通过腾讯会议进行，都是不错的选择。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4583333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpsmCzauwSgobBUUeQy2YS3uyZLJZmGkyWqJCvfEbJibBYX550mVib2YVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NO.4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;其他工具&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;相信大家对：“所谓的工作的高效，就是把事情高效率完成并且有一个好的结果。”这句话有了深刻的理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于互联网飞速且曲折发展，互联网3.0时代也即将到来，在线协同已经不是新鲜事情，网络不光带给我们源源不断的素材和资源、灵感，也为我们沟通协作产生了很大的影响，像&lt;strong&gt;图宇宙、PBRMAX、Figma、Master go、即时设计、稿定设计&lt;/strong&gt;等在线设计产品还有很多类别的&lt;strong&gt;小程序，APP，网站&lt;/strong&gt;等等琳琅满目，都等着我们去开阔。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;关于职场发展：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过工具提高工作效率，达到提升职场效能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3992172&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpxekwibc7gW2RaxJEDpKEicMUCmFePLyiacBiaFXQO6xRAJhJjCkqkwozXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;511&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;胡雅茹在《思维导图笔记整理术》这本书提到：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;效率=效果÷时间&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;想要提升效率有两个方法:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;①提升效果，花费时间不变；&lt;/p&gt;&lt;p&gt;②效果不变，减少时间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;WORLD BOOK &amp;amp;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;COPYRIGHT DAY&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7523511&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpacEhKriahLNFFAdicc2hPSjCFdvPZwX6h72C4RawZ8dISfrUOBzBQyiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;要想不被淘汰，你要明确自己的核心竞争力，先确保做正确的事情，再把事情作对，利用工具提高工作效率，前提是明确目标和结果，在这个基础上，你会发现很多事情方面我们已经开始提升我们的职场效能，朝着诗和远方前进这......&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;愿每一位职场人都能借助工具拥有诗和远方~&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpFibJiclic70mTDqbAyibw6LH7VlGsxIpV9BJZJA5cnaX9iaDPTmcuAVnruw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;960&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小美说&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;503258593&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdH7QIpwhWmEynDysblwvQ9boW5pqF6S8Ofn7kfJsSmOZ4MMQJTIkBoXcBxdiabHGlsqtTZlkyGY8Ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;24&quot;/&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;感谢&lt;/span&gt;&lt;span&gt;「知群运营TOP班」&lt;/span&gt;&lt;span&gt;小组同学的分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他们中的90%第一次写公众号哦！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家喜欢嘛？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdFFmSiam7Jx3hcmoDFmtNe7SDJRtyzb3WOFv1n6F2wrwe88GkZTqEIX8W5Bl11qnjwj7VluPOy7quA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p powered-by=&quot;xiumi.us&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-fileid=&quot;503258594&quot; data-ratio=&quot;0.03538461538461538&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdE21oAibRgZIaxfcibUv4XgXiaMpqpCGlr5n2TgFSPAPa98cEy2toibVOlKh7jeDyvib7NLaqOvnlNJoDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650750487&amp;amp;idx=1&amp;amp;sn=6bf75cb3ad58b75115c683cbcae35ca2&amp;amp;chksm=beb0aff989c726ef82b612012357e3251992491bbcf53b5d8ce6cea96134a2593522ca09aa11&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;马上七夕了，给大家推荐一款记录性生活的 App  （没有对象也能用）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;马上七夕了，给大家推荐一款记录性生活的 App（没有对象也能用）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650750487&amp;amp;idx=1&amp;amp;sn=6bf75cb3ad58b75115c683cbcae35ca2&amp;amp;chksm=beb0aff989c726ef82b612012357e3251992491bbcf53b5d8ce6cea96134a2593522ca09aa11&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42592592592592593&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGeNSt57PTqE3oNx57zCUYpskeEtFiaNTKdmaGCdyP4j5dAO5jicRr8bVPhNSrSzYDEeXgLSpfmU6ibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650739714&amp;amp;idx=1&amp;amp;sn=ddbab791e0611795f430de270cc95797&amp;amp;chksm=beb085ec89c70cfa276c46afd96ea130ee9c85c11284e6fe86405d055043851d7039bd676af2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;七夕特辑 | 这7款虐心爱情游戏，让你哭到不想找对象&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;七夕特辑 | 这7款虐心爱情游戏，让你哭到不想找对象&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650739714&amp;amp;idx=1&amp;amp;sn=ddbab791e0611795f430de270cc95797&amp;amp;chksm=beb085ec89c70cfa276c46afd96ea130ee9c85c11284e6fe86405d055043851d7039bd676af2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdGcSPb6peu3keOE6iahnIWaJqnBqfluxicY9IEVfHwcLm9ia19ssPIvP8UE4ZiclnbrNbpnhz8DyZ6Mwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650749830&amp;amp;idx=1&amp;amp;sn=b9fb26641212b37ea7ee6a526ac40b74&amp;amp;chksm=beb0aa6889c7237eb2324dc1c040149feeb4a889086f9eef085b3241dcd89e14c3ab285c27c2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;手机App里的「卷王」，没想到是它&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;手机App里的「卷王」，没想到是它&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650749830&amp;amp;idx=1&amp;amp;sn=b9fb26641212b37ea7ee6a526ac40b74&amp;amp;chksm=beb0aa6889c7237eb2324dc1c040149feeb4a889086f9eef085b3241dcd89e14c3ab285c27c2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42760271240526526&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdHicmCOb4lNLwBpEUERzaeXN7MibXSnpqqxQTiaouRmOb3owwDJj0ia1Og3ljwvmlZQNs7TNZGgKG7sfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2507&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;503258598&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoQ2wIvCwdH7QIpwhWmEynDysblwvQ9boW5pqF6S8Ofn7kfJsSmOZ4MMQJTIkBoXcBxdiabHGlsqtTZlkyGY8Ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;24&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;找工作或想转行，&lt;/span&gt;&lt;span&gt;却不知道自己能做什么&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;已经进入职场，遇到瓶颈，晋升困难&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;工作很努力，却常常被领导质疑&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;即将35岁，对未来感到十分迷茫&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;……&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你也面临上述问题，小美推荐知群运营训练营～&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MTA2NjI0MQ==&amp;amp;mid=2650741175&amp;amp;idx=1&amp;amp;sn=3352fc8f8c7c93c21a3e902dddafe3f1&amp;amp;chksm=beb0885989c7014f013300dddb8fdae29fd99080c95a681fc9c2961d1b8c4319d3b227f79573&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;245&quot; data-fileid=&quot;503258599&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4258639910813824&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PoQ2wIvCwdEtPCDfTS4lwsoTpibMia4UZ0600P4od260vDef4ZK2pFFGtARiaVnJ3rboXwwYfMFNd2qsBqoTJJ4zQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;897&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>