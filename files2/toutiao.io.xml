<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cc9058d31717e767d6141a216cf07ad0</guid>
<title>【Redis技术探索】「数据迁移实战」手把手教你如何实现在线+离线模式进行迁移Redis数据实战指南（在线同步数据）_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/slj0e7k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;blockquote&gt; 
 &lt;p&gt;从实战出发使用RedisShake进行Redis数据在线+离线模式迁移指南&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;RedisShake_2&quot;/&gt;RedisShake基本介绍&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/RedisShake&quot;&gt;RedisShake&lt;/a&gt;是基于&lt;a href=&quot;https://github.com/CodisLabs/redis-port&quot;&gt;redis-port&lt;/a&gt;基础上进行改进的是一款开源的Redis迁移工具，支持Cluster集群的在线迁移与离线迁移（备份文件导入）。数据可平滑迁移，当部署在其他云厂商Redis服务上的Cluster集群数据，由于SYNC、PSYNC命令被云厂商禁用，无法在线迁移时，可以选择离线迁移。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RedisShake_6&quot;/&gt;RedisShake使用背景&lt;/h2&gt; 
&lt;p&gt;RedisShake是一个用于在两个Redis实例之间同步数据的工具，满足非常灵活的同步与迁移需求。Redis实例之间的关系其中可能存在（standalone-&amp;gt;standalone），（standalone-&amp;gt;Cluster），（Cluster-&amp;gt;Cluster）等。目前，比较常用的一个数据迁移工具是Redis-Shake ，这是阿里云Redis和MongoDB团队开发的一个用于 Redis 数据同步的工具。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RedisShake_10&quot;/&gt;RedisShake功能说明&lt;/h2&gt; 
&lt;p&gt;RedisShake主要是支持Redis的RDB文件的解析、恢复、备份、同步四个功能：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;恢复（restore）：将 RDB 文件恢复到目标Redis数据库。&lt;/li&gt;&lt;li&gt;备份（dump）：将源 Redis 的全量数据通过RDB文件备份起来。&lt;/li&gt;&lt;li&gt;解析（decode）：读取 RDB 文件，并以 JSON 格式解析存储。&lt;/li&gt;&lt;li&gt;同步（sync）：支持源redis和目的redis的数据同步，支持全量和增量数据的迁移，支持从云下到阿里云云上的同步，也支持云下到云下不同环境的同步，支持&lt;strong&gt;单节点、主从版、集群版之间的互相同步&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;同步（rump）：支持源 Redis 和目的 Redis 的数据同步，仅支持全量迁移。采用scan和restore命令进行迁移，支持不同云厂商不同redis版本的迁移。&lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：如果源端是集群版，可以启动一个RedisShake，从不同的db结点进行拉取，同时源端不能开启move slot功能；对于目的端，如果是集群版，写入可以是1个或者多个db结点。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;RedisShake_22&quot;/&gt;Redis-Shake特性概览&lt;/h2&gt; 
&lt;ul&gt;&lt;li&gt;高性能：全量同步阶段并发执行，增量同步阶段异步执行，能够达到毫秒级别延迟（取决于网络延迟）。同时，我们还对大key同步进行分批拉取，优化同步性能。&lt;/li&gt;&lt;li&gt;在 Redis 5.0、Redis 6.0 和 Redis 7.0 上测试&lt;/li&gt;&lt;li&gt;支持使用lua自定义过滤规则&lt;/li&gt;&lt;li&gt;支持大实例迁移&lt;/li&gt;&lt;li&gt;支持restore模式和sync模式&lt;/li&gt;&lt;li&gt;支持阿里云 Redis 和 ElastiCache&lt;/li&gt;&lt;li&gt;监控体系：用户可以通过我们提供的restful拉取metric来对redis-shake进行实时监控：curl 127.0.0.1:9320/metric。&lt;/li&gt;&lt;li&gt;数据校验：如何校验同步的正确性？可以采用我们开源的redis-full-check。&lt;/li&gt;&lt;li&gt;支持版本：支持2.8-5.0版本的同步，此外还支持codis，支持云下到云上，云上到云上，云上到云下（阿里云目前支持主从版），其他云到阿里云等链路，帮助用户灵活构建混合云场景。&lt;/li&gt;&lt;li&gt;断点续传。支持断开后按offset恢复，降低因主备切换、网络抖动造成链路断开重新同步拉取全量的性能影响。&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/121c676442a68999cea2966a20393278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;RedisShake_37&quot;/&gt;RedisShake执行过程&lt;/h3&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;启动Redis-shake进程，这个进程模拟了一个 Redis 实例，Redis-shake的基本原理就是模拟一个Slave从节点加入源Redis集群，然后进行增量的拉取（通过psync命令）。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Redis-shake进程和数据迁出的源实例进行数据的全量拉取同步，并回放，这个过程和 Redis 主从实例的全量同步是类似的。如下图所示。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8e4c4982ff7f86c8818357ce3e582e21.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_45&quot;/&gt;详细分析上述同步原理&lt;/h4&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;源Redis服务实例相当于主库，Redis-shake相当于从库，它会发送psync指令给源Redis服务实例。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;源Redis实例先把RDB文件传输给 Redis-shake ，Redis-shake 会把RDB文件发送给目的实例。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;源实例会再把增量命令发送给 Redis-shake ，Redis-shake负责把这些增量命令再同步给目的实例。&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;如果源端是集群模式，只需要启动一个redis-shake进行拉取，同时不能开启源端的move slot操作。如果目的端是集群模式，可以写入到一个结点，然后再进行slot的迁移，当然也可以多对多写入。&lt;/p&gt; 
&lt;p&gt;目前，redis-shake到目的端采用单链路实现，对于正常情况下，这不会成为瓶颈，但对于极端情况，qps比较大的时候，此部分性能可能成为瓶颈，后续我们可能会计划对此进行优化。另外，redis-shake到目的端的数据同步采用异步的方式，读写分离在2个线程操作，降低因为网络时延带来的同步性能下降。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RedisShake_57&quot;/&gt;Redis-Shake安装使用&lt;/h2&gt; 
&lt;p&gt;主要有两种方式：下载Release版本的可执行二进制包、下载源码文件进行编译操作这两种方式。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Release_61&quot;/&gt;下载Release版本的可执行二进制包&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/RedisShake/releases&quot;&gt;Download from Release&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/a438d1015459f5999914ef587706e2b1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;点击下载就可以进行直接使用Redis-Shake服务。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_69&quot;/&gt;下载源码文件进行编译操作&lt;/h3&gt; 
&lt;p&gt;除了直接下载可执行包之外，还可以下载源码之后，可以进行运行build.sh文件执行进行编译源码，生成可执行包。可以根据上面的下载中source code进行下载。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/3e5e248c3c7ba21a9ef85306dcf4c048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;或者可以针对于Git进行clone源码仓库，如下所示。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/alibaba/RedisShake
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; RedisShake
&lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; build.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;RedisShake_83&quot;/&gt;运行Redis-Shake服务&lt;/h3&gt; 
&lt;p&gt;首先如果需要进行同步和重放，则需要进行编辑sync.toml文件以及编辑restore.toml.&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;redis-shake 支持三种数据迁移模式：sync、restore 和 scan：&lt;/li&gt;&lt;li&gt;快速开始：数据迁移（使用 sync 模式）&lt;/li&gt;&lt;li&gt;快速开始：从dump.rdb恢复数据（使用 restore 模式）&lt;/li&gt;&lt;li&gt;快速开始：数据迁移（使用 scan 模式）&lt;/li&gt;&lt;li&gt;使用 filters 做数据清洗&lt;/li&gt;&lt;li&gt;运行日志&lt;/li&gt;&lt;li&gt;运行监控&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/bf5c7978d04767cb1f7a702105cbb9b8.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;sync_97&quot;/&gt;启动同步sync运行机制&lt;/h3&gt; 
&lt;h4&gt;&lt;a id=&quot;synctoml_99&quot;/&gt;我们打开或者编辑sync.toml&lt;/h4&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/fc9da36c43cfdb9a53e01f0a9ed084ef.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;synctoml_103&quot;/&gt;sync.toml文件内容&lt;/h5&gt; 
&lt;p&gt;当我们编辑sync.toml文件之后，可以进行配置我们实际情况下的source源redis实例以及target目标redis实例。之后可以配置对应的cpu和相关性能的配置。下面针对于配置进行相关的配置介绍&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;type = &quot;sync&quot; # 同步机制实现

[source] # 源Redis服务实例
version = 5.0 # 填写Redis源服务版本, 例如：2.8, 4.0, 5.0, 6.0, 6.2, 7.0, ...。
address = &quot;127.0.0.1:6379&quot; # 源Redis服务实例 地址+端口
username = &quot;&quot; # 如果Redis没有配置ACL，则可以不填写，否则需要填写用户名 
password = &quot;&quot; # 如果Redis没有配置ACL，则可以不填写，否则需要填写密码
tls = false # 是否开启tls安全机制
elasticache_psync = &quot;&quot; # 是否支持AWS的elasticache

[target]
type = &quot;standalone&quot; # 选择Redis的类型：&quot;standalone：单机模式&quot; or &quot;cluster：集群模式&quot;
version = 5.0  # 填写Redis源服务版本, 例如：2.8, 4.0, 5.0, 6.0, 6.2, 7.0, ...。
# 如果目标Redis服务实例属于cluster集群模式, 那么可以写入其中一个节点的地址和端口.
# redis-shake 会通过`cluster nodes` 命令获取其他的节点地址和端口
address = &quot;127.0.0.1:6380&quot; # 填写的对应的ip加端口
username = &quot;&quot; # 如果Redis没有配置ACL，则可以不填写，否则需要填写用户名 
password = &quot;&quot; # 如果Redis没有配置ACL，则可以不填写，否则需要填写密码
tls = false # 是否开启tls安全机制

[advanced]
dir = &quot;data&quot; # 数据同步的存储目录

# 设置使用的最大CPU核心数, 如果设置了0 代表着 使用 runtime.NumCPU() 实际的cpu cores数量
ncpu = 4

# 开启pprof性能检测的port, 0代表着禁用
pprof_port = 0 

# 开启metric port端口, 0代表着禁用
metrics_port = 0

# log的相关设置
log_file = &quot;redis-shake.log&quot; # 设置对应的日志文件名称
log_level = &quot;info&quot; # debug, info or warn # 设置对应的日志级别
log_interval = 5 # in seconds # 日志打印频次

# redis-shake gets key and value from rdb file, and uses RESTORE command to
# create the key in target redis. Redis RESTORE will return a &quot;Target key name
# is busy&quot; error when key already exists. You can use this configuration item
# to change the default behavior of restore:
# panic:   redis-shake will stop when meet &quot;Target key name is busy&quot; error.
# rewrite: redis-shake will replace the key with new value.
# ignore:  redis-shake will skip restore the key when meet &quot;Target key name is busy&quot; error.
rdb_restore_command_behavior = &quot;rewrite&quot;  # restore的操作类型：panic, rewrite or skip

# pipeline的大小数量阈值
pipeline_count_limit = 1024

# Client query buffers accumulate new commands. They are limited to a fixed
# amount by default. This amount is normally 1gb.
target_redis_client_max_querybuf_len = 1024_000_000

# In the Redis protocol, bulk requests, that are, elements representing single
# strings, are normally limited to 512 mb.
target_redis_proto_max_bulk_len = 512_000_000
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;RedisRedis_166&quot;/&gt;Redis单机实例同步到Redis单机实例&lt;/h4&gt; 
&lt;p&gt;修改sync.toml，改为如下配置。&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[source]
address = &quot;ip:6379&quot;
password = &quot;&quot;

[target]
type = &quot;standalone&quot;
address = &quot;ip:6379&quot;
password = &quot;r-bbbbb:xxxxx&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;_redisshake_181&quot;/&gt;启动 redis-shake：&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;./redis-shake sync.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;RedisRedis_187&quot;/&gt;Redis单机实例同步到Redis集群实例&lt;/h4&gt; 
&lt;p&gt;修改 sync.toml，改为如下配置：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[source]
address = &quot;r-aaaaa.redis.zhangbei.rds.aliyuncs.com:6379&quot;
password = &quot;r-aaaaa:xxxxx&quot;

[target]
type = &quot;cluster&quot;
address = &quot;192.168.0.1:6379&quot; # 这里写集群中的任意一个节点的地址即可
password = &quot;r-ccccc:xxxxx&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a id=&quot;_redisshake_202&quot;/&gt;启动 redis-shake：&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;./redis-shake sync.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;a id=&quot;RedisRedis_208&quot;/&gt;Redis集群实例同步到Redis集群实例&lt;/h4&gt; 
&lt;h5&gt;&lt;a id=&quot;1_redisshake_210&quot;/&gt;方法1：手动起多个 redis-shake&lt;/h5&gt; 
&lt;p&gt;集群C有四个节点：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;192.168.0.1:6379&lt;/li&gt;&lt;li&gt;192.168.0.2:6379&lt;/li&gt;&lt;li&gt;192.168.0.3:6379&lt;/li&gt;&lt;li&gt;192.168.0.4:6379&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;把4个节点当成4个单机实例，参照单机到集群 部署 4 个 redis-shake 进行数据同步。不要在同一个目录启动多个 redis-shake，因为 redis-shake 会在本地存储临时文件，多个 redis-shake 之间的临时文件会干扰，正确做法是建立多个目录。&lt;/p&gt; 
&lt;h5&gt;&lt;a id=&quot;2_cluster_helperpy__221&quot;/&gt;方法2：借助 cluster_helper.py 启动&lt;/h5&gt; 
&lt;p&gt;脚本&lt;a href=&quot;https://github.com/alibaba/RedisShake/blob/v3/scripts/cluster_helper/cluster_helper.py&quot;&gt;cluster_helper.py&lt;/a&gt;可以方便启动多个redis-shake从集群迁移数据，效果等同于方法1。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_225&quot;/&gt;注意&lt;/h6&gt; 
&lt;p&gt;源端有多少个分片，cluster_helper.py 就会起多少个 redis-shake 进程，所以如果源端分片数较多的时候，需要评估当前机器是否可以承担这么多进程。&lt;/p&gt; 
&lt;p&gt;cluster_helper.py 异常退出的时候，可能没有正常退出 redis-shake 进程，需要 ps aux | grep redis-shake 检查。&lt;/p&gt; 
&lt;p&gt;每个 redis-shake 进程的执行日志记录在 RedisShake/cluster_helper/data/xxxxx 中，反馈问题请提供相关日志。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;_233&quot;/&gt;依赖&lt;/h6&gt; 
&lt;p&gt;Python 需要 python3.6 及以上版本，安装 Python依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd RedisShake/cluster_helper
pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_242&quot;/&gt;配置&lt;/h6&gt; 
&lt;p&gt;修改 sync.toml:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;type = &quot;sync&quot;

[source]
address = &quot;192.168.0.1:6379&quot; # 集群 C 中任意一个节点地址
password = &quot;r-ccccc:xxxxx&quot;

[target]
type = &quot;cluster&quot;
address = &quot;192.168.1.1:6380&quot; # 集群 D 中任意一个节点地址
password = &quot;r-ddddd:xxxxx&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;&lt;a id=&quot;_259&quot;/&gt;运行&lt;/h6&gt; 
&lt;pre&gt;&lt;code&gt;cd RedisShake/cluster_helper
python3 cluster_helper.py ../redis-shake ../sync.toml
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt;&lt;li&gt;参数 1 是 redis-shake 可执行程序的路径&lt;/li&gt;&lt;li&gt;参数 2 是配置文件路径&lt;/li&gt;&lt;/ul&gt; 
&lt;h5&gt;&lt;a id=&quot;redisshake_269&quot;/&gt;查看redis-shake的日志信息&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;[root@redis ~]# redis-shake ./redis-shake.toml
2022-08-26 11:20:28 INF GOOS: linux, GOARCH: amd64
2022-08-26 11:20:28 INF Ncpu: 3, GOMAXPROCS: 3
2022-08-26 11:20:28 INF pid: 21504
2022-08-26 11:20:28 INF pprof_port: 0
2022-08-26 11:20:28 INF No lua file specified, will not filter any cmd.
2022-08-26 11:20:28 INF no password. address=[127.0.0.1:6380]
2022-08-26 11:20:28 INF redisWriter connected to redis successful. address=[127.0.0.1:6380]
2022-08-26 11:20:28 INF no password. address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF psyncReader connected to redis successful. address=[127.0.0.1:6379]
2022-08-26 11:20:28 WRN remove file. filename=[4200.aof]
2022-08-26 11:20:28 WRN remove file. filename=[dump.rdb]
2022-08-26 11:20:28 INF start save RDB. address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF send [replconf listening-port 10007]
2022-08-26 11:20:28 INF send [PSYNC ? -1]
2022-08-26 11:20:28 INF receive [FULLRESYNC 1db7c7618b6d0af25ffafb1645d4fba573624d02 0]
2022-08-26 11:20:28 INF source db is doing bgsave. address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF source db bgsave finished. timeUsed=[0.09]s, address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF received rdb length. length=[194]
2022-08-26 11:20:28 INF create dump.rdb file. filename_path=[dump.rdb]
2022-08-26 11:20:28 INF save RDB finished. address=[127.0.0.1:6379], total_bytes=[194]
2022-08-26 11:20:28 INF start send RDB. address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF RDB version: 8
2022-08-26 11:20:28 INF RDB AUX fields. key=[redis-ver], value=[4.0.14]
2022-08-26 11:20:28 INF RDB AUX fields. key=[redis-bits], value=[64]
2022-08-26 11:20:28 INF RDB AUX fields. key=[ctime], value=[1661484028]
2022-08-26 11:20:28 INF RDB AUX fields. key=[used-mem], value=[1897096]
2022-08-26 11:20:28 INF RDB repl-stream-db: 0
2022-08-26 11:20:28 INF RDB AUX fields. key=[repl-id], value=[1db7c7618b6d0af25ffafb1645d4fba573624d02]
2022-08-26 11:20:28 INF RDB AUX fields. key=[repl-offset], value=[0]
2022-08-26 11:20:28 INF RDB AUX fields. key=[aof-preamble], value=[0]
2022-08-26 11:20:28 INF RDB resize db. db_size=[1], expire_size=[0]
2022-08-26 11:20:28 INF send RDB finished. address=[127.0.0.1:6379], repl-stream-db=[0]
2022-08-26 11:20:28 INF start save AOF. address=[127.0.0.1:6379]
2022-08-26 11:20:28 INF AOFWriter open file. filename=[0.aof]
2022-08-26 11:20:29 INF AOFReader open file. aof_filename=[0.aof]
2022-08-26 11:20:33 INF syncing aof. allowOps=[0.20], disallowOps=[0.00], entryId=[0], unansweredBytesCount=[0]bytes, diff=[0], aofReceivedOffset=[0], aofAppliedOffset=[0]
2022-08-26 11:20:38 INF syncing aof. allowOps=[0.20], disallowOps=[0.00], entryId=[1], unansweredBytesCount=[0]bytes, diff=[0], aofReceivedOffset=[14], aofAppliedOffset=[14]
2022-08-26 11:20:43 INF syncing aof. allowOps=[0.00], disallowOps=[0.00], entryId=[1], unansweredBytesCount=[0]bytes, diff=[0], aofReceivedOffset=[14], aofAppliedOffset=[14]
2022-08-26 11:20:48 INF syncing aof. allowOps=[0.20], disallowOps=[0.00], entryId=[2], unansweredBytesCount=[0]bytes, diff=[0], aofReceivedOffset=[28], aofAppliedOffset=[28]

&lt;/code&gt;&lt;/pre&gt; 
&lt;hr/&gt; 
&lt;h2&gt;&lt;a id=&quot;Redis__320&quot;/&gt;Redis 哨兵模式&lt;/h2&gt; 
&lt;p&gt;忽略 sentinel 节点，将哨兵拓扑当成普通的主从节点即可，参照 单机到单机的配置：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;source 的 address 写源端的 master 或 slave 节点地址，推荐 slave 节点。&lt;/li&gt;&lt;li&gt;target 的 address 些目的端的 master 节点地址。&lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>801d989e399104e75192953cfe4f0010</guid>
<title>Apache Pulsar: 统一消息流平台 - 知乎</title>
<link>https://toutiao.io/k/c7pefz0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-4em6pe&quot; options=&quot;[object Object]&quot;&gt;&lt;blockquote data-first-child=&quot;&quot; data-pid=&quot;OcqUBrrs&quot;&gt;本文翻译自《Apache Pulsar: A Unified Queueing and Streaming Platform》，作者 Addison Higham。原文链接：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//thenewstack.io/apache-pulsar-a-unified-queueing-and-streaming-platform/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;thenewstack.io/apache-p&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ulsar-a-unified-queueing-and-streaming-platform/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;b&gt;译者简介&lt;/b&gt;&lt;br/&gt;Addison 是 StreamNative 主管工程师。本文译者为刘梓霖 。&lt;/blockquote&gt;&lt;p data-pid=&quot;ZQsf7Koo&quot;&gt;现在我们可以大胆宣言：种种迹象表明，Apache Pulsar 这个开源分布式消息系统正站在现代应用架构和开发的风口浪尖。&lt;/p&gt;&lt;p data-pid=&quot;me5HJg8e&quot;&gt;为什么我们敢于这样讲呢？&lt;/p&gt;&lt;p data-pid=&quot;kzROpotK&quot;&gt;随着工程师团队面对越来越复杂的挑战，解决层出不穷的问题所需的技术和工具也在不断发展。这其中常用的一种工具是消息传递。&lt;/p&gt;&lt;p data-pid=&quot;BIocHB5T&quot;&gt;消息传递基于消息队列。消息在客户端应用程序之间进行异步排列，由一个“broker” 充当各应用程序之间的媒介。&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://xg.zhihu.com/plugin/510914a58a5a91f8fd96306b373e017e?BIZ=ECOMMERCE&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-is-ecommerce=&quot;1&quot; class=&quot;LinkCard internal old&quot;&gt;&lt;span class=&quot;LinkCard-content LinkCard-ecommerceLoadingCard&quot;&gt;&lt;p class=&quot;LinkCard-ecommerceLoadingCardLoadingbar&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/a&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;MMHFCNdD&quot;&gt;在早期的技术中，broker 是相对简单的。但随着实际需求的变化消息系统也随之发生了变化。分布式消息系统便是建立在这个概念的基础上，不仅具有可靠性、可扩展性和持久性的优点，且多个 “broker” 可以帮助分担负载。&lt;/p&gt;&lt;p data-pid=&quot;C_LP8xAG&quot;&gt;大多数的分布式消息系统支持一种类型的语义：流或队列。从以往经验看，每一种都有其最适合的特定类型的场景。Apache Pulsar 的独特之处在于它同时支持流和队列这两种语义。&lt;/p&gt;&lt;p data-pid=&quot;QFuoJgOI&quot;&gt;在探讨使用统一的消息流系统带来的优势之前，让我们先退一步，分别研究一下消息队列和流技术。&lt;/p&gt;&lt;p data-pid=&quot;lcv4bbpL&quot;&gt;流系统是行业中相对较新的创新技术，它可以以有序、低延迟的方式移动大量数据。流系统非常适合于移动数据（比如：日志、指标或者点击事件的数据等）并将其集中到一个位置，同时实现高并发和高吞吐。&lt;/p&gt;&lt;p data-pid=&quot;3pqTFDmG&quot;&gt;举个例子，比如从大型云部署中的 10,000 台机器中获取点击或者指标数据。流系统为这一操作过程提供了便利。&lt;/p&gt;&lt;p data-pid=&quot;olqck-XU&quot;&gt;某种程度上，消息队列与流系统有些类似，即将多个系统链接在一起。然而，消息队列历史较久，而且更多地是关于点对点的通信，帮助广泛的应用程序交换信息。&lt;/p&gt;&lt;p data-pid=&quot;WAEPOeqw&quot;&gt;这两种系统的访问模式也是不同的：流系统专注于按照顺序到达的消息和处理同一批的多个消息组，可能也用于聚合或转换数据。&lt;/p&gt;&lt;p data-pid=&quot;XA-1Yty7&quot;&gt;相比之下，在消息队列中，事件通常是一次处理一个。就像在工作队列中一样，每个消息可能就代表某个特定的“任务”。换句话说，流用于移动和处理大量的数据组，而队列往往是关于单个消息的精细化处理，以促进系统中的某些工作。&lt;/p&gt;&lt;p data-pid=&quot;BOu8WU8z&quot;&gt;最常见的流平台是 Apache Kafka 和 AWS 的 Kinesis。最常见的队列系统包括 RabbitMQ 和 ActiveMQ 。在云上，还有 Google 的 Pub/Sub、AWS SQS 和 SNS。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Apache Pulsar：统一消息队列和流&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;7cbFxaCb&quot;&gt;首先，简单回顾一下历史。&lt;/p&gt;&lt;p data-pid=&quot;2UlUyjfR&quot;&gt;由于需要对非常大规模的工作负载进行队列化，Yahoo 内部最初是在 2010 年左右开发了 Pulsar 。Yahoo 服务规模庞大，分布在许多不同的团队和数据中心。&lt;/p&gt;&lt;p data-pid=&quot;zQp2fQJ2&quot;&gt;当时，他们正在使用 流行的 Java 社区标准Java 消息服务（JMS），这，就需要一个新系统既可以满足 JMS 标准要求，又能具备分布式和可扩展性。&lt;/p&gt;&lt;p data-pid=&quot;7lR8-5w4&quot;&gt;尽管 Pulsar 早期原型系统 API 最初专注于消息传递这一场景，但该系统的架构设计也使其成为流系统任务处理的理想方案，这使得 Yahoo 团队能够在更广泛的场景下灵活使用该系统。&lt;/p&gt;&lt;p data-pid=&quot;BEmairiE&quot;&gt;这项被称为 “Cloud Messaging Service” 的服务在 Yahoo 内部落地非常成功，广为人知。借此势头，Yahoo 继续在内部开发 Cloud Messaging Service，并于 2016 年将其开源，这就是 Pulsar 项目的由来。2018 年，该项目毕业成为为 Apache 软件基金会的顶级项目。从此之后，Pulsar 在全球企业的落地迅速增长。原因显而易见：许多企业如 Yahoo ，都需要更具可扩展性的消息系统解决方案。&lt;/p&gt;&lt;p data-pid=&quot;An71i0Of&quot;&gt;虽然像 Apache Kafka 这样的流系统有能力进行进一步的扩展 （在数据再平衡方面仍需要投入大量的人力）— 但其流系统的 API 功能仍然有些差强人意。它不仅要求开发者在纯流模式的限制下工作，同时还要求开发人员学习一种新的思维和设计方式，这使得消息场景变得更加困难。&lt;/p&gt;&lt;p data-pid=&quot;kF5ZKnog&quot;&gt;但有了 Pulsar ，情况就截然不同了。开发人员可以使用熟悉的 API， 以熟悉的方式工作；同时也提供了更多的可扩展性和流系统的能力。&lt;/p&gt;&lt;p data-pid=&quot;G-TIjC6K&quot;&gt;同时满足可扩展消息服务和流处理这两个需求是我在 Instructure 的团队面临的挑战之一。为了解决这个问题，我们发现了 Pulsar。&lt;/p&gt;&lt;p data-pid=&quot;W0a8nNes&quot;&gt;Instructure 的大规模业务场景需要高可扩展消息系统支撑。起初，我们试图通过围绕流系统技术架构来重新构建。机缘巧合之下我们发现 Apache Pulsar 可以帮助团队在不需要基于流重新设计构架的复杂性的前提下去获得所需要的消息系统能力。。&lt;/p&gt;&lt;p data-pid=&quot;m4FBcYzf&quot;&gt;当 Instructure 团队开始使用 Pulsar 时，Pulsar 的带来的好处立竿见影，于是便在生产系统上开始大规模部署 Pulsar。Instructure 采用 Pulsar 后，应用程序之间的通信变得更加便捷，我们也可以在各个团队之间共享数据。&lt;/p&gt;&lt;p data-pid=&quot;4qooKhoR&quot;&gt;然而，Pulsar 不仅能很好地解决消息工作负载，其所支持的流处理也是大多数企业内部存在的真正需求。Pulsar 提供了一个比其他流系统更容易使用、操作和集成的系统。&lt;/p&gt;&lt;p data-pid=&quot;bfEgB7Lz&quot;&gt;例如，Pulsar 高可扩展。当需要增加集群规模时，用户不需要 “rebalance” 集群。它在支持多租户和数百万级主题的同时，也不会大幅增加延迟，这使得许多团队可以轻松共享一个集群。&lt;/p&gt;&lt;p data-pid=&quot;yWAOuMDf&quot;&gt;这意味着企业不再需要在研发自己的工具上投入大量精力。他们从而可以专注于从消息和数据中挖掘价值，而不是在管理基础设施上浪费过多时间。&lt;/p&gt;&lt;p data-pid=&quot;xJvV0WNI&quot;&gt;对于 Iterable （著名跨渠道营销平台）来说，Pulsar 提供了可扩展性、高可用性来取代 RabbitMQ 并最终取代 Iterable 内部其他消息系统——包括 Kafka 和 Amazon SQS。正如 Greg Methvin 所指出，Apache Pulsar 不仅非常适合流处理场景，也非常适合消息队列需求。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Apache Pulsar 优势&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;h8IL5fz-&quot;&gt;已经采用了 Apache Pulsar 的人可能已经发现，与同类别的 RabbitMQ 或 ActiveMQ 等系统相比，Apache Pulsar提供了更具可扩展性的消息队列功能，以及更多的可扩展和更易上手的的流系统功能（其内置功能包括跨地域复制和多租户）。&lt;/p&gt;&lt;p data-pid=&quot;p3pxtqvD&quot;&gt;值得一提的是， 使用 Apache Pulsar 是一个简单的数学题：一个统一了流和消息队列的平台比同时运维两套流平台和消息队列平台少至少一项技术。用户只需要使用一种技术就可以更轻松地开发产品并将其推向市场，且更高效高质量地利用企业已有数据。&lt;/p&gt;&lt;p data-pid=&quot;6Wd2cvif&quot;&gt;除了增加的 IT 成本和运维两种独立技术的支出外，流系统和队列系统还没有很好地集成，从而导致数据孤岛现象的出现。而当拥有了一个统一的系统时，你可以处理更多事情，也可以基于同一底层系统打通各种数据和应用程序、数据查询、数据分析、流系统等。&lt;/p&gt;&lt;p data-pid=&quot;QXw0ulHW&quot;&gt;使用 Apache Pulsar 时无需将数据导出到另一个系统或团队中，因为企业基于同一项中台技术、同一个中台存储服务来囊括数据的整个生命周期，用户不再需要手动处理数据生命周期的不同阶段。有了 Apache Pulsar ，架构得到极大简化，数据流转和数据治理也更加轻松。&lt;/p&gt;&lt;p data-pid=&quot;QXSXtTZH&quot;&gt;正如 Iterable 资深工程师 Greg Methvin 所总结的那样，“Pulsar 的独特之处在于它不仅支持流和队列的场景，同时还支持更广泛的功能。它已是我们目前使用的架构中其他分布式消息系统的替代品。此外，Pulsar 还涵盖了我们对 Kafka、RabbitMQ 和 SQS 的所有使用场景，我们可以专心围绕单个统一系统去构建专业知识和工具。”&lt;/p&gt;&lt;p data-pid=&quot;HhqRisqE&quot;&gt;使用 Apache Pulsar，鱼和熊掌可以兼得。&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://xg.zhihu.com/plugin/8f4ca0fdeac6fe41a94c9054395b7542?BIZ=ECOMMERCE&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-is-ecommerce=&quot;1&quot; class=&quot;LinkCard internal old&quot;&gt;&lt;span class=&quot;LinkCard-content LinkCard-ecommerceLoadingCard&quot;&gt;&lt;p class=&quot;LinkCard-ecommerceLoadingCardLoadingbar&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/a&gt;&lt;p data-pid=&quot;gzMlTduO&quot;&gt;关注&lt;b&gt;公众号「Apache Pulsar」&lt;/b&gt;，获取干货与动态&lt;/p&gt;&lt;p data-pid=&quot;UQ0bkmPx&quot;&gt;加入 Apache Pulsar 中文交流群   &lt;/p&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d65ba22438df392aa35d1701ed99dac7</guid>
<title>9 Must-Read Books for Software Engineers in 2023</title>
<link>https://toutiao.io/k/3mo6bsr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section class=&quot;post-content&quot;&gt;&lt;p&gt;As a software engineer, staying up-to-date with the latest developments and best practices is essential for growth. One of my favorite (and what I feel is overlooked) methods for growth is reading books. We spend a large part of our day reading Stack Overflow and blog posts, but books have really helped me see things in a different light or understand something I do not come across on a daily basis.&lt;/p&gt;
&lt;p&gt;In 2022, I read a number of books that were extremely valuable to my career as a software engineer. Here are nine that I highly recommend for software engineers at all stages of their careers to consider adding to their reading lists for 2023:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/ec18f32904.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/59783101-build&quot;&gt;“Build: An Unorthodox Guide to Making Things Worth Making”&lt;/a&gt; by Tony Fadell is a must-read for anyone looking to create things that matter. Fadell shares his unique perspective on how to focus on small, achievable goals and pivot when necessary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/475c3984d0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/38191426-the-phoenix-project&quot;&gt;“The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win”&lt;/a&gt; by Gene Kim, Kevin Behr, and George Spafford is a captivating story about an IT manager who must turn around a failing project. Along the way, he learns about the principles of DevOps and how to apply them to his work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/7337cde14c.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/20657434-the-hard-thing-about-hard-things&quot;&gt;“The Hard Thing About Hard Things: Building a Business When There Are No Easy Answers”&lt;/a&gt; by Ben Horowitz offers candid and practical advice on the challenges of entrepreneurship. Horowitz covers topics such as hiring, firing, and managing through tough times, and provides valuable insights on how to navigate the ups and downs of building a business.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/a97bedecb3.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/43713.Structure_and_Interpretation_of_Computer_Programs&quot;&gt;“Structure and Interpretation of Computer Programs,&quot;&lt;/a&gt; also known as the “Wizard Book,” is a classic text that covers the fundamental concepts of computer science and programming using the Lisp language. This book is a must-read for any serious software engineer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/5f538d59de.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/43701534-a-philosophy-of-software-design&quot;&gt;“A Philosophy of Software Design”&lt;/a&gt; by John Ousterhout argues that good software design is all about simplicity and clarity. He offers practical advice on how to achieve these qualities in your own code. This is a good one to read even on a yearly basis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/45d7f5784d.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/50701156-the-pragmatic-programmer&quot;&gt;“The Pragmatic Programmer: From Journeyman to Master”&lt;/a&gt; by Andrew Hunt and David Thomas is a comprehensive guide to becoming a better software engineer. It covers a wide range of topics, including debugging, testing, and refactoring, and is filled with useful tips and techniques. Make sure to pick up the 20th anniversary edition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/e1d2ad7014.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/45303387-an-elegant-puzzle&quot;&gt;“An Elegant Puzzle: Systems of Engineering Management”&lt;/a&gt; by Will Larson discusses the challenges and opportunities of managing software development teams. Larson covers topics such as building effective processes, setting goals, and creating a positive culture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/a37debf5ab.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/48816586-software-engineering-at-google&quot;&gt;“Software Engineering at Google: Lessons Learned from Programming Over Time”&lt;/a&gt; by Titus Winters, Tom Manshreck, and Hyrum Wright offers a behind-the-scenes look at how Google approaches software development. It covers topics such as code review, testing, and technical debt, and provides valuable insights into how to build reliable and scalable systems.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grantisom.com/uploads/2023/96ce2ec5a6.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/36645100-inspired&quot;&gt;“INSPIRED: How to Create Tech Products Customers Love”&lt;/a&gt; by Marty Cagan is a must-read for anyone looking to create successful tech products. Cagan covers topics such as defining the product vision, building a strong team, and gathering customer feedback, and provides practical advice on how to apply these principles to your own work. Commonly recommended for product managers, I think its a great read for engineers as well as it will help when working cross-functionally with your product team.&lt;/p&gt;
&lt;p&gt;These books provided invaluable insights and kept me motivated and inspired throughout the year. “An Elegant Puzzle” was particularly helpful in figuring out how to more effectively handle support issues within my team, while “Software Engineering at Google” offered valuable guidance as we were setting up a new project and repository. I hope this list of recommendations will provide some useful reading options for you in 2023 as you continue to grow and develop in your software engineering career.&lt;/p&gt;
&lt;/section&gt;

  
  
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>93cc8bbf97916eabbb3c35c56c391f06</guid>
<title>【五万言】Rust 2022 生态版图调研报告（上）</title>
<link>https://toutiao.io/k/vivd6rq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去年我写了 &lt;span&gt;2021 年 Rust 生态版图调研报告 | 星辰大海（上）&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 和 &lt;span&gt;（下）&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; ，大家能看到 Rust 在各个行业领域中开始暂露头角。2022 年，在政治动荡、经济下行和疫情肆虐的世界大环境下，Rust 却迎来了高质量的发展。2022 年，我愿称之为 Rust 发展元年。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;系列目录&lt;/h1&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Rust 2022 漫谈&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust 2022 全球商业应用盘点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust 2022 安全参考&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Rust 2022 开源生态盘点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 2022 漫谈&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;踏上新的征程：Rust 2024&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 2021 Edition 发布以后，官方就开始制定 Rust 2024 Edition 的路线图了。Rust Edition 是每三年发布的一个大版本（版次）。在 2022 年 4 月，官方博客宣布 Rust 2024 Roadmap 。让我们了解一下 Rust 的下一步愿景是什么。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 2024：广泛应用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 的目标是成为一门赋予每个人构建可靠且高效软件能力的语言。Rust 不仅需要设计和实现一种具有优秀库和优秀工具的优秀语言，还需要维护一个优秀的支持社区。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 2024 Edition 的目标是广泛使用，即，让越来越多的人开始使用 Rust 。为了达到这个目标，2024 Edition 需要关注以下三个重点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;拉平 Rust 语言的学习曲线。让 Rust 更容易为新用户和现有用户所用，并让解决难题变得更容易。这样可以吸引更多新的 Rust 用户。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增强 Rust 用户间的彼此合作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让 Rust  Project (语言自身项目）的贡献者更加方便&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;拉平学习曲线&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建立大型 Rust 用户团队的公司报告说，Rust 工程师的典型的上岗时间约为 3-6 个月。当然，一旦人们学习了 Rust，他们通常会喜欢上它。即便如此，许多人表示在使用它时感觉“认知开销”很高，而“学习曲线”仍然是不使用 Rust 的最常见原因。事实是，即使在您了解了 Rust 借用检查器的工作原理之后，仍然有许多“小细节”需要正确处理才能让您的 Rust 程序编译。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 Rust 2024 目标是让开发者能够直接关注问题域的“固有复杂性”，并尽可能避免来自 Rust 的“意外复杂性”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现这一愿景的计划是专注于四个高级目标（按从广义到精确的顺序）：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;更精确的分析，更少的繁琐：&lt;/strong&gt;通过改进借用检查器、类型推断等，使编译器能够更好地识别代码何时正确。识别并消除“样板”模式，例如必须在各处复制和粘贴同一组 where 子句。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;**更轻松地表达自己：必要时扩展语言，以便开发者可以更直接地表达他希望代码执行的操作。在某些情况下，这采用语法糖的形式（例如 let-else），但在其他情况下，它可能意味着扩展类型系统以能够描述新模式（例如泛型关联类型）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;改进异步支持&lt;/strong&gt;：将我们的&lt;code&gt;async/await&lt;/code&gt;支持扩展到当前的“MVP”之外，以包括 trait 中的&lt;code&gt;async fn&lt;/code&gt;、&lt;code&gt;async drop&lt;/code&gt;和支持异步愿景文档路线图所需的其他功能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提升&lt;code&gt;dyn Trait&lt;/code&gt;可用性&lt;/strong&gt;：**拓宽可以使用&lt;code&gt;dyn&lt;/code&gt;的 trait 集，并使使用&lt;code&gt;dyn&lt;/code&gt;更接近于使用泛型。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;增强 Rust 用户间的彼此合作&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 结合了所有权和借用、底层系统控制以及过程宏等强大的可扩展性机制，使其成为编写库的绝佳语言。而且，多亏了 Cargo，在程序中使用一个库只需要几行代码。尽管如此，仍有许多事情是库作者不能做或不容易做到的。例如，他们无法控制用户看到的错误消息或部署需要特殊选择加入的“Unstable”功能。Rust 2024 希望通过帮助管理功能生命周期或扩展库的功能来构建使库作者能够更好地为用户服务的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 2024 希望追求能够在生态系统中进行更多探索的变化，实现这一愿景的计划是专注于四类工作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;功能生命周期&lt;/strong&gt;：帮助库作者在功能从实验阶段过渡到最终完成阶段时为其提供支持。帮助库作者管理他们的开发生命周期和演变。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;更丰富的抽象&lt;/strong&gt;：扩展语言让库作者表达更丰富的抽象。比如支持 GAT ，让开发者编写更通用的库。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;定制开发人员体验&lt;/strong&gt;：许可库作者可以定制开发人员体验，例如，定制未实现 trait 或引入自定义 lints 时用户收到的错误消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;互操作性&lt;/strong&gt;：库生态系统可以轻松协调，使库协同工作，而无需将它们捆绑在一起。库作者可以根据需要编写可在多种环境中移植或特定于一种环境的代码。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;让 Rust  Project 的贡献者更加方便&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 语言自身也是一个 Rust 项目，虽然 Rust 语言项目非常活跃，但是当潜在贡献者想要对 Rust 项目贡献时，可能无法弄清楚感兴趣或想要贡献的某些特定事物的状态。因此 Rust 官方团队需要一个系统，以便这些贡献者可以很容易地知道 Rust 项目的状态而更容易地找到贡献点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 2024 实现这一愿景的计划是将重点放在四类工作上。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一目了然地看到状况。潜在贡献者能够很容易地识别出语言团队正在积极开展哪些工作，以及这些设计已经取得了多大进展。希望每一个跟踪问题都能清楚地识别出需要哪些 &quot;下一步 &quot;来推动该特定功能的完成，并确保这些步骤被清楚地记录下来，供可能的贡献者参考。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;清晰的所有者和清晰的沟通。Rust是通过共识运作的，但这并不意味着每个人都必须知道所有的细节。因此需要一个系统，对需要完成的工作有明确的所有者，最好是不在 Lang 团队中的所有者。简单的分工会导致日后的冲突，所以我们也需要频繁的沟通和更新，以确保每个人都能了解事情的整体发展方向，并尽早地提出问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高效、开放的流程与工具支持。官方团队一直在寻找方法来改善他们的运作方式。他们注意到的一点是，由机器人或其他工具支持的流程往往能更好地工作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2022 语言改进看点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年 Rust 语言一共发布 11 个稳定版本（1.58～1.66），从语言特性、编译器到库 API 均有改进。下面分别从这三方面罗列了一些看点。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;语言特性&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;字符串格式化支持捕获变量的形式&lt;code&gt;{ident}&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;*const T&lt;/code&gt; 现在支持常量上下文中解引用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型结构体中使用 &lt;code&gt;Unsize&lt;/code&gt;的规则更加宽松  ，参考 relaxed_struct_unsize 跟踪 issue&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定新的 asm！和 global_asm！适用于 x86、x86_64、ARM、Aarch64 和 RISC-V&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定解构赋值，比如支持这种形式&lt;code&gt;(a, (b.x.y, c)) = (0, (1, 2));&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定常量泛型参数支持默认参数值，并移除类型和 const 参数的顺序限制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定&lt;code&gt;#[cfg(panic = &quot;...&quot;)]&lt;/code&gt;为&lt;code&gt;&quot;unwind&quot;&lt;/code&gt;或&lt;code&gt;&quot;abort&quot;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;const fn&lt;/code&gt; 签名现在已经支持   泛型 trait 限定、 返回位置的 &lt;code&gt;impl Trait&lt;/code&gt; 和 函数指针的创建传递转换，以及 &lt;code&gt;extern &quot;C&quot;&lt;/code&gt;或&lt;code&gt;extern &quot;Rust&quot;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NLL 稳定，当前编译器仅使用基于 MIR 的借用检查&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定&lt;code&gt;let else&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定泛型关联类型 (GAT)，重要特性，允许开发者可以更方便地开发更加通用的库和框架。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;未初始化的整数、浮点数和原始指针现在被视为立即 UB。使用 &lt;code&gt;MaybeUninit&lt;/code&gt;是处理未初始化内存的正确方法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不允许对 &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; （哪怕 T 在本地）实现 &lt;code&gt;Drop&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重复的生命周期参数将不被自动省略&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编译器&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;升级到 LLVM 14&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;出现 lint 错误后不要中止编译&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;错误消息在更多地方指向 trait bound obligations 的来源&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将 -Z strip 稳定为 -C strip&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加了更多的 Tier 3 编译目标&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编译器内部完成了统一跨所有平台的 可重入锁 ReentrantMutex 实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为优化编译启用 MIR 内联 这为真实世界的 crate 提供了 3-10% 的编译时间改进。查看性能结果。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;库 与 API&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;copy&lt;/code&gt;和&lt;code&gt;copy_nonoverlapping&lt;/code&gt;重新启用调试检查&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Duration::new&lt;/code&gt; 和相关的一系列函数可以用于常量上下文&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定&lt;code&gt;ops::ControlFlow::is_break&lt;/code&gt; 和&lt;code&gt;ops::ControlFlow::is_continue&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;稳定 &lt;code&gt;std::thread::available_parallelism&lt;/code&gt; ，该函数可以返回程序应使用的默认并行度的估计值，即它可以同时执行的计算数量的限制。也会考虑CPU 配额。例如，在一个有 8 个虚拟 CPU 但配额只允许 50% 使用率的容器中，&lt;code&gt;available_parallelism&lt;/code&gt;将返回 4。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常量上下文中新支持了很多 API ，比如   &lt;code&gt;&amp;lt;*const T&amp;gt;::offset&lt;/code&gt;和&lt;code&gt;&amp;lt;*mut T&amp;gt;::offset&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用基于 futex 的 RwLock 取代了 Linux 上基于 pthread 的 RwLock，另外 Mutex 和 Condvar 也正在被改进&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;标准库中修复了许多不正确的使用&lt;code&gt;mem::uninitialized&lt;/code&gt;的情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增加 &lt;code&gt;thread::scope&lt;/code&gt; 的支持&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;rustdoc 支持递归显示所有 Deref 实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cargo 支持支持缩写&lt;code&gt;--release&lt;/code&gt;为&lt;code&gt;-r&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt; Cargo 将在二进制文件之前完成库的文档化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 &lt;code&gt;std::os::unix::io&lt;/code&gt;中添加&lt;code&gt;/proc/self/mem&lt;/code&gt;. 有关的文档&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cargo 现在可以从workspace继承设置，以便可以将设置集中在一个地方&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rustup组件&lt;code&gt;rust-analyzer&lt;/code&gt;现已在稳定channel上可用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;BTreeMap&lt;/code&gt;修复了一个健全性错误，允许在容器之前删除它借用的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;点评&lt;/strong&gt;：&lt;strong&gt;今年最重要的语言特性就是泛型关联类型（GAT ）的稳定&lt;/strong&gt;。GAT 的稳定带给了 Rust 更高级的抽象方式，允许库和框架开发者开发出更加通用的工具。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 社区热点观察&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust for Linux 进入 Linux 内核&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;参考：Rust for Linux 文档&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年最热的热点就是 Rust for Linux 进入 Linux 6.1 内核。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今年10 月，初始的 Rust 基础设施已被合并到 Linux 6.1 。意味着未来 Rust 编程语言将用于内核驱动程序和其他子系统的代码。但初始的 12.5k 行新代码只提供了底层的基础设施和一些非常基础的集成，据称未来的 PR 将添加更多的子系统抽象、多个 Rust 编写的驱动程序等等。目前，构建具有 Rust 支持的 Linux 内核仍然是可选的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 11 月，领导 Rust for Linux 工作的 Miguel Ojeda 发布了一组优化补丁（ 28 个），为内核提供了更多的 Rust 核心支持代码。这些新的补丁很可能会在 Linux 6.2 合并窗口中看到。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;整个 Android 12 和 13 系统中，Rust 代码中发现的内存安全漏洞为零&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;近日， Google 发文称 Android 中使用了内存安全语言 Rust  之后，发现内存安全漏洞的数量在过去几年/版本中大幅下降，从 2019 年到 2022 年，内存安全漏洞的年度数量从 223 个下降到 85 个。&lt;strong&gt;2022 年是内存安全漏洞不再占 Android 大部分漏洞的第一年&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Android 13 中，大约 21% 的新原生代码（C/C++/Rust）是 Rust。AOSP 中大约有 150 万行 Rust 代码，涵盖新功能和组件，例如 Keystore2、新的超宽带 (UWB) 堆栈、DNS-over-HTTP3、Android 的虚拟化框架 (AVF) 以及各种其他组件及其开源依赖项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;迄今为止，在 Android 的 Rust 代码中发现的内存安全漏洞为零。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们不希望这个数字永远保持为零，但考虑到两个 Android 版本中新 Rust 代码的数量，以及使用它的安全敏感组件，这是一个重要的结果。它表明 Rust 正在实现其防止 Android 最常见漏洞来源的预期目的。在许多 Android 的 C/C++ 组件（例如媒体、蓝牙、NFC 等）中，历史漏洞密度大于 1/kLOC（每千行代码有 1 个漏洞）。基于这个历史漏洞密度，使用 Rust 很可能已经阻止了数百个漏洞进入生产环境。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Android 的 Rust 中使用 unsafe 似乎按预期工作。它很少被使用，当它被使用时，它是一种封装行为，更容易推理和审查安全性。比如，UWB 代码中 unsafe 有两种用法：一种是实现对存储在 Java 对象中的 Rust 对象的引用，另一种是用于拆解该对象。Unsafe 在这种情况下非常有用，因为对这段代码的额外关注使我们能够发现可能的竞争条件并加以防范。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 在 Android 平台上的使用正在增长，但这还没有结束。为了实现提高 Android 范围内的安全性、稳定性和质量的目标，Android 团队决定需要在本机代码的任何地方使用 Rust。目前正在用 Rust 实现用户空间 HAL。在受信任的应用程序中添加了对 Rust 的支持，已将 Android 虚拟化框架中的 VM 固件迁移到 Rust。随着 Android 从 C/C++ 迁移到 Java/Kotlin/Rust，预计内存安全漏洞的数量将继续下降。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 语言引入了吉祥物彩蛋&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你使用 Rust 吉祥物 🦀 定义变量时，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt; &lt;span&gt;let&lt;/span&gt; 🦀 = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 编译器会抛出专属的错误:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;error: Ferris cannot be used as an identifier&lt;br/&gt; --&amp;gt; src/main.rs:2:9&lt;br/&gt;  |&lt;br/&gt;2 |     let 🦀 = 1;&lt;br/&gt;  |         ^^ help: try using their name instead: `ferris`&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🦀 本来是非官方吉祥物，这个彩蛋也许是来自官方的一种文化认可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;rust-analyzer 被纳入 rust-lang 官方仓库中&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rust-analyzer 现在已经成为了 Rust 官方的一员。VSCode 、NeoVIM 和 Emacs 等编辑器对 ra 有很好的支持。如果你使用基于 IntelliJ 平台的 IDE，如 CLion、IDEA 或 PyCharm，则不需要 rust-analyzer，而应该使用JetBrains 的IntelliJ Rust插件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年 rust-analyzer 社区刚起步构建 IDE 的基础，到 2020 年，RFC2912中 就提倡：“将 rust-analyzer 作为官方的 LSP（语言服务器协议）实现”。RFC 在社区的压倒性支持下被接受：它仍然是有史以来投票最多的 Rust RFC。让 ra 成为官方的一员将持续推动该 RFC 的落地。接下来，将 rust-analyzer 宣传为 Rust IDE 支持的极有可能的未来，收集反馈，并根据其积极结果，淘汰当前推荐的语言服务器 RLS。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;来自开源作者的呐喊：“请记住，我的项目是零收入”&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源项目Kind和HVM的作者 Victor Taelin ，收到一位社区中有影响力的人的如是批评：“这个项目背后的人往往会建立令人印象深刻的东西，但后来他突然放弃了这些东西，然后去做点别的……”。这份批评让 Victor 非常难过，因为这位来自社区有影响力的人也给予了 Victor 很多灵感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Victor 公开声明：“&lt;strong&gt;我们只是没有资金&lt;/strong&gt;！看，这不是大公司的工作，甚至不是大团队的工作。80% 的代码仍然是我做的。有一些朋友帮忙，但他们大多是兼职，自愿，还在学习这东西，所以帮助有限。**然而，什么都没有被放弃。我们只是受到我们微小规模的限制。我没有报酬，这不是一家营利性公司，我只是一个创造酷炫、免费技术以推动人类进步的人。我热爱我的工作！不过，如果您确实希望看到我的想法更快地发展，请考虑对它们进行投资”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Victor 说：&lt;strong&gt;不管怎样，HVM 和 Kind 都在积极、热情的开发中，并将继续向前发展，即使有点慢！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来自社区的另一位回复非常暖心：“老实说，即使你放弃了你的项目，我仍然会感谢你的工作。你的输出是创新的，我可以看到它们影响未来的 PL 发展。就我个人而言，我认为你对我自己产生了积极的影响，并且确实帮助激发了我对类型理论的兴趣。综上所述，请不要让一些误导性的批评使您沮丧。只要继续做你最擅长的事情，你就会知道这些年来你已经赢得了很多感激的支持者。”&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 1.65 稳定版发布&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 1.65 稳定版发布带来了 Rust 最重要的特性：泛型关联类型。该特性的重要性可以这么说：如果没有它， Rust 将停滞不前。GAT 非常通用，可以实现许多当前无法编写的模式。有关更多信息，请查看稳定公告。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;虚幻引擎集成 Rust&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;社区中有人将 Rust 集成到了 虚幻引擎（Unreal Engine ）5 中，发布了 unreal-rust。&lt;code&gt;unreal-rust&lt;/code&gt; 使用基于 Bevy 的实体组件系统 (ECS)，然后 Rust 通过 C FFI 与 Unreal 通信，在 Unreal 之上编写&lt;code&gt;AActor&lt;/code&gt;并以 Rust 友好的方式公开其 API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然是个人项目，但非常有创意。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Asahi Lina 谈她用 Rust 编写内核驱动程序的经历&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Asahi Lina 用 Rust 编写了新的 Apple AGX GPU 驱动程序（M1 和 M2）。这些 GPU 运行固件并且具有相当复杂的需要宿主机管理的共享内存数据结构，所以 Lina 一直倾向于 Rust。在使用 Rust 之后，Asahi Lina 如是说：「关于内核中的 Rust 是否有用存在很多奇怪的争论......根据我的经验，它比我想象的更有用！ 我从第一个渲染到一个稳定的桌面，可以运行游戏、浏览器等。在我的驱动程序上工作了大约两天！所有并发错误都随着 Rust 消失了！内存在需要释放时被释放！一旦你学会了让 Rust 与你一起工作，我觉得它会引导你编写正确的代码，甚至超出语言的安全承诺。这真的很神奇！✨」&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;NSA 发布关于如何防范软件内存安全问题的指南&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;美国国家安全局 (NSA) 发布了一份指南，以帮助软件开发人员和操作员预防和缓解软件内存安全问题，这些问题占可利用漏洞的很大一部分。建议使用内存安全的Rust 语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;NSA 方面表示，内存安全问题在可利用的漏洞中占比很大。并引用了微软的数据指出，该公司从 2006 年到 2018 年 70% 的漏洞是由于内存安全问题造成的；谷歌的 Chrome 在几年内也发现了类似比例的内存安全漏洞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该组织认为，恶意的网络行为者会利用不良的内存管理问题来访问敏感信息、颁布未经授权的代码执行、以及造成其他负面影响，而这些通常会危及设备并成为大规模网络入侵的第一步。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 连续 7 年荣获 Stackoverflow 最受欢迎语言&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每年面向百万开发者的Stackoverflow 调研结果显示，Rust 再次拿下最受欢迎语言，今年是连续第七年收获此殊荣。并且，在今年 11月的 TIOBE 编程语言排行榜中，Rust 也首次进入了前二十，暂排第 17 位。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 基金会成员增加到了 39 家&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2021 年2 月9 日 Rust 基金会成立之初，只有Mozilla、Amazon、华为、谷歌、微软五家创始白金成员，截止到今天（2022.12月）已经有 39 家不同领域的头部公司成为了Rust 基金会成员，共同推动 Rust 在各自领域的落地。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;本节小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年，是新的起点。在 2021 Edition 发布之后，官方又起草和制定了 2024 Edition 路线图，并且在该路线图的指导下开启了新的征程。Rust 2024 的目标是让 Rust 广泛应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022年，Rust 语言特性上取得了重大进展，稳定发布了泛型关联类型。这一特性的发布将解锁 Rust 语言高阶统一抽象，促进生态库和框架的长足发展，以及 Rust 异步特性向零成本抽象的目标更近了一步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年，最受人们关注的是 Rust for Linux 进入Linux 内核这件事。虽然当前进入内核的只是初步基础补丁，但这关键的一步已经为未来 Rust 在 Linux 内核领域发展奠定了很好的基础。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年，也是收获硕果的一年。Google Android 团队宣布，&lt;strong&gt;2022 年是内存安全漏洞不再占 Android 大部分漏洞的第一年&lt;/strong&gt;。Android 13 已经有大约 21% 的新原生代码（C/C++/Rust）是 Rust。AOSP 中大约有 150 万行 Rust 代码，涵盖新功能和组件。并且，&lt;strong&gt;迄今为止，在 Android 的 Rust 代码中发现的内存安全漏洞为零。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年，我们也看到社区中一些个人开发者，虽然遭遇不公平的流言蜚语，依然对 Rust 热爱依旧，在零收入的状况下默默地使用 Rust 实现自己的开源项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年，可以说是 Rust 语言的发展元年。随着越来越多的公司采用 Rust ，Rust 变得越来越受欢迎。展望未来，我们衷心希望 Rust 2024 Edition 发布目标，让 Rust 广泛应用，可以圆满实现。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 2022 全球商业化应用盘点&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Rust 基金会成员应用盘点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust 初创产品&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust 领域应用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;总结&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年是 Rust 语言距离稳定版正式发布以来已经走过的第七年。从 Rust 发布以来，就一直受到广大开发者的欢迎。在 Stackoverflow 来自 180 个国家 7万3千多名开发者的投票调查中，Rust 连续七年荣获最受欢迎的编程语言，87% 的开发人员希望使用 Rust 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年也距离 Rust 基金会成立的第二年。在 2021 年2 月9 日 Rust 基金会成立之初，只有Mozilla、Amazon、华为、谷歌、微软五家创始白金成员，截止到今天（2022.12月）已经有 39 家不同领域的头部公司成为了Rust 基金会成员，共同推动 Rust 在各自领域的落地。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年在 Rust 基金会成员公司之外，也有不少公司开始使用 Rust。其中包含初创企业，使用 Rust 从头构建产品；也有成立多年的老牌公司，使用 Rust 来改进生产。Rust 开发者数量也逐渐增多。据开发者调查分析公司 SlashData 发布了一份题为“第 22 届开发者国家状况”的报告指出，从 2020 年 Q1 季度到 2022 年 Q1 季度，Rust 语言的开发者用户量从 60 万猛增到了 220 万。TIOBE 编程语言排行榜2022 年 11 月榜单中，Rust 语言进入了前 20 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以说，2022 年是 Rust 语言开始广泛应用的元年。本文就让我们来盘点一下 Rust 在全球商业化领域的应用状态。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 基金会成员应用盘点&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;Rust 基金会成员投资 Rust ，尤其是白金成员们，是在投资 Rust 的可持续性，他们认为应该使用这种语言来构建可持续且安全节能的解决方案。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;白金成员如何应用 Rust&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 AWS，Rust 已迅速成为大规模构建基础设施的关键。Firecracker是一种开源虚拟化技术，为AWS Lambda和其他无服务器产品提供支持，它于 2018 年公开发布。AWS 使用 Rust 来交付Amazon Simple Storage Service (Amazon S3)、Amazon Elastic Compute Cloud (Amazon EC2)、Amazon CloudFront等服务。2020 年，推出了Bottlerocket，这是一个用 Rust 编写的基于 Linux 的容器操作系统。Amazon EC2 团队使用 Rust 作为新AWS Nitro 系统组件的首选语言，包括敏感应用程序，例如Nitro Enclaves（用于处理机密数据的隔离 EC2 环境）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，过去一年，Amazon Prime Video 使用了 WASM 和 egui 为超过 8k 多种设备类型更新其应用向数百万客户提供内容（例如游戏机、电视、机顶盒和流媒体等）。他们认为对 Rust 和 WebAssembly 的投资得到了回报，经过一年的开发，共编写了 37,000 行 Rust 代码，显著地提高了性能、稳定性和 CPU 消耗并降低了内存利用率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Google 将 Rust 应用于Chromium、 Android 和 Fuchsia OS 中，其中 Chromium 对 Rust 支持是实验性的。开发者可以使用 Rust 为 Android 和 Fuchsia OS 开发组件，并且 Rust 在 Android 和 Fuchsia OS 内部代码使用超过了一定的比例，尤其是 Fuchsia OS 中 Rust 代码占比已经超过 50%。因为其内部 Cpp 代码比较多，所以 Google 联合 Meta (原 Facebook) 一起开发了 cxx 用于和 Cpp 安全交互。在今年 10 月份，Google 又推出基于开源 RISC-V 芯片的嵌入式系统的新型安全操作系统 KataOS。Sparrow 是 KataOS 的参考实现，它运行在seL4 之上，几乎完全用 Rust 编写。该操作系统不适用于台式机或智能手机，而是用于物联网，可能用于智能家居。目标是为嵌入式硬件或边缘设备构建可验证的安全操作系统，例如用于捕获图像的网络连接相机，这些图像在设备上或云中处理以进行机器学习。在最新发布的 Android 13 版本中，Google 也宣布在 Android 13 中，大约 21% 的新原生代码（C/C++/Rust）是 Rust。AOSP 中大约有 150 万行 Rust 代码，涵盖新功能和组件。并且，&lt;strong&gt;迄今为止，在 Android 的 Rust 代码中发现的内存安全漏洞为零。&lt;/strong&gt; 为了实现提高 Android 范围内的安全性、稳定性和质量的目标，Android 团队表示需要能够在代码库中需要本地代码的任何地方使用 Rust。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;华为的目标是引领通信系统软件向安全可信演进，其中 Rust 语言正在发挥很大的作用。华为希望通过部分 C/C++ 代码的迁移，在保证高性能的同时，拥有更高的安全性。在此过程中， 为开发者提供一套自动化工具支持：基于开源的 C2Rust 转译工具， 首先从 C 代码生成 Rust 代码, 然后通过源到源变换工具自动重构。在华为内部还基于 Actor 的并发编程模式开发了 Rust 库，方便程序员充分利用 Rust的语言特性, 例如&lt;code&gt;async/await&lt;/code&gt;等开发异步程序。华为也为 Rust 社区贡献了许多重要的功能特性。例如，为 Rust 编译器提交了一系列代码，使得 Rust 编译目标可以支持&lt;code&gt;ARM AArch64 32&lt;/code&gt;位大端变体ILP32芯片组, 用于华为的通信产品中。这些改进使得华为和友商可以在这些常用网络硬件架构上执行Rust 原生程序。这些代码已经通过华为的 Rust 专家&lt;code&gt;Amanieu d&#x27;Antras&lt;/code&gt; 提交给了 LLVM 编译器, libc 库, 以及 Rust 编译器等开源社区。华为国内工程师 李原 也为 Rust 做了很多贡献，其中包括修复了多个当前并行编译导致的程序错误，(比如串行并行模式在迭代器panic场景的行为一致性、并行编译死锁处理的ICE问题）、分析并优化了多个编译过程中频繁锁同步导致并行编译效率降低的问题(比如生成attributes编号、生成生命周期依赖分析表等等)、优化了编译器中多处诊断信息的生成，(比如查询中layout深度限制、错误using语句的提示信息、let语句中默认类型的提示信息等)，并且在2022年李原主导发起重启 Rust 编译器并行编译工作组，准备为加速 Rust 编译器并行编译做出贡献。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Meta（原Facebook ）从 2016 年开始使用 Rust，也就是该语言的 1.0 版发布一年后。Rust 是它用于 Diem（以前的 Libra）稳定币区块链、Mononoke 源代码控制服务器和Meta 的“用于区块链的新的安全编程语言” Move的主要语言。 选择 Rust 而不是 C++ 对 Meta 来说是一个重大决定，因为它的大部分后端代码都是用 C++ 编写的，这使其成为显而易见的选择。 据 Meta 称，在 Mononoke 被认为取得成功后，Rust 的采用势头强劲，吸引了具有 Python 和 JavaScript 背景的工程师。 现在，Rust 与 Hack、C++ 和 Python 一起成为主要受支持的服务器端语言。Meta现在建议将 Rust 用于编写命令行界面 (CLI) 工具和“性能敏感的后端服务”。Meta 内部也针对 Rust 建立了专门的新手训练营，用于培养 Rust 工程师。Meta 对 Rust 生态的重要贡献之一是 &lt;code&gt;cxx&lt;/code&gt; ，用于 Rust 和 Cpp 之间的安全交互。在 2022年 7 月，Meta 首次宣布 Rust 成为 Meta 支持服务器端使用的编程语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Microsoft 拥有世界上最大的 C/C++ 代码库之一。从 Windows 和 Office 到 Azure 云，其所有核心产品都在其上运行。从2019年开始，微软开始寻找内存安全的语言，与此同时，引入了 Rust 进行尝试。随后在 GitHub 上开源了 Rust for Windows 库  ，供 Rust 开发者们无缝地使用 Windows API。此外，Azure 孵化的团队 DeisLabs 开始尝试用 Rust  构建 Krustlet 来允许开发人员在 Kubernetes 中运行多个 WebAssembly 模块的服务。2022 年微软 Azure首席技术官Mark Russinovich表示，C 和C++不应该用于新项目。“是时候停止使用 C/C++ 启动任何新项目，并将 Rust 用于那些需要非 GC 语言的场景。为了安全性和可靠性，业界应该宣布这些语言已被弃用”。他在 Twitter 上表示，表达的是个人观点，而不是微软的新政策。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;2022 年 DeisLabs 初创团队离职后出来创业创建了 Fermyon 公司 ，专注于 WebAssembly 云产品。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JFrog 于 2022 年 9 月宣布加入了 Rust 基金会成为白金会员。JFrog 提供了一个DevOps 平台 ，并且支持多种主流编程语言。JFrog 加入 Rust 基金会的目的就是为了与 Rust 社区和 Rust 基金会合作，帮助保护软件供应链。JFrog 将识别并消除 Rust 平台和生态系统面临的安全威胁，并修正 Rust 平台问题以防止进一步的风险。随着物联网（IoT）、云计算和大数据的出现，网络安全威胁也越来越大。在过去两年中，Rust 编程语言的使用量增加了两倍，达到 220 万开发人员。JFrog 与非营利组织的合作反映了其从最近采用的覆盖组织软件供应链的安全解决方案中获益的战略。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;金牌成员如何应用 Rust&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Shopify 是加拿大跨国电商公司，在 2022 年 12 月份宣布加入 Rust 基金会，成为基金会第一个金牌会员。Shopify 在服务端一直使用 Ruby 语言，从2021年开始，Shopify 团队开始使用 Rust 实现YJIT，这是一种新的 CRuby 即时 (JIT) 编译器 ，到今年合并到了 Ruby 3.1 版本中。在最近的一次性能测试中，YJIT 的性能比 Ruby 解释器 CRuby 快了 38%。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外， Shopify 也决定采用 Rust 作为公司的系统编程语言，比如编写高性能网络服务器。在 Shopify 看来，&lt;strong&gt;Rust 的一致性、性能、社区生态、生产力、安全和互操作性&lt;/strong&gt;是他们采用 Rust 用于系统编程的原因。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;银牌会员及普通赞助商如何应用 Rust&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 基金会的银牌成员逐渐增多，目前已经达到了 28 家公司。这些公司分布在各个领域。此外，还包括三家非会员普通赞助商。在文后的「Rust 其他领域应用」小节将统计他们的应用信息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 初创产品&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2022 年也可以算作是 Rust 创业元年。因为今年陆续有好几家采用 Rust 的创业公司拿到了巨额融资。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Fermyon&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首当其冲的是 Fermyon 技术公司。在今年十月份，Fermyon 宣布拿到了 2000 万美元的 A 轮融资。并且发布了 Fermyon Cloud 平台。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Fermyon Cloud 旨在使&lt;span&gt;基于 WebAssembly 的应用程序和微服务的&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;部署变得快速和容易。使用 Fermyon 的 Spin 构建工具（基于 Rust 实现），为 WebAssembly 编译和打包应用程序，然后可以立即将其部署到 Fermyon Cloud。Fermymon 的工具链处理将应用程序代码投入生产所需的所有基础设施配置和部署步骤，使应用程序开发人员无需了解有关底层基础设施的任何信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebAssembly 起源于浏览器，针对高安全性和低资源消耗进行了优化。通过将 WebAssembly 引入服务器环境，应用程序可以享受相同的优化，同时使用通用代码库部署到各种环境：云、边缘、物联网或任何组合。Fermyon 以这些概念为基础，将 WebAssembly 引入数据中心和云端。Fermyon 希望实现类似于 Java 的“一次编写，随处运行”的承诺，同时又具有 Heroku 的易用性。它使开发人员无需过多考虑基础架构，从而有助于消除应用程序开发中的摩擦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“使用 Fermyon Spin，开发人员可以快速创建 WebAssembly 微服务应用程序，现在使用 Fermyon Cloud，开发人员可以在不到两分钟的时间内从零开始实现并部署应用程序。这是 WebAssembly 在云中实现的承诺：快速开发、快速部署、快速执行。”，Fermyon 的联合创始人兼首席执行官 Matt Butcher 在一份声明中如是说。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;新终端 Warp&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然现在的常用的终端模拟器也有很多好用的，比如 Rust 实现的高性能跨平台现代化终端模拟器 alacritty 。但它们的内核其实还是一个传统的终端模拟器。现代开发者，要使用终端做很多事，从构建代码、执行和部署，与版本控制系统交互到与云端交互等。作为开发者日常离不开的工具，在当下日益增长的开发需求的时代，现在的终端模拟器却没有帮助开发者提升更多工作效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 Warp 的出现，让我看到了终端模拟器进化的下一代形态。Warp 在 2022 年 4 月 5 号推出其公开测试版并宣布获得 2300 万美元的资金，它正试图通过构建一个旨在提高开发人员生产力的新命令行终端来改变这一现状。Warp 值得关注的功能特性是对团队协作的支持，可以共享团队的终端模拟器会话，可以方便地解决团队之间沟通的问题。其他功能还有很多，包括集成了云端，可以让团队方便地共享剪切板等。更多功能可以去这里查看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我还没有来得及自己的去挖掘 Warp 的具体功能，但是单从这些功能特性上来看，正如 Figma CEO Dylan 所说，Warp 这个产品和 Figma （在服务端和 wasm 模块 也使用 Rust）很像，都是 &lt;strong&gt;All in One，并且连接了云端，为团队协作提供了很多方便的功能&lt;/strong&gt;。并且在商业模式上，都属于产品驱动增长（PLG, Product-led Growth）型公司。事实上，正是 Figma CEO 领投了 Warp ，跟投的还有 Elad Gil （AirBnB、Pinterest、Stripe 和 Square 的早期投资者）、Jeff Weiner（领英执行董事长兼前CEO）和 Marc Benioff（Salesforce 创始人兼 CEO）。Dylan 认为 Warp 和 Figma 正是可以提升用户十倍工作效率的那种工具，他也承认投资 Warp 有赌博的成分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Warp 选择使用 Rust 语言来实现。使用 Rust 技术栈（包括 WebAssembly）也方便构建跨平台支持。在底层，使用 Metal （Mac 的 GPU API）直接用 GPU 进行 UI 渲染。之所以使用 GPU 进行渲染，是因为团队想摆脱 CPU 上面的许多软件和架构瓶颈，来适应更高分辨率的显示器。选择 Metal 而不是 OpenGL 作为 GPU API，因为 Warp 把 MacOS 作为第一个平台。Xcode 中的 Metal 调试工具非常出色，使 Warp 团队能够检查纹理资源并轻松测量帧速率和 GPU 内存大小等重要指标。Mac 平台现在也是大多数开发者选择的重要生产力工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，目前 Rust 对 GPU 支持并不是很完善，没有开箱即用的合适的 UI 库。团队考虑过 Azul和Druid，但这两者都处于实验阶段，所以团队决定和 Atom 编辑器联合创始人 Nathan Sobo 合作，使用他创建的一个受 Flutter 启发的 Rust UI 框架，不久后应该会开源。在未来，会支持更多的渲染后端，比如OpenGL 和 WebGL（会通过 wasm 支持）。同时也和 Nathan 合作，在 Warp 中构建了一个文本编辑器。Warp 也 fork 了 Alacritty 的模型代码，用于处理数据模型，为 Warp 界面中的块实现提供了帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看得出来，Warp 作为一个商业产品，它并没有将其产品的全部代码进行开源。但他们在实现产品过程中，通过解决 Rust GUI 和 GPU 渲染相关的问题，沉淀出一些工具和库，会以开源的方式贡献给社区。虽说要走 PLG 路线，开源社区非常重要，但也并不是说盲目地之间把产品全部开源出来。还是要根据自己的商业模式和产品形态做出最好的权衡。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;初创数据库领域公司&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年在数据库领域的初创公司可以算得上是扎堆出现了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2022 年 4 月，Rust 社区知名开发者 Jon Gjengset 宣布成为 ReadySet 公司的联合创始人，准备将其博士论文中的 Noria 数据库研究成果进行落地为 ReadySet ，为数据库提供 SQL 缓存引擎，可帮助开发人员构建高性能的实时应用程序，而无需更改代码或切换数据库。该公司目前 A 轮融资 2900 w 美元。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2022 年 4月，已经融资千万美元的数据库初创企业 Singularity Data Singularity Data（奇点无限公司）宣布开源 Rust 实现的云原生的支持SQL的流式数据库 RisingWave 。RisingWave 于 2021 年初开始用 Cpp 创建，在七个月之后用 Rust 重写。对于早期创业公司来说，这是一个疯狂的决定。特别是在竞争激烈的环境中，对科技初创公司来说，时间几乎就是一切。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;流媒体服务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实时事件流媒体公司 InfinyOn 筹集了 500 万美元的种子资金，由 Gradient Ventures 和 Fly Ventures 领投，Bessemer Venture Partners、TSVC 等参投。InfinyOn 使用由 Rust 开发的动态数据可编程平台  Fluvio 。Fluvio 拥有超过 1,000 个 Github star，在开发人员和开源社区中越来越受欢迎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“在 Java 时代构建的遗留数据平台会生成大型二进制文件，需要大量内存，并且从边缘到核心的操作具有挑战性。这些也缺乏实时决策的在线处理能力，”InfinyOn 的联合创始人兼首席技术官 Sehyo Chang 说。“我们通过消除对 ETL 工具的需求来简化数据架构，提供更具成本效益的平台，内存减少高达 80 倍，并通过内存安全解决方案提供最大的安全性。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“我们整合来自不同来源的医疗保健数据：物联网、患者和医生的输入。借助 InfinyOn，我们可以使用现代工具快速高效地完成这项工作。它是用 Rust 编写的，与 Kafka 相比，这使得团队更容易集成。” Nammu 首席执行官 Chris Brucker 说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfinyOn 可以轻松地从多个来源提取、整形和转换数据，并实时计算结果。虽然仍处于 Beta 阶段，但早期采用者已在 InfinyOn 的概念验证中看到了与替代解决方案相比的显着优势。除了易用性和开发速度之外，与其他供应商相比，供应商还看到了总拥有成本的显着降低。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 其他领域应用&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;软件定义汽车：Rust  的关键作用&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：软件定义汽车&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;汽车标准组织 Autosar——其成员包括福特、通用、宝马、博世、大众、丰田、沃尔沃等——在 4 月份宣布在其功能安全工作组 (WG-SAF) 中成立一个新的子组，以探索 Rust 如何能够用于其参考平台之一。SAE International 还 成立了一个工作组 来研究汽车行业中与安全相关系统的 Rust 。在 5 月份 Autosar 和 Rust 团队进行了一次交流 ，探讨Safe Rust 在汽车领域是否可以构造一个合规的安全子集，讨论内容就是 Ferrocene Rust 安全子集。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;随后 Autosar 官网撤销了成立新的 Rust 工作组的新闻，也许是要等待 Ferrocene Rust  的成果。另外，在今年9月份，Volvo 汽车公司的技术专家和系统架构师 Julius Gustavsson 接受了采访，他坦言，想在 Volvo 中推动 Rust 开发。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Ferrocene Rust 安全子集&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ferrous Systems 和 AdaCore  在今年2月份宣布，他们将联手开发 Ferrocene——一种符合安全要求的 Rust 工具链，旨在支持各种受监管市场的需求，例如汽车、航空电子设备、太空和铁路。这意味着根据各种安全标准对 Ferrocene Rust 编译器进行汽车安全性等级 ASIL 的 D 级（D 代表最高程度的汽车危险）认证，这项工作最终将包括必要的动态和静态分析工具的开发和资格认证。Ferrous Systems 和 AdaCore 也在寻找经过安全认证的库，包括语言支持 (libcore) 或其他用户库。我们的目标是针对与这些市场相关的各种架构和操作系统。这一愿景需要时间才能实现，而 Ferrous Systems 和 AdaCore 准备从关注某些特定方面开始。最终，我们的目标是像支持任何其他与高完整性应用程序开发相关的编程语言一样全面地支持 Rust。Ferrocene 语言规范目前正在制定中，预计年底发布。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他公司&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Rust 基金会银牌会员中还有 ARM 也在致力于推动 Rust 在软件定义汽车中落地。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;即时通信: Threema&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：即时通信&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Threema 是一款跨平台、隐私安全且开源的即时通信工具。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;密码管理工具：1Password&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：跨平台&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1Password  很早就使用 Rust 来构建其 Windows 客户端。在 2019 年将其支持浏览器扩展的逻辑引擎从 Go 移植到了 Rust ，然后就开始了 Rust 跨平台的应用实践。直到 2022 年 11 月，1Password 也开源了其跨多种语言生成一致的类型模式 的 Typeshare 库。Typeshare 可以帮助开发者实现跨语言无缝同步共享数据类型，这是跨平台安全开发的利器。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;GUI ：目标取代 Qt&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：Qt、GUI&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全球知名Qt咨询和UI/UX设计服务公司 tQCS 的合作伙伴有两家都加入了 Rust 基金会银牌会员。分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;KDBA ：在嵌入式系统、3D 图形以及跨桌面、嵌入式和移动平台的工作方面拥有多年经验， KDAB 是 Qt 项目的主要贡献者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Slint: 极大地简化了取代 Qt 需求的嵌入式平台的 GUI 开发。支持 Rust/Cpp/Javascript ，有设计友好的 UI 标记语言。其创始人同样来自 Qt 项目主要贡献者，QtQml 引擎的主要开发者。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;云存储：Dropbox&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：云存储&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dropbox 是最早使用 Rust 并取得成功的公司之一。Dropbox将 Rust 用于其部分文件同步引擎。以及一个新的视觉交流工具 Dropbox Capture ，旨在使团队能够轻松地使用屏幕记录、视频信息、屏幕截图或GIF来异步分享他们的工作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;边缘计算：Cloudflare&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：边缘计算、serverless&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Cloudflare 在其核心边缘逻辑中使用 Rust 来替代内存不安全的 C。Cloudflare worker 支持 Rust 和 WebAssembly 。在今年 9 月份，Cloudflare 还宣布正在用 Rust 实现一款可以替代 Nginx 的代理服务器 Pingora 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;迪士尼公司（Walt Disney Company）&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：WebAssembly 、渲染引擎&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迪士尼公司正在用 Rust 构建其  NCP GUI 框架，从迪士尼的这一职位招聘信息中可以得出这一结论。从该公司 2021 年发布的信息“介绍 Disney+ 应用程序开发工具包 (ADK)”来看， 使用 Rust 主要是构建代号为“m5”的 Native Client Platform v2 (NCPv2) 框架。他们选择了 Rust，以 WebAssembly (WASM) 为目标，以便在限制更新基于 C 的运行时的能力的任何固件更新周期之外简化 Web 部署和应用程序可更新性。该项目已经持续进行了快三年了，现在已经达到了从手持终端到电视，网页等全平台使用同一个渲染引擎来渲染它们的动画。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;特斯拉&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：高性能机器人模拟器、固件验证&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然马斯克在今年2月份于推特上面宣称他是 Rust 语言的粉丝，同时也承认特斯拉主要使用 Cpp 和 Python 。但从今年11月份发布的两个 Rust 职位来看，特斯拉也开始采用了 Rust 。其中一个是特斯拉机器人模拟引擎团队的招聘，正在寻找 Rust 开发人员来扩展用 Rust 编写的高性能机器人模拟引擎。另外一个是 Rust 固件验证工程师 ，但该职位对于 Rust 的要求只是“有任何 Rust 经验者优先，但不是必需的”。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Tweedegolf  ：与太空公司宇宙飞船&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：PTP、卫星、宇宙飞船、太空&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次 Rust 真的要上天了。Gama 将发射太阳帆宇宙飞船🛰️，并且是公开将 Rust 送入太空的公司之一。提供软件服务的应该是这家公司：Tweedegolf ，该公司也是 Rust 基金会银牌会员。他们的开源仓库里有一个 Rust 实现的 PTP (精确时间协议) 库，这个PTP一般用在卫星的时间源，比NTP更精确。但这个是 PoC 实现，不知道这次发射的飞船上有没有用。从另外的项目 嵌入式开发板 pcf85063a （一般用于计时闹钟）rust 驱动来看，这次上天的 Rust 程序很可能和精确计时相关。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gama 太阳帆的卫星于 2023 年 1 月 3 日由 SpaceX 猎鹰 9 号成功送入轨道。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;荷兰 Lightyear 太阳能汽车公司采用 Rust&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;荷兰Lightyear公司将在今年晚些时候开始向客户交付全球首款可量产的太阳能汽车&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Tweedegolf 公司的博客网站上透露，由 Lightyear 公司的软件架构师Jorrit 在 Tweedegolf 公司组织的高科技行业 Rust 线下聚会分享了 Lightyear 公司如何在Lightyear核心平台的开发中使用 Rust 。可能是隐私原因，并没有放出该分享的视频和ppt资料。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件数据存储：Qumulo&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：混合云文件数据管理&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Qumulo（混合云文件数据管理领域领导者） 和 西部数据 这两家公司是合作企业，通过部署基于西部数据UltrastarTM 大容量HDD和高性能SSD的Qumulo可扩展文件数据平台，IHME（健康指标与评估研究所）每天可处理高达2PB数据，推进公共流行病研究、统计和预测。Qumulo  赞助了 RustConf 2022 大会。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;老牌数据库公司：PostgreSQL&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：数据库、postgresql&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PostgreSQL 赞助了 RustConf 2022 大会，没有发现 PostgreSQL 公司内部有使用 Rust 的痕迹。但是在 GitHub 有一个致力于用 Rust 编写 PostgreSQL 扩展的项目 pgx，其中核心开发者 Ana 博客也有很多相关文章。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;企业数据分析：Redjack&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：数据分析
 
Redjack 号称来自美国国家情报机构的技术，每年监控和保护超过 8% 的互联网公共 IP 空间和超过 100 万亿次商业通信，提高可操作的数据使组织能够提高分析的速度和准确性，从而实现大规模运营的安全性和弹性。Redjack 也赞助了 RustConf 2022 大会，以此推断 该公司也有采用 Rust 的可能性。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据科学与人工智能&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;数据科学、AI&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 基金会银牌会员中也包括数据科学和人工智能领域的公司：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Watchful，以传统标签解决方案无法实现的速度和规模为 AI 标记数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;汽车物联网&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：IoT&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Wyliodrin 使用&lt;strong&gt;Rust&lt;/strong&gt; , &lt;strong&gt;Tock OS&lt;/strong&gt;和&lt;strong&gt;Android&lt;/strong&gt;保护设备并构建安全高效的系统。将 Rust 嵌入式实时操作系统 Tock OS 推入商业应用中。该公司也加入了Rust 基金会银牌会员。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;消息推送服务商：OneSignal&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：消息推送&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息推送服务商 OneSignal 在 2017 年就开始使用 Rust 了，提供了 Rust Client 来支持推送通知、电子邮件、短信和应用内自助式客户参与解决方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自动化货运列车：Parallel Systems&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：货运自动化列车&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动化货运列车 Parallel Systems，相信货运的未来是铁路，所以研发了零排放的自动化电动货运跑在铁路上，Rust 语言是该公司技术栈的通用语言。该公司也赞助了 RustConf 2022 大会。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 开发工具、平台与工具链支持&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：开发工具&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于 Rust 实现了一些好用的开发工具，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;tabnine，一款基于机器学习的代码自动完成开发工具。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Open Source Security ，该公司加入了Rust 基金会银牌会员，致力于为 Rust 生态推广做出贡献，目前主要是赞助 GCC Rust 的实现。截止到 2022 年 12 月，GCC Rust 前端将在 GCC 13 中合并！&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Embecosm ，提供开源软件工具链和嵌入式操作系统服务。Embecosm 也是 GCC Rust 前端的赞助商。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;grafbase，构建和部署 GraphQL 后端的服务平台。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Rust for Linux，Linux 6.1 内核版本合并了初始的 Rust 基础设施，为未来的内核驱动程序和其他内核代码启用 Rust 编程语言打好了基础。在 11 月 11 号，Rust for Linux 又提交了很多补丁代码到上游内核中。一旦所有这些 Rust 基础设施就位，我们将看到在更突出的现实世界驱动程序开始过渡到 Rust 代码之前需要多长时间，以获得新的硬件支持或在 Rust 中重写现有的 C 驱动程序代码。Rust 在 Linux 内核中的首批主要用户之一预计将是 Apple M1/M2 图形的 DRM 驱动程序。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;安全监控&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：资产安全、事件监控&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该领域目前在 Rust 基金会银牌会员中包括以下公司：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Spectralops，监控、分类和保护代码、资产和基础设施，以防止暴露的 API 密钥、令牌、凭证和高风险安全错误配置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentry，应用程序监控平台。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;软件咨询&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：软件咨询&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前也涌现出一些 Rust 咨询公司，下面是加入 Rust 基金会银牌会员的公司：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;knoldus，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Ferrous Systems&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mainmatter&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Tag1&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;游戏 与 渲染引擎&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：游戏&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 在游戏领域目前还在发展中。游戏公司动视暴雪作为普通赞助商加入了 Rust 基金会，并且在 2021 年发布了一份由动视暴雪旗下工作室 Treyarch 撰写的 「用于游戏工具的 Rust 编程语言 」 调研报告。Treyarch 自 2018 年以来， 一直在逐步将 Rust 集成到我们的工具和管道中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外还有一家值得关注的游戏公司是 Embark，该公司赞助了 Rust 游戏引擎 Bevy 和 Fyrox，并且开源了 rust-gpu 致力于使 Rust 成为 GPU 着色器的一流语言和生态系统。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;电商&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：电商&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 也被用于电商领域。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;美国最大的家具电商公司 Wayfair 旗下的开源项目 Tremor，已经进入 CNCF。去年 九月份还召开了一次小型的线上的 Tremor Conf 。从2018年开始， tremor 就是跑在了 wayfair生产环境中，每天处理10兆字节的数据，或每分钟100亿条消息，每秒1000万个指标。tremor 降低了成本，减少了复杂性，巩固和简化了操作环境，以激发SRE的乐趣，减少NOC的工作量，并降低运营成本。Rust 为 Wayfair 省掉数千个核心和TB级的内存的成本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;cargurus ，英国的一家二手车电商网站，也成为了 Rust 基金会普通赞助商成员。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Web3  与 区块链&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;关键字：Web3 、同态加密、隐私计算、区块链、数字货币、零知识证明&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 在 Web3 和 区块链领域已经成为了主流语言。在这些领域耳熟能详的公司和项目很多：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Diem ，前身叫 Libra ，曾经是 Facebook 的稳定币项目，但是现在已经被 Silvergate Capital Corporation 收购。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;超新公链aptoslabs 和 sui，都是 Diem 团队成员离职创业的两个项目，它们的共同点是都使用 Rust 实现的 Move 语言作为智能合约语言。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;parastate，波卡生态多链智能合约平台，是 Rust 基金会银牌会员。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Zama，为数据科学和AI构建开源同态加密解决方案，是 Rust 基金会银牌会员。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Keyrock  ，部署了专有且高度可扩展的数字资产做市技术，是 Rust 基金会银牌会员。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;matter-labs ，扩展以太坊 零知识证明 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;日本区块链技术孵化公司 TECHFUND ，也加入了 Rust 基金会银牌会员。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;本节小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 是一门通用的语言，并且多样化也是 Rust 语言的设计原则之一。本文试图通过罗列 Rust 在各个领域的成功应用案例，来帮助人们了解 Rust 适合落地的业务场景。然而，本文远远未能覆盖 Rust 应用的全部角落，还有我们看不到的地方，正在默默地采用 Rust 。本文也几乎没有罗列国内使用 Rust 的公司，但国内也有公司准备逐步采用 Rust ，只是进展比较慢。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;P.S 你也可以在 GitHub 上查看别人维护的全球范围内使用 Rust 的公司列表。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 就像一阵“春雨”，随风潜入夜，润物细无声。感谢阅读。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Rust 安全参考 | 2022 年 Rust 安全漏洞分类盘点&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文是对 &lt;span&gt;Rust 安全数据库&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 中记录的 Rust 及其生态库安全问题的梳理。希望可以对广大 Rust 开发者的代码安全性有所启发。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;漏洞分类&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Rust 安全数据库中记录的安全问题分为两大类：安全漏洞（Vulnerability）和非健全(Unsound)问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全漏洞又具体分为以下几类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代码执行（Code Execution）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存损坏（Memory Corruption）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;权限提升（Privilege Escalation，在操作系统级别或应用程序/库内部）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件泄露/目录遍历（File Disclosure / Directory Traversal）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;网络安全（Web Security，例如 XSS、CSRF）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;格式注入（Format Injection），例如 shell 转义、SQL 注入（以及 XSS）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加密失败（Cryptography Failure，例如机密性破坏、完整性破坏、密钥泄漏）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;隐蔽通道（例如 Spectre、Meltdown）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码中的恐慌（panic）标榜为“panic-free”（特别是如果对网络 DoS 攻击有用）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内存暴露（memory-exposure）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程安全（thread-safety）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，RustSec 还会对生态库的&lt;span&gt;健全性&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 进行跟踪，而不管它们是否是漏洞。因为 &lt;span&gt;当使用来自安全代码的 crate 可能导致未定义行为&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;时，往往伴随着健全性问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;健全性（Soundness）是一个类型系统概念（实际上源于逻辑学研究），意味着类型系统在某种意义上是“正确的”，即类型良好的程序实际上具有所需的属性。对于 Rust，这意味着类型良好的程序不会导致&lt;span&gt;未定义的行为&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;。然而，这个承诺只适用于安全代码；对于&lt;code&gt;unsafe&lt;/code&gt;代码，由程序员来维护这份契约。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于安全漏洞或非健全问题发生的原因或机制，RustSec 则使用关键字来进行标识。但是 RustSec 的关键字太多了，所以我对关键字也进一步做了一个分类。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分类&lt;/th&gt;&lt;th&gt;漏洞机制&lt;/th&gt;&lt;th&gt;备注&lt;/th&gt;&lt;th&gt;类型&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;memory safety&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;alias （多个可变借用）&lt;/td&gt;&lt;td&gt;2022 年还未见有该漏洞&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;double free&lt;/td&gt;&lt;td&gt;2022 年还未见有该漏洞&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;use-after-free&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;incorrect-lifetime&lt;/td&gt;&lt;td&gt;2022 年 一例 &lt;span&gt;RUSTSEC-2022-0028: Vulnerability in neon&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;wasm&lt;/td&gt;&lt;td&gt;2022 年 一例 &lt;span&gt;RUSTSEC-2022-0016: Vulnerability in wasmtime&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;segfault&lt;/td&gt;&lt;td&gt;2022 年 一例 &lt;span&gt;RUSTSEC-2022-0002: Vulnerability in dashmap&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;memory-layout&lt;/td&gt;&lt;td&gt;cast&lt;/td&gt;&lt;td&gt;2022 年 一例  &lt;span&gt;RUSTSEC-2022-0052: Unsoundness in os_socketaddr&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;cell&lt;/td&gt;&lt;td&gt;2022 年 一例 &lt;span&gt;RUSTSEC-2020-0164: Unsoundness in cell-project&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;ddos&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;oom&lt;/td&gt;&lt;td&gt;2022 年两例  &lt;span&gt;RUSTSEC-2022-0055: Vulnerability in axum-core&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;  和 &lt;span&gt;RUSTSEC-2022-0035: Vulnerability in websocket&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;td&gt;untrust data&lt;/td&gt;&lt;td&gt;2022 年一例  &lt;span&gt;RUSTSEC-2021-0143: Vulnerability in kamadak-exif&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞 CVSS分 6.5 MEDIUM&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;directory-traversal&lt;/td&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;td&gt;2022 年 两例：&lt;span&gt;RUSTSEC-2022-0069: Vulnerability in hyper-staticfile&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;  和  &lt;span&gt;RUSTSEC-2022-0043: Vulnerability in tower-http&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;html&lt;/td&gt;&lt;td&gt;xss&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0003: Vulnerability in ammonia&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;integer-overflow&lt;/td&gt;&lt;td&gt;out-of-bounds&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0051: Vulnerability in lz4-sys&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞 CVSS Score 9.8 CRITICAL&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;out-of-bounds-read&lt;/td&gt;&lt;td&gt;out-of-bounds-read&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0046: Vulnerability in rocksdb&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;side-channel&lt;/td&gt;&lt;td&gt;timing-attack&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0018: Vulnerability in totp-rs&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞 CVSS Score 4.2 MEDIUM&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;stack-overflow&lt;/td&gt;&lt;td&gt;stack-overflow&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0004: Vulnerability in rustc-serialize&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;subtype&lt;/td&gt;&lt;td&gt;variance/cell&lt;/td&gt;&lt;td&gt;2022 年一例  &lt;span&gt;RUSTSEC-2020-0164: Unsoundness in cell-project&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type-confusion&lt;/td&gt;&lt;td&gt;type-confusion&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2020-0165: Unsoundness in mozjpeg&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;typosquatting&lt;/td&gt;&lt;td&gt;typosquatting （恶意伪造同名 crate）&lt;/td&gt;&lt;td&gt;2022 年一例 &lt;span&gt;RUSTSEC-2022-0042: Vulnerability in rustdecimal&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;unaligned-read&lt;/td&gt;&lt;td&gt;windows&lt;/td&gt;&lt;td&gt;20222 年一例  &lt;span&gt;RUSTSEC-2021-0145: Unsoundness in atty&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;uninitialized-memory&lt;/td&gt;&lt;td&gt;uninitialized-memory&lt;/td&gt;&lt;td&gt;20222 年两例   &lt;span&gt;RUSTSEC-2022-0067: Unsoundness in lzf&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt; 和 &lt;span&gt;RUSTSEC-2018-0022: Vulnerability in temporary&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound 和 漏洞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;unsound&lt;/td&gt;&lt;td&gt;covariant&lt;/td&gt;&lt;td&gt;2022 年一例  &lt;span&gt;RUSTSEC-2022-0007: Unsoundness in qcell&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt;&lt;/td&gt;&lt;td&gt;Unsound&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;注：CVSS 即通用漏洞评分系统，参见文后安全术语介绍部分。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;CVSS 危害级别划分&lt;/strong&gt;：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;分值范围 &lt;code&gt;[0.1 - 3.9]&lt;/code&gt;  –&amp;gt;  低危害性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分值范围  &lt;code&gt;[4.0 - 6.9]&lt;/code&gt; –&amp;gt;  中危害性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分值范围 &lt;code&gt;[7 - 10]&lt;/code&gt;  -&amp;gt; 高危害性&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2022 年漏洞分类排行 Top 3&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按出现漏洞次数由多到少的漏洞分类排行：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;内存损坏&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt; ，2022 年一共出现 19 个此类安全问题。包括一个严重危害等级的漏洞和一个高危害等级的漏洞。导致内存损坏的 Bug  包括：整数溢出、越界访问、数据竞争（无锁并发内存顺序指定错误）、Unsafe Rust 中未做边界验证、Use-After-Free 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;拒绝服务&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt;，2022 年一共出现 14个此类安全问题。包括五个高危害等级的漏洞。导致内存损坏的 Bug  包括：缓冲区溢出、未验证请求长度、深度嵌套、栈溢出、资源泄露、无限循环等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;内存暴露&lt;/span&gt;&lt;sup&gt;[32]&lt;/sup&gt;  ，2022 年一共出现 9 个此类安全问题。导致该问题的 Bug 包括：越界读取（验证不充分）、Use-After-Free 、使用未初始化内存、悬垂指针等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2022 年安全漏洞摘要介绍&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;内存相关漏洞&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0002：dashmap 中的引用出现 UAF&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由Ref（和类似类型）的一些方法返回的引用可能会超过Ref并逃脱锁。这将导致未定义的行为，并可能导致一个段错误。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0002.html&lt;/span&gt;&lt;sup&gt;[33]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/xacrimon/dashmap/issues/167&lt;/span&gt;&lt;sup&gt;[34]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0008：Windows-rs 中 Delegate 函数缺乏 &lt;code&gt;Send&lt;/code&gt; 限定&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0008.html&lt;/span&gt;&lt;sup&gt;[35]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/microsoft/windows-rs/issues/1409&lt;/span&gt;&lt;sup&gt;[36]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0012: Arrow2 在 Safe 代码中出现双重释放（double-free）&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Ffi_ArrowArray&lt;/code&gt; 结构体错误实现 &lt;code&gt;#derive(Clone)&lt;/code&gt; ，因为它是一个 FFi 绑定，实现 Clone 会导致出现两份指针，从而导致双重释放。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/jorgecarleitao/arrow2/issues/880&lt;/span&gt;&lt;sup&gt;[37]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0012.html&lt;/span&gt;&lt;sup&gt;[38]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0003: ammonia 中存在格式化注入漏洞&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;clean_text&lt;/code&gt;中错误映射 HTML 的 Form Feed，导致注入漏洞。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; html = &lt;span&gt;format!&lt;/span&gt;(&lt;span&gt;&quot;&amp;lt;div title={}&amp;gt;&quot;&lt;/span&gt;, clean_text(user_supplied_string));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/rust-ammonia/ammonia/pull/147&lt;/span&gt;&lt;sup&gt;[39]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0006: &lt;code&gt;thread_local&lt;/code&gt; crate 中的 &lt;code&gt;RawIter::next&lt;/code&gt; 存在数据竞争&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要是因为内存顺序指定错误而引起的，解决起来也比较简单，修改为正确的内存顺序即可。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0006.html&lt;/span&gt;&lt;sup&gt;[40]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/Amanieu/thread_local-rs/issues/33&lt;/span&gt;&lt;sup&gt;[41]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0016：&lt;code&gt;wasmtime&lt;/code&gt; 的 &lt;code&gt;externref&lt;/code&gt; 在启用 &lt;code&gt;epoch&lt;/code&gt; 中断时会导致 UAF&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;epoch 中断会导致 wasmtime 在执行 GC 时错误回收还在使用的内存，从而导致 UAF。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2&lt;/span&gt;&lt;sup&gt;[42]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0016.html&lt;/span&gt;&lt;sup&gt;[43]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DoS 漏洞&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0004：&lt;code&gt;rustc_serialize&lt;/code&gt; 解析深度嵌套的 JSON 时栈溢出&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该漏洞会导致 DoS（denial-of-service）风险。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 触发漏洞示例代码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; _ = rustc_serialize::json::Json::from_str(&amp;amp;&lt;span&gt;&quot;[0,[&quot;&lt;/span&gt;.repeat(&lt;span&gt;10000&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐使用 serde 作为 rustc_serialize 的替代品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0004.html&lt;/span&gt;&lt;sup&gt;[44]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Unsound&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0007: qcell crate 中 &lt;code&gt;TCell&lt;/code&gt; 或 &lt;code&gt;TLCell&lt;/code&gt; 的内存能被恶意代码访问&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为生命周期参数型变未使用正确而引起的问题，导致恶意代码可以对同一片内存获取两个可变引用。解决方法是把类型参数的协变（Covariant）改为不变（Invariant）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;Invariant&lt;/span&gt;&lt;/span&gt;&amp;lt;T&amp;gt;(&lt;span&gt;&lt;span&gt;fn&lt;/span&gt;&lt;/span&gt;(T) -&amp;gt; T);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;pub&lt;/span&gt; &lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;TCellOwner&lt;/span&gt;&lt;/span&gt;&amp;lt;Q: &lt;span&gt;&#x27;static&lt;/span&gt;&amp;gt; {&lt;br/&gt;    &lt;span&gt;// Allow Send and Sync, and Q is invariant&lt;/span&gt;&lt;br/&gt;    typ: PhantomData&amp;lt;Invariant&amp;lt;Q&amp;gt;&amp;gt;,&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;pub&lt;/span&gt; &lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;TCell&lt;/span&gt;&lt;/span&gt;&amp;lt;Q, T: ?&lt;span&gt;Sized&lt;/span&gt;&amp;gt; {&lt;br/&gt;    &lt;span&gt;// use Invariant&amp;lt;Q&amp;gt; for invariant parameter, not influencing&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// other auto-traits, e.g. UnwindSafe (unlike other solutions like `*mut Q` or `Cell&amp;lt;Q&amp;gt;`)&lt;/span&gt;&lt;br/&gt;    owner: PhantomData&amp;lt;Invariant&amp;lt;Q&amp;gt;&amp;gt;,&lt;br/&gt;    &lt;span&gt;// It&#x27;s fine to Send a TCell to a different thread if the containted&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// type is Send, because you can only send something if nothing&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// borrows it, so nothing can be accessing its contents.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// `UnsafeCell` disables `Sync` and already gives the right `Send` implementation.&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// `Sync` is re-enabled below under certain conditions.&lt;/span&gt;&lt;br/&gt;    value: UnsafeCell&amp;lt;T&amp;gt;,&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0007.html&lt;/span&gt;&lt;sup&gt;[45]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com/uazu/qcell/issues/20&lt;/span&gt;&lt;sup&gt;[46]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;RUSTSEC-2022-0010：Enum错误实现 trait时 enum_map 宏可能会导致 UB&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;enum_map!&lt;/code&gt;受影响版本在使用宏时未正确检查枚举的长度，信任用户提供的长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当&lt;code&gt;Enum&lt;/code&gt; trait 中的 &lt;code&gt;LENGTH&lt;/code&gt; 与 &lt;code&gt;EnumArray&lt;/code&gt; trait 中的数组长度不匹配 时，可能会导致枚举映射初始化为未初始化的类型，进而允许攻击者执行任意代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题只能在手动实现 Enum trait 时发生，它永远不会发生在使用#[derive(Enum)].&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;触发此漏洞的示例代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;enum&lt;/span&gt; &lt;span&gt;E&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    A,&lt;br/&gt;    B,&lt;br/&gt;    C,&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;impl&lt;/span&gt; Enum &lt;span&gt;for&lt;/span&gt; E {&lt;br/&gt;    &lt;span&gt;// LENGTH 长度不等于 EnumArray 长度&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; LENGTH: &lt;span&gt;usize&lt;/span&gt; = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;from_usize&lt;/span&gt;&lt;/span&gt;(value: &lt;span&gt;usize&lt;/span&gt;) -&amp;gt; E {&lt;br/&gt;        &lt;span&gt;match&lt;/span&gt; value {&lt;br/&gt;            &lt;span&gt;0&lt;/span&gt; =&amp;gt; E::A,&lt;br/&gt;            &lt;span&gt;1&lt;/span&gt; =&amp;gt; E::B,&lt;br/&gt;            &lt;span&gt;2&lt;/span&gt; =&amp;gt; E::C,&lt;br/&gt;            _ =&amp;gt; &lt;span&gt;unimplemented!&lt;/span&gt;(),&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;fn&lt;/span&gt; &lt;span&gt;into_usize&lt;/span&gt;&lt;/span&gt;(&lt;span&gt;self&lt;/span&gt;) -&amp;gt; &lt;span&gt;usize&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;self&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;usize&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;impl&lt;/span&gt;&amp;lt;V&amp;gt; EnumArray&amp;lt;V&amp;gt; &lt;span&gt;for&lt;/span&gt; E {&lt;br/&gt;    &lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&lt;/span&gt; = [V; &lt;span&gt;3&lt;/span&gt;];&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; _map: EnumMap&amp;lt;E, &lt;span&gt;String&lt;/span&gt;&amp;gt; = enum_map! { _ =&amp;gt; &lt;span&gt;&quot;Hello, world!&quot;&lt;/span&gt;.into() };&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://rustsec.org/advisories/RUSTSEC-2022-0010.html&lt;/span&gt;&lt;sup&gt;[47]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202&lt;/span&gt;&lt;sup&gt;[48]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Rust 官方安全通告&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Cargo 安全公告&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2022 年 9月份，Rust 安全响应工作组被告知 Cargo 没有阻止提取从备用注册表下载的一些格式错误的包。 当 Cargo 下载包时，能够将包上传到备用注册表 的 攻击者可能会填满文件系统或损坏任意文件。这些问题已分配给 CVE-2022-36113 和 CVE-2022-36114。这些漏洞的严重性对于备用注册表的用户来说是“低”的。依赖&lt;span&gt;crates.io&lt;/span&gt;&lt;sup&gt;[49]&lt;/sup&gt;的用户不受影响。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;任意文件损坏 (CVE-2022-36113)。Cargo 允许包包含一个 &lt;code&gt;.cargo-ok&lt;/code&gt;  &lt;em&gt;符号链接&lt;/em&gt;，Cargo 将提取该链接。然后，当 Cargo 尝试将 “ok”写入“.cargo-ok”时，它实际上会将符号链接指向的文件的前两个字节替换为“ok”。这将允许攻击者使用 Cargo 提取包来破坏机器上的一个文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;磁盘空间耗尽 (CVE-2022-36114)。Cargo 没有限制从压缩档案中提取的数据量。攻击者可以将一个特制的包 上传到备用注册表，该 包提取的数据远远超过其大小（也称为 “zip 炸弹”），使用 Cargo 耗尽计算机上的磁盘空间下载包。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个漏洞都存在于 Cargo 的所有版本中。Rust 1.64  已包括对它们的修复。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Regex 安全公告&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 2022 年 3月份，Rust 安全响应工作组被告知 &lt;code&gt;regex&lt;/code&gt; 包没有正确限制它解析的正则表达式 (regex) 的复杂性。攻击者可以利用此安全问题执行拒绝服务，方法是&lt;br/&gt;将特制的正则表达式发送到接受不受信任的正则表达式的服务。使用受信任的正则表达式解析不受信任的输入时，不存在已知漏洞 。 此问题已分配为 CVE-2022-24713。当 &lt;code&gt;regex&lt;/code&gt; 包用于解析不受信任的正则表达式时，此漏洞的严重性 为“高”。&lt;code&gt;regex&lt;/code&gt; crate 的其他用途 不受此漏洞影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;建议使用  regex 1.5.5 版本及之上的版本。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安全术语介绍&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CVSS 通用漏洞评分系统&lt;/span&gt;&lt;sup&gt;[50]&lt;/sup&gt; (Common Vulnerability Scoring System, CVSS)。旨在评估安全漏洞的严重性，是全球各组织使用的公开标准。该标准由FIRST制定，并由其组织团队SIG（The CVSS Special Interest Group）改进和推广。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过漏洞难易程度以及对机密性、完整性、可用性的影响综合评估后，生成一个0到10分之间的评分值，此分值即是CVSS得分。CVSS 主要用于评估漏洞的严重性，而不是对风险的评估。风险评分是需要每个企业根据企业特性的风险要素，进行识别后再进行风险判别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CVSS 通过三个方面进行评估：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;基础得分(Base Score)：根据漏洞的固有特征反映漏洞的严重程度，不受时间因素影响，并假定在不同部署环境中产生合理的最坏情况的影响；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;时间得分(Temporal Score)：评价漏洞被利用的时间窗的风险大小，比如官方发布了补丁则会降低评估分数；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;环境得分(Environment Score)：需要在特定环境下评估。通常由最终用户根据自己的使用环境给出。使用业界通用的CVSS标准需遵循以下原则：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一般使用CVSS基础得分进行漏洞严重等级评估；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;评估时必须基于攻击场景，且攻击后能对系统造成了机密性、完整性、可用性的影响；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有多个攻击场景时，最终得分选择最高得分场景；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;被嵌入调用的库存在漏洞，要根据该库在产品中的使用方式，确定漏洞的攻击场景后进行评估；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不考虑攻击目标的环境缓解措施（如设置防火墙），以体现漏洞真实严重程度；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不考虑特定配置，即如果攻击成功需要特定的配置则在该配置存在的情况下进行评分；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安全缺陷不能被触发的场景或不影响CIA（机密性/完整性/可用性），CVSS评分为0分。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Rust 安全数据库: &lt;em&gt;https://rustsec.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;健全性: &lt;em&gt;https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;当使用来自安全代码的 crate 可能导致未定义行为: &lt;em&gt;https://doc.rust-lang.org/reference/behavior-considered-undefined.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;未定义的行为: &lt;em&gt;https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#undefined-behavior&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;memory safety: &lt;em&gt;https://rustsec.org/keywords/memory-safety.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;use-after-free: &lt;em&gt;https://rustsec.org/keywords/use-after-free.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0028: Vulnerability in neon: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0028.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0016: Vulnerability in wasmtime: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0016.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0002: Vulnerability in dashmap: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0002.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0052: Unsoundness in os_socketaddr: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0052.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;RUSTSEC-2020-0164: Unsoundness in cell-project: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2020-0164.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;ddos: &lt;em&gt;https://rustsec.org/keywords/ddos.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0055: Vulnerability in axum-core: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0055.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0035: Vulnerability in websocket: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0035.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;RUSTSEC-2021-0143: Vulnerability in kamadak-exif: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2021-0143.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0069: Vulnerability in hyper-staticfile: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0069.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0043: Vulnerability in tower-http: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0043.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0003: Vulnerability in ammonia: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0003.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0051: Vulnerability in lz4-sys: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0051.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0046: Vulnerability in rocksdb: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0046.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0018: Vulnerability in totp-rs: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0018.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0004: Vulnerability in rustc-serialize: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0004.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23]&lt;/span&gt;&lt;p&gt;RUSTSEC-2020-0164: Unsoundness in cell-project: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2020-0164.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24]&lt;/span&gt;&lt;p&gt;RUSTSEC-2020-0165: Unsoundness in mozjpeg: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2020-0165.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0042: Vulnerability in rustdecimal: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0042.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26]&lt;/span&gt;&lt;p&gt;RUSTSEC-2021-0145: Unsoundness in atty: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2021-0145.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0067: Unsoundness in lzf: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0067.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28]&lt;/span&gt;&lt;p&gt;RUSTSEC-2018-0022: Vulnerability in temporary: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2018-0022.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29]&lt;/span&gt;&lt;p&gt;RUSTSEC-2022-0007: Unsoundness in qcell: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0007.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30]&lt;/span&gt;&lt;p&gt;内存损坏: &lt;em&gt;https://rustsec.org/categories/memory-corruption.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31]&lt;/span&gt;&lt;p&gt;拒绝服务: &lt;em&gt;https://rustsec.org/categories/denial-of-service.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[32]&lt;/span&gt;&lt;p&gt;内存暴露: &lt;em&gt;https://rustsec.org/categories/memory-exposure.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[33]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0002.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0002.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[34]&lt;/span&gt;&lt;p&gt;https://github.com/xacrimon/dashmap/issues/167: &lt;em&gt;https://github.com/xacrimon/dashmap/issues/167&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[35]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0008.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0008.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[36]&lt;/span&gt;&lt;p&gt;https://github.com/microsoft/windows-rs/issues/1409: &lt;em&gt;https://github.com/microsoft/windows-rs/issues/1409&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[37]&lt;/span&gt;&lt;p&gt;https://github.com/jorgecarleitao/arrow2/issues/880: &lt;em&gt;https://github.com/jorgecarleitao/arrow2/issues/880&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[38]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0012.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0012.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[39]&lt;/span&gt;&lt;p&gt;https://github.com/rust-ammonia/ammonia/pull/147: &lt;em&gt;https://github.com/rust-ammonia/ammonia/pull/147&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[40]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0006.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0006.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[41]&lt;/span&gt;&lt;p&gt;https://github.com/Amanieu/thread_local-rs/issues/33: &lt;em&gt;https://github.com/Amanieu/thread_local-rs/issues/33&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[42]&lt;/span&gt;&lt;p&gt;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2: &lt;em&gt;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[43]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0016.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0016.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[44]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0004.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0004.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[45]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0007.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0007.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[46]&lt;/span&gt;&lt;p&gt;https://github.com/uazu/qcell/issues/20: &lt;em&gt;https://github.com/uazu/qcell/issues/20&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[47]&lt;/span&gt;&lt;p&gt;https://rustsec.org/advisories/RUSTSEC-2022-0010.html: &lt;em&gt;https://rustsec.org/advisories/RUSTSEC-2022-0010.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[48]&lt;/span&gt;&lt;p&gt;https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202: &lt;em&gt;https://gitlab.com/KonradBorowski/enum-map/-/blob/master/CHANGELOG.md#version-202&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[49]&lt;/span&gt;&lt;p&gt;crates.io: &lt;em&gt;http://crates.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[50]&lt;/span&gt;&lt;p&gt;CVSS 通用漏洞评分系统: &lt;em&gt;https://www.first.org/cvss/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[51]&lt;/span&gt;&lt;p&gt;https://pivotnine.com/2022/07/08/fermyon-revolution-microservices-wasm/: &lt;em&gt;https://pivotnine.com/2022/07/08/fermyon-revolution-microservices-wasm/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[52]&lt;/span&gt;&lt;p&gt;https://en.wikipedia.org/wiki/The_GNOME_Project: &lt;em&gt;https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FThe_GNOME_Project&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[53]&lt;/span&gt;&lt;p&gt;https://github.com/fltk-rs/fltk-rs: &lt;em&gt;https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Ffltk-rs%2Ffltk-rs&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[54]&lt;/span&gt;&lt;p&gt;https://crates.io/crates/fltk-theme: &lt;em&gt;https://link.juejin.cn?target=https%3A%2F%2Fcrates.io%2Fcrates%2Ffltk-theme&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[55]&lt;/span&gt;&lt;p&gt;https://www.fltk.org/: &lt;em&gt;https://link.juejin.cn?target=https%3A%2F%2Fwww.fltk.org%2F&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f269ca3f6fcc5cc386736af55a52f4bd</guid>
<title>如何写出更“美”的CSS代码？</title>
<link>https://toutiao.io/k/r9fq9jq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg2NjY2NTcyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjaCTEjQdxnaIlEWiaGcw9zNV7AHZGgp5q9U0zPf3cmcIgBRYG1n2ydEBHJGgl8nEA1bKiaj1fibK2EA/0?wx_fmt=png&quot; data-nickname=&quot;前端之神&quot; data-alias=&quot;Sunshine_Lin_God&quot; data-signature=&quot;一位前端小菜鸡，写过100多篇原创文章，全网有5w+个前端朋友，梦想是成为”前端之神“~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;CSS&lt;/strong&gt;（全称&lt;strong&gt;C&lt;/strong&gt;ascading &lt;strong&gt;S&lt;/strong&gt;tyle &lt;strong&gt;S&lt;/strong&gt;heets，层叠样式表）为开发人员提供声明式的样式语言，是前端必备的技能之一。基于互联网上全面的资料和简单易懂的语法，CSS非常易于学习，但其知识点广泛且分散，很难做到精通。在我们日常开发中，受限于原代码混乱、DDL将近等问题，常常忽视了CSS代码的质量，很容易写出杂乱无章的CSS文件。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0313351498637602&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6QfpteD6FHibSrd0uBCYV6WY7RFT67zHHuicR48XUcgWUzHAYqcRpb8yvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1468&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码优化建议&lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;&lt;span&gt;使用缩写属性精简代码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;适用于：margin、padding、border、font、background等&lt;/p&gt;&lt;p&gt;但并非所有情况下都必须缩写，因为当一个属性的值缩写时，总是会将所有项都设置一遍，而有时候我们不希望设置值里的某些项，这时候需要开发者自行判断。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4566145092460882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6QElg4YZA0icJOibLCXuCLwqcOarRpST4lV3Ae2RibBGI2eicj6vqMF3mOFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;&lt;span&gt;合并选择器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用&quot;,（逗号）&quot;连接多个选择器定义公用属性，不仅能减小css文件大小，还能增加可读性。&lt;/p&gt;&lt;p&gt;为了更易于定位问题，逗号后换行。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8439024390243902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6Qyqhea6ianDXh3iblqCibhrNwPicj4fhy4XnsrLzkkn3wukOa4MkyfJQqkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1230&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;&lt;span&gt;使用更语义化的单词命名class&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;命名的时候以“在你之后开发的人不会产生疑惑”为目标&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5263852242744064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6Qa5S6YJHeaEpylyARtTq6TYj7wUe6I2VniccrVJ8qb2jL4gHVKuiax0ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1516&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;&lt;span&gt;属性声明顺序&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Reference：&lt;span&gt;Bootstrap property order for Stylelint&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;选择器中属性数量较多时，将相关的属性声明放在一起，并按以下顺序排列：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Positioning：定位相关，如position、top/bottom/left/right、z-index等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Box model：盒模型相关，如display、float、margin、width/height等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Typographic：排版相关，如font、color、line-height等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Visual：可视相关，如background、color等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Misc：其他，如opacity、animation等&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;个人建议：在属性数量较多时可以参考这5个类别归类排列，至于顺序没必要太过纠结。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;.declaration-order {&lt;br/&gt;  /* Positioning */&lt;br/&gt;  position: absolute;&lt;br/&gt;  top: 0;&lt;br/&gt;  right: 0;&lt;br/&gt;  bottom: 0;&lt;br/&gt;  left: 0;&lt;br/&gt;  z-index: 100;&lt;br/&gt;&lt;br/&gt;  /* Box-model */&lt;br/&gt;  display: block;&lt;br/&gt;  &lt;span&gt;float&lt;/span&gt;: right;&lt;br/&gt;  width: 100px;&lt;br/&gt;  height: 100px;&lt;br/&gt;&lt;br/&gt;  /* Typography */&lt;br/&gt;  font: normal 13px &lt;span&gt;&quot;Helvetica Neue&quot;&lt;/span&gt;, sans-serif;&lt;br/&gt;  line-height: 1.5;&lt;br/&gt;  color: &lt;span&gt;#333;&lt;/span&gt;&lt;br/&gt;  text-align: center;&lt;br/&gt;&lt;br/&gt;  /* Visual */&lt;br/&gt;  background-color: &lt;span&gt;#f5f5f5;&lt;/span&gt;&lt;br/&gt;  border: 1px solid &lt;span&gt;#e5e5e5;&lt;/span&gt;&lt;br/&gt;  border-radius: 3px;&lt;br/&gt;&lt;br/&gt;  /* Misc */&lt;br/&gt;  opacity: 1;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;&lt;span&gt;使用&amp;amp;符号引用父选择器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&amp;amp;是Sass和Less中提供的语法糖，用于表示对父选择器的引用，antd design的源码里应用广泛&lt;br/&gt;优点：非常适合用于编写组件的样式，减少了很多重复单词&lt;br/&gt;缺点：从HTML的class name中寻找对应样式的成本增加&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;.header {&lt;br/&gt;    .header-title {/* styles */}&lt;br/&gt;    .header-title:after {/* styles */}&lt;br/&gt;    .header-content {/* styles */}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;/* 用&amp;amp;引用来优化代码👇 */&lt;br/&gt;.header {&lt;br/&gt;    &amp;amp;-title {&lt;br/&gt;        /* styles */&lt;br/&gt;        &amp;amp;:after {/* styles */}&lt;br/&gt;    }&lt;br/&gt;    &amp;amp;-content {/* styles */}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6827242524916943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6Q367qWX8KU1xiaME2Wfhuc7eHW85GwtR5EuibGsyiaVoMv178AeKMHoKhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1204&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;善用相关技术&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从&lt;span&gt;The State of CSS 2020: 技术&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;调研中我们可以得知当前主流CSS工具的用户数量与满意率数据（样本数量1万+，仅用于参考），其中分为了4个象限：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;评估&lt;/strong&gt;: 使用率较低，满意度较高。值得关注的技术。&lt;br/&gt;&lt;strong&gt;采用&lt;/strong&gt;: 使用率高，满意度高。可采用安全技术。【Sass、BEM、PostCSS、Styled Components】&lt;br/&gt;&lt;strong&gt;规避&lt;/strong&gt;: 使用率低，满意度低。目前最好避免使用的技术。&lt;br/&gt;&lt;strong&gt;待定&lt;/strong&gt;: 使用率高，满意度低。如果您正在使用这些技术，请重新评估它们。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41946538725154214&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6QtLLiaSheJPwonAE96iaiapXjGUVAqHvcy21mCeiaSoSGwpZysTuMZNR7yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2918&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSS方法论&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4869684499314129&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6QpPoWRw4s9HnQtJAHloBpmyiapic4gtQ2zHf4udRCqNO1U5UgKNYxej7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2916&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;BEM：模块化命名规范&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BEM（Block块、Element元素、Modifier修饰符）是一种规范化的类名命名约定。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;There are only two hard problems in Computer Science: cache invalidation and naming things
— &lt;em&gt;Phil Karlton&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋&lt;/strong&gt; &lt;strong&gt;BEM&lt;/strong&gt; &lt;strong&gt;解决了什么问题？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;CSS没有作用域，class同名时会造成“样式污染”&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;CSS文件较长时，不统一的命名使得结构比较混乱&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不规范的命名使得样式难以定位到对应的HTML元素，不同开发者进行开发时容易写出重复的代码&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BEM的优势：&lt;strong&gt;模块化&lt;/strong&gt;、&lt;strong&gt;结构化&lt;/strong&gt;、&lt;strong&gt;可重用性&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋&lt;/strong&gt; &lt;strong&gt;BEM&lt;/strong&gt; &lt;strong&gt;规范？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Block块：&lt;/strong&gt; 一个独立且有意义的实体，任何DOM元素都可以是块&lt;strong&gt;Element元素&lt;/strong&gt;：块的子元素，依附于块存在。如：列表中的某一项、卡片的标题、选择器中的选择项等&lt;strong&gt;Modifier修饰符：&lt;/strong&gt; 表示块或元素的外观、状态或行为。如：是否点击、是否禁用等&lt;strong&gt;命名规范&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;.block__element--modifier&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;block 和 element 用双下划线__链接&lt;br/&gt;element 和 modifier 用双中划线--链接&lt;br/&gt;block、element、modifier 包含多个单词时，用一个中划线-链接&lt;br/&gt;不推荐element嵌套，如果需要嵌套则说明该从中抽一个组件出来了&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🌰例子&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【Element-UI源码】https://github.com/ElemeFE/element/blob/dev/packages/table/src/table.vue&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Atomic CSS：原子化CSS&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋什么是原子化？&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;原子&lt;/strong&gt;（atom），是指化学反应不可再分的基本微粒&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在ACSS中，将每个仅有单一CSS规则的、不可再拆分的CSS类称为CSS原子。HTML的样式由多个CSS原子组合而成，以内联的形式写在HTML中。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;优势：无需维护CSS文件，在HTML中内联“所见即所得”；移动/删除HTML元素时，其样式也能随之移动，无需额外的更新成本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点：结构和样式强耦合，不利于大型项目维护，容易产生很多重复代码。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🌰例子&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!--- 使用ACSS语法创建一个子元素水平垂直居中的容器 ---&amp;gt;&lt;br/&gt;&amp;lt;div class=&lt;span&gt;&quot;D(f) Jc(c) Ac(c) &quot;&lt;/span&gt;&amp;gt;Flex容器&amp;lt;/div&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;!--- 原子化CSS思想的代码 ---&amp;gt;&lt;br/&gt;&amp;lt;div className=&lt;span&gt;&quot;ant-col ant-col-xs-24 ant-col-sm-12 ant-col-md-8 ant-col-lg-6 gutter-row&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSS预/后处理器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了给CSS提供更强大的功能（嵌套、变量、运算等）、使其更易于维护，诞生了Sass、Less、Stylus等CSS预处理器。开发者可以使用这些工具提供的更便捷的语法和特性进行开发，预处理器则负责将代码编译为CSS，从而达到提供样式的目的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3427495291902072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6QA2xRibjT8t64cXSdjUtE93IJIadibiaBltmHYsAkCsRnuXfMDSoguAlVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3186&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Sass (Scss) &amp;amp; Less&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Sass: 语法 | Sass 中文网&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;、&lt;span&gt;语言特性 | Less 中文网&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋预处理器的优越性？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;将CSS从声明语言转换成一门编程语言&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可嵌套的语法增加了样式文件的可读性和可维护性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;变量与混合特性能够减少很多重复的样式声明&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋Sass .vs. Less？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Less更像CSS，易于上手，能够从CSS平滑过渡；Sass的缩进语法接受度因人而异，Sass3.0中提出了兼容CSS的Scss，用户可以选择使用Sass或Scss。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当项目CSS中需要涉及复杂逻辑时，Sass/Scss更适合，Sass提供了更强大、更接近编程语言的@function、@if/@else、@while等语法；当项目的样式复杂度不高时，选Sass或Less都可以。（下面是一个Less和Scss语法对比例子🌰）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Less&lt;br/&gt;&lt;br/&gt;.mixin( @count )when( @count &amp;gt; 0 ){&lt;br/&gt;    background-color: black;&lt;br/&gt;}&lt;br/&gt;.mixin( @count )when( @count &amp;lt;= 0 ){&lt;br/&gt;    background-color: white;&lt;br/&gt;}&lt;br/&gt;.tag {&lt;br/&gt;    .mixin(100);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Scss&lt;br/&gt;@&lt;span&gt;function&lt;/span&gt; checkCount(&lt;span&gt;$count&lt;/span&gt;) {&lt;br/&gt;    @&lt;span&gt;if&lt;/span&gt; &lt;span&gt;$count&lt;/span&gt; &amp;gt; 0 {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; black;&lt;br/&gt;    }&lt;br/&gt;    @&lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; white;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;.tag {&lt;br/&gt;    background-color: checkCount(100);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Sass提供了命令行语法，当用户使用Dart或Ruby时可以通过命令行来对Sass进行解析（将Sass编译为CSS）等操作，为开发者提供了扩展空间。基于Sass良好的可扩展性，诞生了诸如Compass等Sass框架。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PostCSS&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2444794952681388&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6Qhp7uGgIYeFRoneBLqibeKYL1yB0eysbqqnGzUXfPaagGz4f14iaTYicXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2536&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6775956284153005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrrH3AA4RmrMR1sja8ciaT6Q7cKQjgRnrNScOubnDiauY8kEb6QONliaEbVJEu4XQ1rrG1tMTdg3ypmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋定义？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;狭义的PostCSS：“A tool for transforming CSS with JavaScript”，将CSS转换为JS代码的工具，提供了将CSS代码解析为AST的能力，并向开发者暴露出能够修改CSS代码的JavaScript API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;广义的PostCSS：基于PostCSS工具提供的API开发出的一系列插件，能够对用户编写的CSS代码进行处理，这些插件也可以称之为后处理器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;🙋有什么较为流行的PostCSS应用场景？&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;autoprefixer插件：打包时自动添加浏览器前缀属性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;div { display: flex }&lt;br/&gt;// 自动转换为👇&lt;br/&gt;&lt;br/&gt;div{&lt;br/&gt;  display : -webkit-box;&lt;br/&gt;  display : -webkit-flex;&lt;br/&gt;  display : -moz-box;&lt;br/&gt;  display : -ms-flexbox;&lt;br/&gt;  display : flex;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过颜色值的识别与替换来切换深/浅色模式 &lt;span&gt;前端站点一键支持暗色模式&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;stylelint插件：CSS代码检查工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;postcss-utilities&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;：为开发者提供CSS简写方式（原子化）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;.cfx {&lt;br/&gt;    @util clearfix;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 等价于👇&lt;br/&gt;.cfx:after {&lt;br/&gt;    content: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;    display: block;&lt;br/&gt;    clear: both;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;.rounded-top {&lt;br/&gt;    @util border-top-radius(4px);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 等价于👇&lt;br/&gt;.rounded-top {&lt;br/&gt;    border-top-left-radius: 4px;&lt;br/&gt;    border-top-right-radius: 4px;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CSS in JS&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;styled-components&lt;/strong&gt; &lt;strong&gt;/Emotion&lt;/strong&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;高可复用性：从组件的层面对 CSS 进行封装，适应“组件化”的前端时代，代码中不再需要维护CSS文件。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高灵活性：使用 styled-components 能够很轻松地找到某个组件关联的样式；移动/删除HTML元素时，其样式也能随之移动/删除。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;解决了CSS“全局污染”的痛点：styled-components在编译时为样式生成唯一的class name，开发者不必再担心 class name 重复。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// 创建一个 Title 组件,它将渲染一个附加了样式的 &amp;lt;h1&amp;gt; 标签&lt;br/&gt;const Title = styled.h1`&lt;br/&gt;  font-size: 1.5em;&lt;br/&gt;  text-align: center;&lt;br/&gt;  color: palevioletred;&lt;br/&gt;`;&lt;br/&gt;&lt;br/&gt;// 创建一个 Wrapper 组件,它将渲染一个附加了样式的 &amp;lt;section&amp;gt; 标签，并读取wrapperColor属性作为背景色&lt;br/&gt;const Wrapper = styled.section`&lt;br/&gt;  padding: 4em;&lt;br/&gt;  background: &lt;span&gt;${props =&amp;gt; props.wrapperColor || &quot;palevioletred&quot;}&lt;/span&gt;;&lt;br/&gt;`;&lt;br/&gt;&lt;br/&gt;// 就像使用常规 React 组件一样使用 Title 和 Wrapper&lt;br/&gt;render(&lt;br/&gt;  &amp;lt;Wrapper wrapperColor=&lt;span&gt;&quot;red&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;Title&amp;gt;&lt;br/&gt;      Hello World!&lt;br/&gt;    &amp;lt;/Title&amp;gt;&lt;br/&gt;  &amp;lt;/Wrapper&amp;gt;&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;🙋&lt;strong&gt;styled-components的适用场景&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;使用React或React Native进行开发时&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;中小型项目；或基于组件库开发、自定义样式复杂度不高的大型项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;页面中元素样式无需变化或变化较少时&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，CSS作为一门前端必备的基础技能，具有许多原生的痛点。近年来，全球的开发者也在源源不断地提出不同的优化方案，我们在日常关注React、NodeJS、性能优化等热门前端话题的时候，也不要忘了好好写CSS代码呀～&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《CSS权威指南 第四版》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;NEC : 更好的CSS样式解决方案&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Code Guide by @AlloyTeam&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;编码规范 by @mdo&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;The State of CSS 2020&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;BEM — Block Element Modifier&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ACSS&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Sass: 语法 | Sass 中文网&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;语言特性 | Less 中文网&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;hengg/styled-components-docs-zh&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;❤️ 谢谢支持&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上便是本次分享的全部内容，希望对你有所帮助^_^&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;喜欢的话别忘了 &lt;strong&gt;分享、点赞、收藏&lt;/strong&gt; 三连哦~。&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg2NjY2NTcyNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/TZL4BdZpLdjaCTEjQdxnaIlEWiaGcw9zNV7AHZGgp5q9U0zPf3cmcIgBRYG1n2ydEBHJGgl8nEA1bKiaj1fibK2EA/0?wx_fmt=png&quot; data-nickname=&quot;前端之神&quot; data-alias=&quot;Sunshine_Lin_God&quot; data-signature=&quot;一位前端小菜鸡，写过100多篇原创文章，全网有5w+个前端朋友，梦想是成为”前端之神“~&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>