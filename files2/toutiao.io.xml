<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>091b14855423c759387ce01cf25c1e4a</guid>
<title>相较于RocketMQ的事务消息，本地消息表才是真正的王者</title>
<link>https://toutiao.io/k/ccnbfle</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 概览&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分布式系统中，系统间的通信除了大家所熟知的 RPC 外，基于 MQ 的异步通信也越来越流行，已经成为基础设施的重要组成部分。而 MQ 的引入对系统间的数据一致性提出了新的挑战，逐渐成为系统稳定性的一大隐患。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1. 背景&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1.1. 业务挑战&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;未接触过分布式的同学可能对其没有概念，当我们引入 MQ 后，MQ 与数据库操作存在一致性要求。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个简单例子，一个业务操作中存在 “更新DB” 和 “发送 MQ” 两个动作，具体如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2651162790697674&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPr4DPwJiah4V0JNo0Vu7nsRFianGq47sgRvTapdbBk7XH797uZIXjNpNrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot; title=&quot;biz_common.png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果流程正常结束，变更保存到 DB，Message 成功发送至 MQ，就不存在不一致的情况。但，如果中间发生异常，一致性就没有了保障。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在如下这个示例：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9565217391304348&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPrOrWS7UzL7TFYNqGsmEuHP9QVpeqrtHCg79gG7PfHoicYR6uFib0Q9QNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot; title=&quot;biz_error1.png&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;更新 DB 和 发送 MQ 被包在一个数据库事务；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果在事务提交前，发送 MQ 之后出现了异常，将触发数据库事务回滚，此时&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;结果便是 Consumer 成功获取 Message 并进行业务处理，而 DB 回滚业务操作已经失败，下游处理了一个本不存在的变更。&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们换个思路，数据库事务只对 DB 更新进行保护，示例如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9869281045751634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPrFJtyjibicWb0lstvkAkZgLbzvy5xttYgqjx0EDZZMWM75elggjaXwwDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot; title=&quot;biz_error2.png&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;仅将 数据库变更 包在一个数据库事务里；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果在事务提交后，发送MQ 前出现了异常，此时&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据库变更已经成功持久化到 DB&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;而MQ发送失败，下游业务无法获取变更消息&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;最终导致丢失变更，未成功触发下游的正常业务；&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有更复杂的场景，示例如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9194444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPrlRZvFGIQtkPdvqydNgFBfibIOpHrOKdaXflZ0LgrCqjD5n7iaZHYEdFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot; title=&quot;biz_fz_2.png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库变更 和 发送MQ 交替出现，又该如何保障其一致性呢？&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1.2. 事务消息&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;众所周知，RocketMQ 提供事务消息机制，以完成业务操作与消息发送的一致性。但在实际使用过程中，复杂的 API 将逻辑切分的稀碎，增加了业务理解的难度，在实际开发中很少使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务消息整体流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.28005115089514065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPrLWtpJlEaCnz8aQ8lvkMRyDA6lafu0T9B85uyOSaZkicCtiaGBUvsWagg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot; title=&quot;rocketmq.png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心流程如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;生产者将半事务消息发送至 RocketMQ Broker。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RocketMQ Broker 将消息持久化成功之后，向生产者返回 Ack 确认消息已经发送成功，此时消息暂不能投递，为半事务消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者开始执行本地事务逻辑。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生产者根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了确保一致性，整个流程变得好复杂，不仅仅是流程，API 使用也晦涩难懂，示例代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TransactionProducer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; MQClientException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 通过监听器在本地事务中处理业务逻辑，对异常发现进行检测并恢复状态&lt;/span&gt;&lt;br/&gt;        TransactionListener transactionListener = &lt;span&gt;new&lt;/span&gt; TransactionListenerImpl();&lt;br/&gt;        TransactionMQProducer producer = &lt;span&gt;new&lt;/span&gt; TransactionMQProducer(&lt;span&gt;&quot;please_rename_unique_group_name&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 为 Producer 设置监听器&lt;/span&gt;&lt;br/&gt;        producer.setTransactionListener(transactionListener);&lt;br/&gt;        producer.start();&lt;br/&gt;&lt;br/&gt;        String[] tags = &lt;span&gt;new&lt;/span&gt; String[] {&lt;span&gt;&quot;TagA&quot;&lt;/span&gt;, &lt;span&gt;&quot;TagB&quot;&lt;/span&gt;, &lt;span&gt;&quot;TagC&quot;&lt;/span&gt;, &lt;span&gt;&quot;TagD&quot;&lt;/span&gt;, &lt;span&gt;&quot;TagE&quot;&lt;/span&gt;};&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10&lt;/span&gt;; i++) {&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                Message msg =&lt;br/&gt;                    &lt;span&gt;new&lt;/span&gt; Message(&lt;span&gt;&quot;TopicTest&quot;&lt;/span&gt;, tags[i % tags.length], &lt;span&gt;&quot;KEY&quot;&lt;/span&gt; + i,&lt;br/&gt;                        (&lt;span&gt;&quot;Hello RocketMQ &quot;&lt;/span&gt; + i).getBytes(RemotingHelper.DEFAULT_CHARSET));&lt;br/&gt;                &lt;span&gt;// 发送事务消息&lt;/span&gt;&lt;br/&gt;                SendResult sendResult = producer.sendMessageInTransaction(msg, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;                System.out.printf(&lt;span&gt;&quot;%s%n&quot;&lt;/span&gt;, sendResult);&lt;br/&gt;&lt;br/&gt;                Thread.sleep(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (MQClientException | UnsupportedEncodingException e) {&lt;br/&gt;                e.printStackTrace();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;100000&lt;/span&gt;; i++) {&lt;br/&gt;            Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        producer.shutdown();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TransactionListenerImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;TransactionListener&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;private&lt;/span&gt; AtomicInteger transactionIndex = &lt;span&gt;new&lt;/span&gt; AtomicInteger(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;private&lt;/span&gt; ConcurrentHashMap&amp;lt;String, Integer&amp;gt; localTrans = &lt;span&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;&amp;gt;();&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;// 在本地事务中执行业务逻辑，根据返回结果决定二次确认结果&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; LocalTransactionState &lt;span&gt;executeLocalTransaction&lt;/span&gt;&lt;span&gt;(Message msg, Object arg)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; value = transactionIndex.getAndIncrement();&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; status = value % &lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;            localTrans.put(msg.getTransactionId(), status);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; LocalTransactionState.UNKNOW;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 网络出现异常后，未收到二次确认，对业务进行fan&#x27;cha&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; LocalTransactionState &lt;span&gt;checkLocalTransaction&lt;/span&gt;&lt;span&gt;(MessageExt msg)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            Integer status = localTrans.get(msg.getTransactionId());&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; != status) {&lt;br/&gt;                &lt;span&gt;switch&lt;/span&gt; (status) {&lt;br/&gt;                    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; LocalTransactionState.UNKNOW;&lt;br/&gt;                    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; LocalTransactionState.COMMIT_MESSAGE;&lt;br/&gt;                    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; LocalTransactionState.ROLLBACK_MESSAGE;&lt;br/&gt;                    &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;                        &lt;span&gt;return&lt;/span&gt; LocalTransactionState.COMMIT_MESSAGE;&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; LocalTransactionState.COMMIT_MESSAGE;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单看代码很难理解，简单画了张图，具体如下：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.947242206235012&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYPrTia3M9030e5UBToIyPCXhibvrKPXM9KOo8fN1ZkjCwg4RSiaLYaQBRxsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot; title=&quot;code.png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其核心部分就是 &lt;code&gt;TransactionListener&lt;/code&gt; 实现，其他部分与正常的消息发送基本一致，&lt;code&gt;TransactionListener&lt;/code&gt; 主要完成：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;执行本地事务，也就是业务操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行结果检测，通过反查业务数据，决定消息的后续处理策略；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了使用事务消息，我们不得不在&lt;code&gt;TransactionListener&lt;/code&gt;中编写进行大量的适配逻辑，增加研发成本，同时由于逻辑被拆分到多处，也增加了代码的理解成本。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;RocketMQ 的事务消息通过回查方式对消息进行补充，是一个非常好的设计理念。但，其 API 过于复杂，在实际开发中很少使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2. 目标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不要 RocketMQ 的复杂性，还要 RocketMQ 的一致性，另一个优秀的替代方案便是本地消息表。&lt;/p&gt;&lt;/blockquote&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;保障消息发送与业务操作之间的强一致；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供简单通用 API，降低使用门槛；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供简洁配置方法，降低接入成本；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供补偿策略，保障至少一次发送；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 快速入门&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1. 环境准备&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在 pom 中引入 lego-starter&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.geekhalo.lego&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lego-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.1.12-reliable_message_sender-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，在数据库中新增本地消息表，具体sql如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; test_message&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;           &lt;span&gt;bigint&lt;/span&gt; auto_increment primary &lt;span&gt;key&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    orderly      &lt;span&gt;tinyint&lt;/span&gt;      &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;是否为顺序消息&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    topic        &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)  &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;MQ topic&#x27;&lt;/span&gt;,&lt;br/&gt;    sharding_key &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;ShardingKey，用于选择不同的 partition&#x27;&lt;/span&gt;,&lt;br/&gt;    tag          &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;128&lt;/span&gt;) &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;Message Tag 信息&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    msg_id       &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)  &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;Msg ID 只有发送成功后才有数据&#x27;&lt;/span&gt;,&lt;br/&gt;    msg_key      &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)  &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;MSG Key，用于查询数据&#x27;&lt;/span&gt;,&lt;br/&gt;    msg          longtext     &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;要发送的消息&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    retry_time   &lt;span&gt;tinyint&lt;/span&gt;      &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;重试次数&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;status&lt;/span&gt;       &lt;span&gt;tinyint&lt;/span&gt;      &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;发送状态:0-初始化，1-发送成功，2-发送失败&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    create_time  datetime     &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;    update_time  datetime     &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;index&lt;/span&gt; idx_update_time_status(update_time, &lt;span&gt;status&lt;/span&gt;)&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要一个执行消息发送逻辑的 &lt;code&gt;MessageSender&lt;/code&gt;，为了测试方便，先进行 Mock，具体如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Getter&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestMessageSender&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;MessageSender&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; error = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;Message&amp;gt; messages = Lists.newArrayList();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(Message message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        log.info(&lt;span&gt;&quot;receive message {}&quot;&lt;/span&gt;, message);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.error){&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.messages.add(message);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; String.valueOf(RandomUtils.nextLong());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;clean&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.messages.clear();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;markError&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.error = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;cleanError&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.error = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，新建 &lt;code&gt;LocalTableBasedReliableMessageConfiguration&lt;/code&gt; 对本地消息表进行配置，具体如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LocalTableBasedReliableMessageConfiguration&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;LocalTableBasedReliableMessageConfigurationSupport&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; DataSource dataSource;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MessageSender messageSender;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; DataSource &lt;span&gt;dataSource&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.dataSource;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; String &lt;span&gt;messageTable&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;test_message&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; MessageSender &lt;span&gt;createMessageSend&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.messageSender;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，包括：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;继承自 &lt;code&gt;LocalTableBasedReliableMessageConfigurationSupport&lt;/code&gt;，由父类完成基本配置；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现 &lt;code&gt;DataSource dataSource()&lt;/code&gt; 方法，返回业务数据源（备注：必须与业务使用同一个数据源）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现 &lt;code&gt;String messageTable()&lt;/code&gt; 方法，配置本地消息表表名；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现 &lt;code&gt;MessageSender createMessageSend()&lt;/code&gt; 方法，返回 &lt;code&gt;MessageSender&lt;/code&gt; 实例，执行真正的消费发送；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，完成了所有配置工作，可以使用相关API进行消息处理：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ReliableMessageSender#send&lt;/code&gt; 在业务方法中使用，执行可靠消息发送；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ReliableMessageCompensator#compensate&lt;/code&gt; 周期性调度，对未发送或发送失败的消息进行补充；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2. 正常发送&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;reliableMessageSender&lt;/code&gt; 的 send 方法执行可靠消息发送，具体如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testSuccess&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    Message message = buildMessage();&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageSender.send(message);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Transactional&lt;/code&gt; 注解保障 业务逻辑 和 消费发送 在同一个事物中进行处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试用例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testTestSuccess&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSenderService.testSuccess();&lt;br/&gt;&lt;br/&gt;    List&amp;lt;Message&amp;gt; messages = &lt;span&gt;this&lt;/span&gt;.testMessageSender.getMessages();&lt;br/&gt;    Assertions.assertTrue(CollectionUtils.isNotEmpty(messages));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在方法成功执行后，&lt;code&gt;TestMessageSender&lt;/code&gt; 收到消息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3. 异常回滚&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务执行失败，事务自动发生回滚，不会触发消息发送。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testError&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    Message message = buildMessage();&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageSender.send(message);&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逻辑和 &lt;code&gt;testSuccess&lt;/code&gt; 基本一致，只是在执行最后抛出 &lt;code&gt;RuntimeException&lt;/code&gt;，触发事务回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testTestError&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; error = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.testMessageSenderService.testError();&lt;br/&gt;    }&lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;        error = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    Assertions.assertTrue(error);&lt;br/&gt;&lt;br/&gt;    List&amp;lt;Message&amp;gt; messages = &lt;span&gt;this&lt;/span&gt;.testMessageSender.getMessages();&lt;br/&gt;    Assertions.assertTrue(CollectionUtils.isEmpty(messages));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务回滚，&lt;code&gt;TestMessageSender&lt;/code&gt; 未收到消息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4. 直接发送（不建议）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 &lt;code&gt;ReliableMessageSender#send &lt;/code&gt;未运行在事务内，方法调用时会直接发送消息，不能做到业务操作和消息发送的强一致。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testNoTransaction&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    Message message = buildMessage();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageSender.send(message);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testNoTransactionError&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 业务逻辑&lt;/span&gt;&lt;br/&gt;    Message message = buildMessage();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageSender.send(message);&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与之前代码相比，只是移除了 &lt;code&gt;@Transaction&lt;/code&gt; 注解，导致方法无法受到事务的保护。
测试代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testNoTransaction&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSenderService.testNoTransaction();&lt;br/&gt;&lt;br/&gt;    {&lt;br/&gt;        List&amp;lt;Message&amp;gt; messages = &lt;span&gt;this&lt;/span&gt;.testMessageSender.getMessages();&lt;br/&gt;        Assertions.assertTrue(CollectionUtils.isNotEmpty(messages));&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSender.clean();&lt;br/&gt;    &lt;span&gt;boolean&lt;/span&gt; error = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.testMessageSenderService.testNoTransactionError();&lt;br/&gt;    }&lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;        error = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    Assertions.assertTrue(error);&lt;br/&gt;&lt;br/&gt;    {&lt;br/&gt;        List&amp;lt;Message&amp;gt; messages = &lt;span&gt;this&lt;/span&gt;.testMessageSender.getMessages();&lt;br/&gt;        Assertions.assertTrue(CollectionUtils.isNotEmpty(messages));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论成功还是失败，&lt;code&gt;TestMessageSender&lt;/code&gt; 都收到了消息。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.5. 消息补偿&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 MQ 服务器不可用导致消息发送失败，不应该影响正常的业务逻辑。而是周期性对未发送或发送失败的消息进行补充，及执行重新发送逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;测试代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;loadAndSend&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 处理消费表中待发送数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageCompensator.compensate(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;120&lt;/span&gt;), &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 进行 error 标记， MessageSender 发送请求直接失败&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSender.markError();&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i&amp;lt;&lt;span&gt;10&lt;/span&gt;;i++){&lt;br/&gt;        &lt;span&gt;// 执行业务逻辑，业务逻辑不受影响&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.testMessageSenderService.testSuccess();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 清理 error 标记，MessageSender 正常发送&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSender.cleanError();&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;// 检测消息表中存在待处理的任务&lt;/span&gt;&lt;br/&gt;        List&amp;lt;LocalMessage&amp;gt; localMessages = localMessageRepository.loadNotSuccessByUpdateGt(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;60&lt;/span&gt;), &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;        Assertions.assertEquals(&lt;span&gt;10&lt;/span&gt;, localMessages.size());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 对消息进行补充处理&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageCompensator.compensate(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;60&lt;/span&gt;), &lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;//  由于时间限制，未处理消息表的任务&lt;/span&gt;&lt;br/&gt;        List&amp;lt;LocalMessage&amp;gt; localMessages = localMessageRepository.loadNotSuccessByUpdateGt(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;60&lt;/span&gt;), &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;        Assertions.assertEquals(&lt;span&gt;10&lt;/span&gt;, localMessages.size());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 等待时间超时&lt;/span&gt;&lt;br/&gt;    TimeUnit.SECONDS.sleep(&lt;span&gt;15&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.testMessageSender.clean();&lt;br/&gt;    &lt;span&gt;// 对消息进行补充处理&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.reliableMessageCompensator.compensate(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;60&lt;/span&gt;), &lt;span&gt;50&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;//  成功处理消息表的待处理任务&lt;/span&gt;&lt;br/&gt;        List&amp;lt;LocalMessage&amp;gt; localMessages = localMessageRepository.loadNotSuccessByUpdateGt(DateUtils.addSeconds(&lt;span&gt;new&lt;/span&gt; Date(), -&lt;span&gt;60&lt;/span&gt;), &lt;span&gt;100&lt;/span&gt;);&lt;br/&gt;        Assertions.assertEquals(&lt;span&gt;0&lt;/span&gt;, localMessages.size());&lt;br/&gt;&lt;br/&gt;        List&amp;lt;Message&amp;gt; messages = &lt;span&gt;this&lt;/span&gt;.testMessageSender.getMessages();&lt;br/&gt;        Assertions.assertTrue(CollectionUtils.isNotEmpty(messages));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从测试用例中可以得出几个结论：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;消息发送异常不影响正常的业务逻辑；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;未避免刚插入的消息被补偿逻辑消费，近10秒内的消息不会进行自动补充；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;消息成功发送后，消息表状态被更新，从而避免重复发送；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 设计&amp;amp;扩展&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1. 核心设计&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;整体架构如下：&lt;/strong&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4878048780487805&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbudGkFvTE2XzicbiaqN8ibSFYProdmGibSNS89LTWy8z6kwxQe3y2KUtA2wziaIzzfDKibVNibcSsBnw6uytg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1640&quot; title=&quot;overview.png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;业务操作流程如下：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;应用程序接收外部业务请求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开启本地事务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行业务逻辑，将业务对象变更保存的业务表；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;构建事件对象，将事件对象插入到本地消息表；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提交本地事务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;触发发送流程，调用 MQ 的发送接口，发送消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息成功发送后，更新消息表的状态，并补写 msgId；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最终结果：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;本地事务提交失败，业务表和消息表的变更被回滚，不会触发发送逻辑；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本地事务提交成功，消息发送失败，后台定时器会进行自动补偿；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;补偿流程如下：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Timer 周期性触发补偿逻辑；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从消息表中加载未发送或发送失败的消息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用发送接口，将消息发送至 MQ；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统发送成功后，更新消息表的状态；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2. 合理使用 TransactionSynchronizationManager&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;TransactionSynchronizationManager&lt;/code&gt; 是 Spring 框架提供的一种 事务同步机制，通过 &lt;code&gt;registerSynchronization&lt;/code&gt; 方法可以向 &lt;code&gt;TransactionSynchronizationManager&lt;/code&gt; 注册自定义逻辑，在事务操作的不同阶段调用不同的回调函数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;lego 就是通过该机制重写 &lt;code&gt;afterCommit&lt;/code&gt; 方法，在事务成功提交后，触发消息发送逻辑。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addCallbackOrRunTask&lt;/span&gt;&lt;span&gt;(SendMessageTask sendMessageTask)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (TransactionSynchronizationManager.isSynchronizationActive()) {&lt;br/&gt;        &lt;span&gt;// 添加监听器，在事务提交后触发后续任务&lt;/span&gt;&lt;br/&gt;        TransactionSynchronization transactionSynchronization = &lt;span&gt;new&lt;/span&gt; TransactionSynchronizationAdapter(){&lt;br/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterCommit&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;                sendMessageTask.run();&lt;br/&gt;            }&lt;br/&gt;        };&lt;br/&gt;        TransactionSynchronizationManager.registerSynchronization(transactionSynchronization);&lt;br/&gt;        log.info(&lt;span&gt;&quot;success to register synchronization for message {}&quot;&lt;/span&gt;, sendMessageTask.getLocalMessage());&lt;br/&gt;    }&lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// 没有可以事务，直接触发后续任务&lt;/span&gt;&lt;br/&gt;        log.info(&lt;span&gt;&quot;No Transaction !!! begin to run task for message {}&quot;&lt;/span&gt;, sendMessageTask.getLocalMessage());&lt;br/&gt;        sendMessageTask.run();&lt;br/&gt;        log.info(&lt;span&gt;&quot;No Transaction !!! success to run task for message {}&quot;&lt;/span&gt;, sendMessageTask.getLocalMessage());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 项目信息&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目仓库地址：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;https://gitee.com/litao851025/lego&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目文档地址：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;https://gitee.com/litao851025/lego/wikis/support/reliable-message&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>40d2eeb0e68704eb921deaccc3c8121e</guid>
<title>深入浅出Seata的AT模式</title>
<link>https://toutiao.io/k/1dzs6cv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;blockquote&gt;&lt;p&gt;单个掉队，导致集体被动摆烂；&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、业务背景&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;在分布式架构中，事务管理是个无法避开的复杂问题，虽然有多种解决方案，但是需要根据业务去选择合适的；&lt;/p&gt;&lt;p&gt;从个人最近几年的实践经验来看，Seata组件的AT模式比较常用，本文从实际的案例出发，来深入分析该模式的原理；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.45493934142114384&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWMBqGNV4o5YGBHNyAbMKBYPQJ3q2OxPec4xfgU3Lvwckf3369MaktSgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;p&gt;首先创建一个全局事务管理的接口，这里是在Facade服务中开启全局事务；&lt;/p&gt;&lt;p&gt;请求经过三个微服务，并且各个服务都进行数据源的操作，然后模拟链路成功和异常的情况，来分析不同状态的逻辑实现；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、Seata架构&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、核心组件&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.33203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWM66E0n0xMjNA7RXCawFFqFFdUIotXJy60Rgibh4z50eSrZn9rF0lCL3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三大组件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;即Transaction Coordinator，维护全局和分支事务的状态，驱动全局事务提交或回滚。&lt;/p&gt;&lt;p&gt;即Transaction Manager，定义全局事务的范围，开始事务、提交事务，回滚事务。&lt;/p&gt;&lt;p&gt;即Resource Manager，管理分支事务处理的资源，向TC注册分支事务，报告分支事务的状态，驱动分支事务提交或回滚。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基础交互&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;TC是需要独立部署的服务，TM和RM是集成在服务中，三大组件相互协作，共同完成分布事务的管理；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、AT模式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事务模型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;AT是Seata默认的模式，需要基于支持本地ACID事务的关系型数据库；Java应用，通过JDBC访问数据库；基于案例流程，先分析AT的事务模型；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.9793322734499205&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWMOyPg8Wgl1lgyRt1AevIBaggpor6mjibJUJcyWRJZkYhVDWY1iblnLBUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/p&gt;&lt;p&gt;2.1 TM负责定义全局事务的边界，向TC申请，开启一个全局事务；&lt;/p&gt;&lt;p&gt;2.2 全局事务创建成功后，生成全局唯一的XID；&lt;/p&gt;&lt;p&gt;2.3 XID会在微服务请求链路上下文中传播；&lt;/p&gt;&lt;p&gt;2.4 RM向TC注册分支事务，并归属到XID对应的全局事务进行调度；&lt;/p&gt;&lt;p&gt;2.5 TM向TC发起相应XID的全局事务提交或回滚决议；&lt;/p&gt;&lt;p&gt;2.6 TC完成对XID管理的全部分支事务提交或回滚的调度；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;核心机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4245901639344262&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWM4nfo91hkS5OWMuMMDmqZ7M2ynYFxibG7sQM7jAhmJdAcQclTwaRewpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1220&quot;/&gt;&lt;/p&gt;&lt;p&gt;执行阶段：每个微服务的请求完成后，基于本地数据库的事务能力，保证业务数据和回滚日志在同一个本地事务中提交，快速释放连接和对资源的锁定；&lt;/p&gt;&lt;p&gt;完成阶段：全局提交时分支事务已经完成提交，会清理回滚日志，快速结束流程；全局回滚基于XID和BranchID查询回滚日志，完成数据回滚；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据源代理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.41640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWMASy52bmStv6uAObR68q9JS03DPx5z4ff8Gic7bdPGwNqamxlS3Dia3gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;在AT模式中，应用需要使用Seata组件中的JDBC代理数据源DataSourceProxy，实现对真正目标数据源的代理访问；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、案例分析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、流程分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;案例的简单描述&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.317741935483871&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWM6nPQxXicS40bQBKqIHywz0TppsnUCspogIL01iatMj01H9iau9XTzIC8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;&lt;p&gt;在案例中涉及三个服务，Facade服务开启全局事务，然后分别请求Account和Quartz服务的更新接口，通过Quartz接口是否抛异常来调试AT模式的原理；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.78671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWM1MWjW2spdXicYPofw0fLiaOEGDOulAV5H0YR0J7Mtr6UoicTv7JWscic1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;从实际的请求执行来说，绝大多数的请求都是可以执行成功的，而AT模式的异步化提交极大限度的顾及全局事务的效率问题，少数失败的情况也可以通过回滚日志进行反向补偿；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、写隔离&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;上述流程分析AT模式的原子性，即多个分支事务要么都成功要么都失败，接下来分析多个事务中的全局锁隔离机制，先看写隔离，假设TX1先开始；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWML7UFqbrGuwKZURicSzicnHoHChuPYNXWQzaqrsYBZPQ70OMXSdsjJJ5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TX1逻辑&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;TX1开始本地事务，拿到本地锁，然后执行更新操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX1本地事务提交前，需要先获取全局锁，否则无法提交；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX1获取全局锁并提交，释放本地锁，但未释放全局锁；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;TX2逻辑&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;TX2此时开始本地事务，拿到本地锁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX2执行本地事务提交前，尝试获取全局锁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;由于全局锁被TX1持有，TX2会重试等待全局锁；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;假设TX1全局提交&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;TX1如果全局事务提交，会释放全局锁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX2获取全局锁成功，执行本地事务提交；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;假设TX1全局回滚&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;TX1如果全局事务回滚，要重新获取数据的本地锁，进行回滚的补偿动作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX2如果仍在等待全局锁，并且还持有本地锁，TX1事务回滚失败，会不断的重试；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当TX2等待全局锁超时，会放弃全局锁并回滚本地事务，释放本地锁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TX1最终获取数据的本地锁，完成回滚动作；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在该过程中，TX1在结束前一直持有全局锁，TX2获取不到全局锁无法对相同的数据执行更新动作，所以避免了脏写的问题；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、读隔离&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;在数据库本地隔离级别为读已提交或以上的基础上，Seata的AT模式默认全局隔离级别是读未提交；如果需要全局的读已提交，可以通过&lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;语句的代理；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWMMWVlk1f0NpiciaWqABiaKqp4woqe82Fscic05XML1Afx1DKhrjicBDUESjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;该语句的执行也需要获取全局锁，如果全局锁被TX1持有，TX2会释放本地锁，查询会被阻塞并进行重试，拿到全局锁读取成功后返回；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、对比XA模式&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;XA是一个分布式事务分段提交协议；事务管理器即TM：作为全局事务的调度者，负责整个事务中本地资源的提交和回滚；本地资源管理器即RM：大部分关系型数据库都实现了XA接口；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBqB28CU8NoeLRyXCymqmWMENtcic0P934NZHb0D9AdDA4wfVia4ecUa0hQHGgm3pbI4naraLvq9mag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;TM先向所有的参与事务的RM发送确认请求，根据确认的结果，判断是调用RM的commit提交还是rollback回滚；&lt;/p&gt;&lt;p&gt;XA具有强一致性，在2段提交的过程中，会持有资源的锁，如果是在交易下单等复杂链路中，并且并发量很高，会存在长事务风险，XA无法满足该类高并发的场景；&lt;/p&gt;&lt;p&gt;而在Seata的AT模式中，在服务执行完成后，直接进行RM提交和资源释放，提供了对CAP理论相对平衡的解决方案，并且没有侵入业务工程；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、参考源码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;br/&gt;&lt;br/&gt;组件封装：&lt;br/&gt;https://gitee.com/cicadasmile/butte-frame-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBj3abVSgCmvm7FIYw55ficInd2se9ia6KSic0ma25AUvrmUtXUwXibjhHmCc7DUawfXBI30QuHBjDnzw/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累、总结、用心记录。&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>00a6e1d6986f7bdfa032794f016e738e</guid>
<title>bilibili分布式数据库演进之道</title>
<link>https://toutiao.io/k/w18rcuv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、业务场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在开始讲解之前，我先为大家介绍一下B站的业务场景。B站的业务大体上可以分为以下几类：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、点播类业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点播类业务就是大家经常看的视频以及稿件之类相关的业务，这类数据使用场景的特点有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、直播类业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;直播类业务对应B站的S12、跨晚、拜年祭等，有以下几个特点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据一致性要求较高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;热点数据，如S12的主播房间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平时流量中等，大型直播流量会呈现爆炸性增长&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可用性要求高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、游戏类业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、电商类业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如B站本身的会员购，这类业务的要求如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据一致性要求较高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;热点数据，集中在秒杀场景及热门番剧&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;平时流量中等，热门番剧及商品会呈现爆炸性增长&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可用性要求高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;5、支付类业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;二、架构演进&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;介绍完B站的业务场景之后，接下来是B站整体数据库的架构演进历史。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、1.0阶段&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHbl8GOIS8RXdJXXdxTAro52tPEhwHa8Mwk8XuDlZjib1nEEdslDAoSQw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.0阶段对于所有互联网公司而言，其实都有类似的架构——简单的主从，所有流量集中在一个主库上。另外，与以前使用的商业数据库类似场景——单实例多库。这种架构在公司刚起步的时候是比较方便的，便于业务的快速迭代，但是随着流量的增长，会出现以下几个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）单机的性能瓶颈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务器的CPU、内存、存储的限制我们不可能一直垂直升级，从而出现了我们第一个架构演进的小版本——读写分离和一主多从，此场景有两个核心要求：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;满足以上两个要求的场景可以很好地规避因MySQL主从复制存在的延迟所带来的问题，同时又可以满足业务快速增长带来的流量压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）各业务互相影响&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着业务的发展，各个业务之间的互相影响推动了我们架构的第二个小版本出现——按照业务库进行迁移拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHRiaJhVjibYKeoFNaNiaWzjsKwWCvMxap6b7vVoV0edDPDb6ECgUOknVPQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于读写分离和业务库维度的拆分还是无法避免各个功能模块的互相影响。在这种情况下，架构1.0阶段的第三个小版本应运而生——基于业务的功能维度进行拆分，将一个X库拆分为n个库，拆分完之后分布在不同的实例。在每个不同的实例下，我们会有不同数量的从库支撑业务的流量增长，以满足大部分场景的业务需求。现在B站也有很多业务采用类似的架构，通过进行垂直业务拆分满足我们的业务增长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、2.0阶段&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHNpt8JibEwXqpbIrRHjY9Y1hmspQbRT6x6zQWTl2bz8NUhRtsmviaIKqA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构2.0阶段——水平拆分。成熟、稳定、定制的Proxy是水平拆分的利器，而一个符合要求的Proxy是需要时间进行打磨。为满足业务的快速发展，我们选择在业务层实现，也就是我们在代码层实现路由，虽然配置时会比较繁琐，但能够满足大部分业务场景，很多互联网公司也有类似的阶段。在业务侧进行水平拆分之后，我们其实面临着一个新的问题——&lt;strong&gt;跨实例查询&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、3.0阶段&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）第一个阶段&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEH6TvuusCqHjnaajWYialHGkCYHETicF0oG94qJYhHZnc4sHSTGyff2Zug/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入B站演进的3.0阶段，我们引入了TiDB，将之前业务层面的分片数据通过TiDB本身的DTS同步到TiDB集群，从而满足了大部分业务的查询需求。同时我们在部分场景的业务下直接尝试使用TiDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引入TiDB之后，基于B站的特点，我们对其进行了本地化定制。由于TiDB Server是无状态的，而官方对于如何路由到每个节点也没有一个通用的解决方案。因此我们结合 B站的基础平台能力，将TiDB Server全部在PaaS上进行容器化，同时把我们的服务发现能力和TiDB Server进行整合，并对相应语言的SDK进行改造，从而实现了TiDB Server的负载均衡，解决了TiDB Server本身的瓶颈，如：故障切换、业务快速感知节点变化、连接数等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）第二个阶段&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHXw5BmeCbic6C2raibuI9agSe1ribFkHysUUpJgOAyzwibMjppQRKUjHibBA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到了3.0的第二个阶段，我们已经把Proxy打磨为一个很成熟的产品，同时为满足支撑了异地多活的场景，我们还定制了DTS，把我们数据库的部署从同城多活直接做到了异地多活，也就是两地三中心的架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，在DTS方面，我们也基于B站本身技术栈的特点做了大量的定制，与其它公司开源的组件有部分不同。例如冲突检测，我们提供了多种可选择的规则，包括基于特定字段的以及全字段匹配的，同时对于冲突字段数据的R数据处理，我们一般会有两种途径：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，在主从切换的时候，由于两地三中心要保证数据可以进行来回切换，切换期间虽然是全局进行，但是一些边缘场景下仍然会存在数据冲突的问题。所以我们也提供了一个在主从切换下数据冲突以及相关信息的打捞队列，实现二次处理的功能，这也是我们中间 DTS提供的一个能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;Proxy的能力与各家主流的功能是类似的，都能够支持读写分离、分库分表、限流、黑白名单等。对于Proxy的部署，我们采取了两种方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;三、架构设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来为大家介绍的是B站对于不同数据量的场景的架构设计理念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、大型直播活动&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体概括起来有以下四种类型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）高并发写入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高并发写入考验的是主库的写入能力和从库的复制能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）高并发查询&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高并发查询一般都会引入缓存的能力，缓存主要涉及以下几种：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）实时排序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实时排序最直观的场景就是观众在直播间刷礼物的时候展示出来的名次，为保证时效性以及顺序，我们一般会采用Redis有序集合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）预期外突发流量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;预期外突发流量对于我们而言考验的主要是应用层的快速扩容以及如何对流量进行削峰，同时保证数据库比较平稳地写入，也就是异步写入的场景。今年最明显的预期外突发流量场景是佩洛西事件，比我们平常的流量大了将近5倍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、电商大促&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体上归纳下来有以下几个特点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）秒杀场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;秒杀场景主要涉及合适的选型和请求最简化。基于公司的基建进行定制，才可以实现最好的性能和体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）订单&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;订单有很明显的冷热数据特征。一般情况下，我们的订单会被进行一年前、两年前以及实时订单的不同拆分。这块对于数据库而言考验的是数据的归档及查询能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）库存&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;库存与秒杀场景存在一定关联，但并不是完全相关。秒杀场景会涉及到库存，但是库存在平常也会一直使用，因此两者不能进行强挂钩。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;库存场景主要在于保证减库存的准确性，以及减少用户端在访问时可能存在的冲突，另外是一致性的问题，也就是在秒杀和减库存时不能出现超卖的情况，避免对商家造成亏本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）流量削峰&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流量削峰与大型直播赛事遇到的突发流量是不同的，因为这一部分流量是我们已知的，已经预估好会有多少流量，因此我们一般会进行队列处理以及做分层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面介绍了大型直播赛事和电商大促两个典型场景，我们做了一部分数据库架构设计以及与应用端的联动。下面介绍我们真正进行数据库架构设计时，需要考虑哪些关键点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、数据&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先需要考虑数据，按照我们数据类型的使用场景，我们可以将数据分为以下三种：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）配置型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;配置型类似于我们的数据字典以及一些权限配置，特点包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果需要对配置型数据进行高并发访问，只需要加缓存即可，不需要做过多处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）日志型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;日志型数据包括交易流水、订单状态等，我认为日志型数据也可以称为流水型数据，特点包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;量大：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;无法避免，因为我们需要记录中间各部状态；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;无事务依赖：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们后续进行的更多是查询而很少更改；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;写多读少：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;读的比例一般是写的几十分之一。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）状态型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据量：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;与业务有关，状态型数据可以理解为我们的订单，以及直播场景里刷礼物的扣减情况；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;事务强依赖：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;必须保证用户下单成功之后的库存扣减，以及用户给主播打赏之后平台的扣减和主播收到的礼物；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;读多写多：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;与用户的进程挂钩，写和读的场景都比较多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综上所述，对于数据一般通过数据量、事务和读写请求三个维度进行判断，从而对数据进行规整和梳理，对比上述我列出的三种数据类型，可以得出数据的特定类型。有了数据类型之后，我们就可以考虑进行下一个阶段，即业务对数据库的要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、业务&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务对数据库选型的要求相对而言比较多，包括事务、性能、扩缩容、高可用、迁移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）事务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对事务的要求需要基于数据类型进行判断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）性能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一些业务对耗时比较敏感，也就是性能要求比较高，要求必须在多少毫秒以内将数据结果反馈回来。那么在进行数据库选型时，我们需要考虑该数据库能否承载这么高的性能反应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）扩缩容&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果业务要上一个新业务，要考虑满足一年至两年的增长的需求，因此数据库的扩缩容能力非常重要。如果之前申请的数据量比较大，但是业务发展没有达到预期，那么数据库需要缩容，所以这一方面对于数据库选型也是有要求的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）高可用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高可用需要进行取舍，如果要保证数据的强一致性，以及性能的稳定性，必须舍弃一部分东西，具体要与业务沟通和协调，从而保证实际效果符合业务要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5）迁移&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;迁移不仅是业务代码的改造，从A类数据库迁到B类数据库还需要考虑数据库的迁移成本，以及能否支撑同构和异构。对于业务而言，业务更多考虑的是迁移带来的业务改造成本，一般业务会比较喜欢协议无变更、基础操作语法不变的平滑迁移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;5、数据库&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库我们要考虑的关键点有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）事务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你想要强事务依赖，可以用传统型数据库，以及现有的NewSQL，比如TiDB、OceanBase等。如果不考虑事务，数据库选择会更多，比如Redis、MongoDB，主要取决于具体的使用场景和数据库要承担的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）性能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一种数据库的性能不同，以关系型数据库和非关系型数据库为例，MongoDB和MySQL两者的性能差别是很大的，依然取决于数据库要承担的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）扩缩容、高可用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扩缩容和高可用不需要进行过多的解释，因为高可用是DBA选择数据库的硬性要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）迁移&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一部分的迁移与业务的迁移存在差异，业务的迁移主要考虑业务改造成本，数据库的迁移需要考虑以下三点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据是否一致&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据迁移时是否有增量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据迁移会对业务产生什么影响&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果业务允许直接一刀切，那么方案则比较简单；如果业务要求无损，那么如何评估方案也是需要大家进行考量的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5）备份/还原&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果可能出现数据需要恢复的场景，则必须考虑备份/还原的能力。我们一般会更倾向于做物理备份，因为物理备份还原比较快，但是一些数据库没有提供物理备份的能力，如MongoDB。Redis我们也不会做持续化的备份，因为会导致性能的严重下降。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6）容灾&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容灾是第一部分B站数据库架构演进我们提到的两地三中心和同城多活需要具备的一个能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;7）稳定性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库的要求是能够平稳地对外提供服务，因此稳定性非常关键。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;8）成本&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们不可能为了保证性能无限地往数据库里加机器，因为成本会很高。同时需要考虑开源数据库和商业数据库的选择，在一定程度上商业数据库的性能比同等规格的开源数据库更好，但是需要考虑维护成本和二次定制化能力的成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;9）定制化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;商业数据库有时不会让我们做更多的定制化开发，但是这会给我们的上下游依赖带来一个问题，因为大部分场景我们会依赖于类似MySQL的binlog，下游的刷缓存能力以及大数据的实时数仓能力都需要依靠binlog去往下游，也就是CDC能力。那么这一方面也是数据库选型需要进行评估的重要能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;6、策略&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）多维度综合考虑&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库架构选型并不是从一个维度考虑的，每个数据库有自身的使用场景和特点，因此数据库架构选型需要从多个维度综合考虑，包括数据的维度、业务的真实诉求、DBA团队能提供的数据库能力，以及公司对于数据库的支撑能力，主要是公司其他团队如开发和平台类支撑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）满足未来三到五年需求&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库架构例如扩缩容能力，必须满足未来3～5年的需求，而不是频繁地迭代和更新，否则对业务而言是有损的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）稳定为主&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库需要平稳运行，而不是天天宕机，因此数据库架构选型需要以稳定为主。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHzXwvmn2ALVwE1V7Yn8DayaElGqUAXBnjFYOrpPp5EcQQo5mEGJMN3Q/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图的右侧是目前B站的数据库团队使用的数据库占比，可以看出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总体来说，B站的数据库特点是Redis和MySQL为主，其它数据库主要是基于我们的使用场景进行选择和提供。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;四、稳定性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天主要是想向大家介绍B站万亿级数据库选型与架构设计实践，所以需要考虑数据库如何提供稳定性能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、高可用&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHDwSIoKP9fwCoEbcetv5Bk0eMpXicic2T6MgvOAxSfAkSwZN0f5C2CGpA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在提供稳定性方面，主要是如何保证数据库高可用。BRM是我们基于B站的业务特点自研的MySQL高可用组件，在该架构上我们提供了两个功能节点Leader和Follower，能够对集群内的所有节点进行管理和探活。不管在哪个节点进行注册，我们都可以将其注册到整个集群。因为内部有一个网关会把所有请求转发到主节点，同时再分发到剩下的Follower节点上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Leader和Follower都参与投票决策，用以规避因网络抖动问题导致BRM误判数据库不可用，然后由Leader节点根据投票结果判断该节点到底是否宕机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体概括起来，我们自研的BRM会有以下六个核心功能：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、预警&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;保证系统的平稳运行，也涉及到预警的能力。对于数据库的预警，真正比较具有可预测性和可观察性的是慢查询。数据库的CPU和IO之类的也可以作为参考，但是会存在一定的误判，所以我们的方案是针对慢查询，并且做了一套慢查询预警体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHna0b0v3cOwiaHffWyiaibJIAggxia0pp4uHRPw40h3FdeGINibDJDC3qLaw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先对于DB层的慢查询，我们做了&lt;strong&gt;流式的采集上报和实时分析&lt;/strong&gt;。在实时分析之后，可能会存在误报的情况，因为如果集群在常态情况下，每天固定某个时刻都会出现比如100条慢查询，那么此时是否该报，其实这本身是一个业务某个时间点的特定行为，不会影响整体行为，所以需要将其屏蔽。针对这一方面，我们引入多次线性回归，通过多次线性回归实现了对偶发性的抖动的过滤，不同业务级别环比倍数、持续性增长（未到阈值倍数，但持续增长或存在）慢查询的预警，并且基于规则引擎实现自定义处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、Proxy&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHwaNkgzkOOcLyxWTpe28Mz9A4CCeicx4TCCPlRlLsOpX52FmBjNB1N9w/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过对Proxy的大量使用，我们可以实现针对某个数据库、某个服务、某类SQL指纹进行&lt;/span&gt;&lt;strong&gt;&lt;span&gt;拦截、限流、熔断&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，以阻止某些异常流量打崩数据的场景，也可以做比较轻松状态下的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;读写分离&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们也可以做&lt;/span&gt;&lt;strong&gt;&lt;span&gt;多机房路由&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，将机动架构下的数据流量转发到主库，同时能够动态发现拓扑结构的变化，新增或删除从库以及节点的变化都比较易于发现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时我们可以去做更精细化的&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Sidecar模式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，从而减少业务技术与能力，通过Sidecar模式使用Proxy，可以满足大家在大量场景下的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、多活&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHULwM9uqpQgOwOa5nCKmibHNExLHs5yIcdNHbq4HYNnzwbv6BRoyI1Og/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多活是为了保证在一个机房挂掉之后，我们可以有另外的机房支撑这一方面的能力，我前面讲到的Proxy、BRM以及DTS等都是用于满足多活的诉求。通过多活我们可以保证最大能力的冗灾，同时对用户的影响达到最小，当一个机房挂掉之后，影响的用户可能只有一部分，快速将用户全部导流到另外一个机房可以为用户提供平稳的使用体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;五、效率&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后是自动化效率的问题，不管是TiDB这种原生的分布式数据库还是我们基于Proxy和业务层自研的分布式数据库能力，同时比如Redis这种超大规模集群，我们现在经常会超过Redis本身的上限，因gossip通信机制，如果节点数量过大会导致节点间的心跳请求将带宽占满，所以我们的自动化如何提供效率？以下是自动化运维演进的方向：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHP1Obhz9IicEhVQibZMURV0orVYUaWTrYAYVUZRuE1JCH7KckUJ6EcSBQ/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前我们仍然处于自动化运维的阶段，自动化平台能力的核心有四个方面，分别是资源管理研发自助、运维操作和风险管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.7140522875816994&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bBj4icaLlibyzic76AtnMOiaEHq0S1s9XG63etg5zwhYia8c2icib7CichR3MuRJqW4Oqvl6axJjUgxJ7mKQ/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自动化运维平台&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、资源管理&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;资源管理简单理解就是资源如何进行分配，有多个维度：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、研发自助&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;日常情况下，研发有很多事情需要做，例如查询、导入、加字段以及健康检查等。资源申请指的是我们办了一些比较简单的常规业务，他们可以基于我们前面讲到的策略进行匹配后选择数据库。到DBA审核的时候，我们会评估他们写入的内容是否合理，保证不会出现由于架构设计失败引发重构的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、运维操作&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集群管理、实例管理和数据管理是一些比较日常的运维操作，整体上由平台化进行支撑，大部分可以通过自动化解决，不需要人工进行管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、风险管理&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;风险管理包括监控与告警、健康度报表以及接入信息脱敏和存储信息脱敏。B站涉及到电商和支付方面，需要对一些数据和用户信息进行大量的脱敏，通过数据扫描保证数据的合规。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以上就是我们自动化平台的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q1：异地多活架构下支持同时多写吗？怎么解决写入冲突的问题？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;现在我们做的异地多活架构会提供同时多写的能力，有两个维度进行判断，一个维度是基于特定字段，特定字段可以基于实践也可以基于业务维度，另一个维度是通过全字段匹配判断数据是否冲突。如果冲突则需要下游的处理能力，也就是需要业务方判断，我们是把数据打到DataBus，由业务判断这一部分数据如何处理。如果确定好之后，我们会提供一个接口，让业务按照DTS模式写入到对端数据库，从而保证数据的回环复制。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>25595eeeb439f808ba717c5046bbe5e8</guid>
<title>精华推荐 |【深入浅出Spring原理及实战】「原理分析专题」从源码和架构设计角度深入剖析BeanPostProcessor的原理和运作机制_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/foquo0z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;__0&quot;/&gt;🍃 前提概要&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Spring具有很好的扩展性，但是这个扩展它的这个扩展性体现在哪里呢&lt;/strong&gt;？而我们要说的&lt;strong&gt;BeanPostProcessor&lt;/strong&gt;就是对Spring扩展性优秀的表现之一。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;_BeanPostProcessor_4&quot;/&gt;🍃 BeanPostProcessor的作用&lt;/h2&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;其操作对象为：已经实例化且进行了属性填充，待初始化的Bean实例&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;__12&quot;/&gt;🍃 源码分析&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
   &lt;span class=&quot;token annotation punctuation&quot;&gt;@Nullable&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
   &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;token annotation punctuation&quot;&gt;@Nullable&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
   &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;h2&gt;&lt;a id=&quot;__40&quot;/&gt;🍃 如何使用&lt;/h2&gt; 
&lt;p&gt;BeanPostProcessorDemo代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessorDemo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; beanFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;XmlBeanDefinitionReader&lt;/span&gt; reader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XmlBeanDefinitionReader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        reader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;spring-bean-post-processor.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        beanFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; beanFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; userName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beforeMessage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; afterMessage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;初始化:&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setUserName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bean &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;初始化前:&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setBeforeMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;初始化前信息&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bean &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;初始化后:&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAfterMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;初始化后信息&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;其他的省略…&lt;/p&gt; 
&lt;p&gt;运行之后打印结果如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;初始化前:User(userName=null, age=null, beforeMessage=null, afterMessage=null)
初始化:User(userName=null, age=null, beforeMessage=初始化前信息, afterMessage=null)
初始化后:User(userName=小明, age=18, beforeMessage=初始化前信息, afterMessage=null)
User(userName=小明, age=18, beforeMessage=初始化前信息, afterMessage=初始化后信息)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面的代码很简单就是创建基础的容器，因为我这个里面用的是BeanFactory，BeanFactory作为基础容器是这里我采用手动将BeanPostProcessor注册到容器中去的。&lt;br/&gt; 同时也可以采用扫描或者定义的方式生成到容器中。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;下面分析打印结果：&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt; &lt;p&gt;初始化前:User(userName=null, age=null, beforeMessage=null, afterMessage=null)&lt;br/&gt; 该结果是postProcessBeforeInitialization方法中输出的内容，这个时候User实例还只是进行了实例化，还未进行到初始化步骤，&lt;strong&gt;所以所有的属性都为null,说明该方法确实是初始化执行的。&lt;/strong&gt;——&lt;strong&gt;（此时的初始化指的是bean对象的init方法）&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;初始化:User(userName=null, age=null, beforeMessage=初始化前信息, afterMessage=null)&lt;br/&gt; &lt;strong&gt;该结果为自定义的初始化方法initMethod方法中输出的内容，这个时候User实例真正初始化，而beforeMessage中中的值正是我们在postProcessBeforeInitialization设置的&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;初始化后:User(userName=小明, age=18, beforeMessage=初始化前信息, afterMessage=null)&lt;br/&gt; &lt;strong&gt;该结果是postProcessAfterInitialization中输出内容，从打印结果可以看出它的确是在自定义initMethod后。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ol&gt; 
&lt;h2&gt;&lt;a id=&quot;__Spring_119&quot;/&gt;🍃 Spring的生命周期&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Spring中Bean总体上来说可以分为四个周期：&lt;strong&gt;实例化、属性赋值、初始化、销毁&lt;/strong&gt;。而BeanPostProcessor则是在初始化阶段的前后执行。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt;首先看&lt;strong&gt;AbstractAutowireCapableBeanFactory&lt;/strong&gt;中&lt;strong&gt;doCreateBean&lt;/strong&gt;方法，该方法实际就是&lt;strong&gt;创建指定Bean&lt;/strong&gt;的方法。 
  &lt;ul&gt;&lt;li&gt;其中三个重要的方法调用如下：&lt;strong&gt;createBeanInstance、populateBean、initializeBean&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;这三个方法分别代表了Spring Bean中的实例化、属性赋值和初始化三个生命周期。&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;BeanPostProcessor是在初始化前后调用&lt;/strong&gt;，&lt;strong&gt;所以我们查看initializeBean中的方法详情即可&lt;/strong&gt;。该方法详情如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initializeBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@Nullable&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;RootBeanDefinition&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token class-name&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token function&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; wrappedBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbd &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      wrappedBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyBeanPostProcessorsBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrappedBean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      &lt;span class=&quot;token function&quot;&gt;invokeInitMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wrappedBean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbd &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Invocation of init method failed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbd &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      wrappedBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyBeanPostProcessorsAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrappedBean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
   beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrappedBean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;从上面的源码可以看出首先是处理部分Aware相关接口，然后接着就是处理BeanPostProcessor中的postProcessBeforeInitialization方法，该方法详情如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyBeanPostProcessorsBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; existingBean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; existingBean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessor&lt;/span&gt; processor &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; processor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      
   
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;该方法就是执行postProcessBeforeInitialization回调的详情内容，从该实现可以知道，BeanPostProcessor可以有多个，而且会按照顺序依次处理。&lt;strong&gt;如果只要其中的任意一个返回null，则后续的BeanPostProcessor的postProcessBeforeInitialization将不会再处理了。&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;接着就是执行初始化方法，即invokeInitMethods方法被调用。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;invokeInitMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@Nullable&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;RootBeanDefinition&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; isInitializingBean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bean &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InitializingBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isInitializingBean &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbd &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; 
   &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isExternallyManagedInitMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;afterPropertiesSet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isTraceEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Invoking afterPropertiesSet() on bean with name &#x27;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; beanName &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; 
 &lt;span class=&quot;token string&quot;&gt;&quot;&#x27;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PrivilegedExceptionAction&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InitializingBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PrivilegedActionException&lt;/span&gt; pae&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; pae&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InitializingBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbd &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NullBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; initMethodName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInitMethodName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasLength&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initMethodName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isInitializingBean &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;afterPropertiesSet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initMethodName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mbd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isExternallyManagedInitMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initMethodName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token function&quot;&gt;invokeCustomInitMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mbd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyBeanPostProcessorsAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; existingBean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; existingBean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessor&lt;/span&gt; processor &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; processor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;该方法与applyBeanPostProcessorsBeforeInitialization几乎就是相同的，不同的在于它执行的是postProcessAfterInitialization。至此Spring Bean的初始化也就完成了&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f1142e12bf23bb05ab0f456649eef8a0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;_PostConstruct_259&quot;/&gt;🍃 @PostConstruct的支持&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;通过上面了解了Spring Bean生命周期中初始化的过程，但是实际上Spring对于JSR250也支持，例如对@PostConstruct注解的支持，但是在之前的源码中并没有发现Spring Bean的初始化过程中有所体现。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;这里面的秘密就是我们的BeanPostProcessor了。&lt;/p&gt; 
&lt;p&gt;在Spring中有一个&lt;strong&gt;CommonAnnotationBeanPostProcessor&lt;/strong&gt;类，这个类的注释中有说到这个类就是用来对JSR250及其他一些规范的支持。&lt;/p&gt; 
&lt;p&gt;下面我就通过这个类的源码来说明Spring是如何通过BeanPostProcessor来实现对@PostContruct的支持。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/ccd42475897b4a5dbecb9ba4970e3b9c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;从上图中我们可以看出，CommonAnnotationBeanPostProcessor并没有直接对BeanPostProcessor有所实现，它继承InitDestroyAnnotationBeanPostProcessor该类，而对@PostConstruct的实现主要在该类中。&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/475f5e4562375196d8fe0b37112693ba.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;而对BeanPostProcessor的实现代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   
   &lt;span class=&quot;token class-name&quot;&gt;LifecycleMetadata&lt;/span&gt; metadata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findLifecycleMetadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bean&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      metadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invokeInitMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InvocationTargetException&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Invocation of init method failed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTargetException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beanName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Failed to invoke init method&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;对BeanPostProcessor的实现主要在before方法中，该方法主要就是两部分内容，第一部分主要是信息封装到LifecycleMetadata中，便于后面第二步的执行相关初始化方法。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;通过上面的方法实现我们知道了，Spring对JSR250的实现借助于BeanPostProcessor来实现的。&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessorDemo2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; beanFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;AbstractBeanDefinition&lt;/span&gt; beanDefinition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;BeanDefinitionBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;genericBeanDefinition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBeanDefinition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beanFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;beanDefinition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt; commonAnnotationBeanPostProcessor 
&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beanFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;commonAnnotationBeanPostProcessor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; beanFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;annotationInitMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;@PostConstruct&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;上面的代码比较简单，我们定义一个Person并使用@PostConstruct标记出它的初始化方法，然后我们创建BeanFactory，并创建Person的BeanDefinition将其注册到BeanFactory（与读取配置文件一样），然后我们创建&lt;strong&gt;CommonAnnotationBeanPostProcessor&lt;/strong&gt;并将其添加到BeanFactory中。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;最后打印结果打印出@PostConstruct。如果我们将下面这句代码注释。&lt;/li&gt;&lt;li&gt;beanFactory.addBeanPostProcessor(commonAnnotationBeanPostProcessor);&lt;/li&gt;&lt;li&gt;再次执行可以发现，@PostConstruct将会失效，且最后不会打印出结果。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;__340&quot;/&gt;🍃 顺序性&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;BeanPostProcessor是可以注册多个的，在AbstractBeanFactory内部通过List变量beanPostProcessors来存储BeanPostProcessor。而在执行时是按照List中BeanPostProcessor的顺序一个个执行的，所以我们在想容器中添加BeanPostProcessor时需要注意顺序。如果我们不是通过手动添加（大多数时候不是）时，而是在代码或者配置文件中定义多个BeanPostProcessor时，我们可以通过实现Ordered接口来控制它的顺序。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;BeanPostProcessor依赖的Bean不会执行BeanPostProcessor&lt;br/&gt; BeanPostProcessor依赖的Bean是不会执行BeanPostProcessor的，这是因为在创建BeanPostProcessor之所依赖的Bean就需要完成初始化，而这个时候BeanPostProcessor都还未完初始化完成。&lt;/p&gt; 
&lt;hr/&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;此外我们需要了解点：@PostConstruct 执行点(beforeInitialization) 要早于 afterProperitesSet(invokeInitMethod-1) 早于对应的Bean定义的initMethod（invokeinitiMethod-2）方法的执行。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;实例代码如下：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
&lt;span class=&quot;token class-name&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.buydeem.beanpostprocessor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassA&lt;/span&gt; classA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; beanName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MyBeanPostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;bean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bean&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;strong&gt;最后ClassA是不会打印出来的，而ClassB是会被打印出来。因为MyBeanPostProcessor依赖ClassA实例&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;&lt;a id=&quot;__389&quot;/&gt;🍃 总结&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Spring中BeanPostProcessor的子接口或实现类有很多种，例如。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;InstantiationAwareBeanPostProcessor&lt;/strong&gt;、&lt;strong&gt;MergedBeanDefinitionPostProcessor&lt;/strong&gt;、&lt;strong&gt;DestructionAwareBeanPostProcessor等等&lt;/strong&gt;。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;这些接口分别处在Spring Bean生命周期的不同阶段，而他们的功能与BeanPostProcessor都类似，都是为了给Spring Bean各个声明周期提供扩展点。&lt;/p&gt; 
&lt;/blockquote&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>11c45991f97c273a0b76f354032c7c95</guid>
<title>数据治理：核心框架与6大思维！</title>
<link>https://toutiao.io/k/azcz3qy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3310344827586207&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAckfwG1aeX3e4jy8sssCCobdg10RSpaPzv8HD1QCKcVJrcUl26FGUpOgjfVqHNy6Wr4CED5Mj8ibUA/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;上一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247493544&amp;amp;idx=2&amp;amp;sn=0998cba6892e16d9481b1919998411d2&amp;amp;chksm=c0de5edaf7a9d7ccf7bf751dbf6e2bd990485348b2f95af3053960b51a5d869d4845b86eb09c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;BAT大数据架构-资料汇总&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;BAT大数据架构-资料汇总&lt;/a&gt;&lt;/p&gt;&lt;p&gt;下一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247493547&amp;amp;idx=1&amp;amp;sn=cdcf699af6794f11ca150014ae894ace&amp;amp;chksm=c0de5ed9f7a9d7cf494359fccc5b54b82852cf017b499778e751a6cc6a5819fe9e3114aa522d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据治理体系指南（完整版）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;数据治理体系指南-完整版&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08353221957040573&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;838&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAcia4j842ehHUe4z344Iz89tiaEuOr0Tzdrsm9sew8eiaPYXiau3c72lKXruvP94Nm23B2JpMiafd17j3A/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08695652173913043&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAcia4j842ehHUe4z344Iz89t8PG5RIGszoYl1HISvfw1j1ZFRyy2bHaLd55rBRZV01FrmBpEPyJVjw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据成为新的生产力，必将引发数据生产关系的变革，而数据治理体系就代表着新的生产关系。近日发布的《广东省数据要素市场化配置改革理论研究报告》（下称《报告》），提出数据治理以数据为对象，在确保数据安全的前提下，建立健全规则体系，理顺各方参与者在数据流通的各个环节的权责关系，形成多方参与者良性互动、共建共治共享的数据流通模式，从而最大限度地释放数据价值，推动数据要素治理体系和治理能力现代化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107047&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;262:276&quot;&gt;搭建数据治理的核心框架&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;数据治理的核心框架从价值目标到条件环境是一个自上而下的推导过程，数据价值释放为数据治理提供了远景和方向，数据资产地位确立提供了关键基础，多元协同治理提供了动力，数据开放共享提供了实现路径，而平台技术保障提供了保障。从而，整个过程形成逻辑闭环，构成了数据治理的核心框架，保证了数据治理体系不断完善，实现迭代发展。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8419354838709677&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;620&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAdqssxeBPnuibIdJWficdibuLlqichichhFiaXLia7B03RE6uEbemdZEOrm3SoNn0DUWcYZ3kOVZnLGHGgwA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;第一，数据治理的目标是保障数据及其应用过程中的运营合规、风险可控和价值实现，通过数据治理体系规范数据治理流程，保证数据治理的合规运营，促进对数据的深度挖掘和有效利用，从而将数据中隐藏的巨大价值释放出来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二，数据治理的关键基础是确立数据的资产地位，明确数据权属的主体资格，明确规定数据的收集、使用、管理权限，明确各类经营者收集数据的合法途径，平衡数据利用与数据保护。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第三，数据治理的核心动力在于建立健全规则体系，通过数据安全、有序地流通，推动资本、人才、技术等要素的不断重组和优化，形成多方参与者良性互动、共建共治共享的数据流通模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第四，数据治理的行为选择在于让数据动起来、用起来，通过数据的共享、开放、运营、开发、交易等多元化方式，促进数据的融合碰撞和高效流通，激活数据要素潜能，实现数据要素价值充分释放。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第五，数据治理的条件环境以国家、企业和个人信息安全为前提，通过数据的分类分级管控，严格的权限管理机制、完善的组织架构和监督评估体系，防范化解数据危机。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5251076040172167&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;697&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAdqssxeBPnuibIdJWficdibuLlXLtHOPGZg72Wg7TzmRcmqvFRDlLkJkEA0PibghSrpsZgOw7DcjOv5LQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107047&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;2&quot;&gt;2&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot; hm_fix=&quot;259:281&quot;&gt;明确数据治理的六大思维&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;数据治理涵盖数字世界和物理世界，构建数据治理体系必须要有正确的方法论来予以指导。《报告》对数据治理基本思路进行归纳，提出“战略思维”“精准思维”“系统思维”“辩证思维”“创新思维”“底线思维”六大思维方式，形成数据治理的思维视角。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7170542635658915&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAdqssxeBPnuibIdJWficdibuLlgkhSYbgXzpOXAYkbm5icycyKevcCvWz4icdgUAeqDicQ28kicsJS1RsUTQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;战略思维是顶层，聚焦构建数据治理的生态体系；系统思维是主体，聚焦协同治理体制机制；辩证思维和创新思维是支柱，分别聚焦数据要素市场一般规律和前沿技术、先进文化；精准思维是切入点，聚焦数据资源质量管理；底线思维是基础，聚焦保护国家安全和民众权益。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一 是战略思维。数据治理涉及政治、经济、社会、技术、文化等方方面面，具有非常复杂、宽广的视域。应从全球发展战略层面出发，立足经济社会发展根本和全球数字化变革大局，着眼数字经济时代的长远发展，完善相关战略规划、政策规定与法律体系，构建数据治理生态体系，形成公共价值目标共同体。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;二 是精准思维。数据只有流动起来才能创造价值，数据治理需要促进数据在不同主体之间有序流动，而数据流通的前提，需要建立统一规范的数据标准，并建立在数据质量可靠的基础上。低质量甚至错误的数据，会影响数据流通，并最终影响价值的挖掘。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;三 是系统思维。数据治理过程中，应当从整体性、系统性着手，打破部门壁垒，搭建开放共享平台，打通国家、行业、组织等多层次，整合政府、企业、个人等多利益相关方的力量，从政策、标准、技术、应用等多维度进行综合考量，构建共建、共享、共治的数据治理环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;四 是辩证思维。数据治理是有效的切入点，要从辩证法和认识论的角度入手，深刻理解数据资源的深刻内涵、网络空间的内在本质，辨析虚拟空间与现实社会、安全保护与开放利用的辩证统一关系，归纳和总结数据治理的一般规律，推动数据由资源向要素转化，最大程度上挖掘数据价值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;五 是创新思维。主动把握数据资产、数据经纪人、数字人等各种新概念、新理念、新应用、新需求，勇于探索运用新机制、新技术、新手段来防范和化解面临的新风险，聚焦管理方式、协调机制、组织文化等方面改革创新，积极推动数据治理体系建设。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;六 是底线思维。数据是个人和企业的重要资产，是国家重要的战略资源，成为数字经济发展的重要驱动力。要注重防风险，做好风险评估，努力排除风险因素，加强先行先试、科学求证，健全监管体系，提高监管能力，筑牢安全网。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;@THE END&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; title=&quot;分割线&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/mmcWH7ETgnReMNBYOaCOXo7Cy5s1WwAicXItx5jOrSdnhQJQib5t4dGyCR2diaQ6Vf2POGLatdibRqxKCMEKXMoYXA/640?amp;&amp;amp;wx_lazy=1&amp;amp;wxfrom=5&amp;amp;wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;center data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.03872053872053872&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1188&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UyS5e1qV2Qz4Qmb0lR3LcV6vPRnCmR3qPOrTxZb7IaoL6XZkfOqiaFDJQ2OPDfkzmy3LhdOAXDNvvLqXZviaqOFA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/center&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;免责声明：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;文章版权归原作者及原出处所有，仅供读者学习参考。因有些无法找到真正来源，如标错来源&lt;span&gt;或涉及&lt;/span&gt;侵权，请后台跟我们联系删除。&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;END&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;据统计，99%的数据大咖都关注了这个公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/ol&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwNzE5NDM5Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fp3oqPBibTAe2zagKvDricd3IMWC9fqQBKtDjjXJCHsgWQ8HuO7TUicEnveY3VsDYiajUiaACY0DPqfsia9RP8ypdWcQ/0?wx_fmt=png&quot; data-nickname=&quot;BAT大数据架构&quot; data-alias=&quot;&quot; data-signature=&quot;大厂技术与架构，专注大数据、平台架构、数据治理、数据仓库、数据分析、数据科学，Hadoop、Spark、Flink、ClickHouse，BAT，还有我们的故事。&quot; data-from=&quot;2&quot; data-index=&quot;0&quot; data-origin_num=&quot;3&quot; data-isban=&quot;0&quot; data-weuitheme=&quot;light&quot;/&gt;&lt;/section&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot; mp-original-font-size=&quot;15&quot; mp-original-line-height=&quot;24&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;大家都在看：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492683_1&quot; data-recommend-article-time=&quot;1663285020&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcbwZkZia1ZbeD3xcRBm4o3qtvibbwiahrfggiaFXFK78Bn6PkYs1u5YWErgAhMGSlk62hMnkGn7VL3VQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据平台整体规划建设方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492683&amp;amp;idx=1&amp;amp;sn=c42673610807e139c781d9ee89343b15&amp;amp;chksm=c0de5d39f7a9d42fc426ad5e77690410b03ce99b219e7d80045d9fb49bc5652ba53ca25bc768#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492683&amp;amp;idx=1&amp;amp;sn=c42673610807e139c781d9ee89343b15&amp;amp;chksm=c0de5d39f7a9d42fc426ad5e77690410b03ce99b219e7d80045d9fb49bc5652ba53ca25bc768&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据平台规划建设方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492242_1&quot; data-recommend-article-time=&quot;1661902620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAeEguFAaAJZOfoxP8lj3Cna5cFYTgpM36QNZ3CKPrX55R3nU38YHciag3BG8iaiaMztvj3lovTAibAGkA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据平台数据治理技术方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492242&amp;amp;idx=1&amp;amp;sn=802c642f9225cb61ab9144dc1edc3cff&amp;amp;chksm=c0de5be0f7a9d2f6f5a5d76a40b2b2ed500d356976e6e683f61fb7977ecce5251c4febe0370a#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492242&amp;amp;idx=1&amp;amp;sn=802c642f9225cb61ab9144dc1edc3cff&amp;amp;chksm=c0de5be0f7a9d2f6f5a5d76a40b2b2ed500d356976e6e683f61fb7977ecce5251c4febe0370a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据平台数据治理方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491695_1&quot; data-recommend-article-time=&quot;1659915420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfQQa5SgqiaMtObDYbFCxxZWtgm5Mme18Ns1BlgFlN9wb3t2ctEyw44a12ljYHFpY8O7zJHQLMicwaw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据资产管理平台解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491695&amp;amp;idx=1&amp;amp;sn=470031e888191154957d4f661279a244&amp;amp;chksm=c0de591df7a9d00b5ed2b1a9babdb24ca7bb89bc9e4f071cfa03c7578cadf3073c37259a9eff#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491695&amp;amp;idx=1&amp;amp;sn=470031e888191154957d4f661279a244&amp;amp;chksm=c0de591df7a9d00b5ed2b1a9babdb24ca7bb89bc9e4f071cfa03c7578cadf3073c37259a9eff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据资产管理平台方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492680_1&quot; data-recommend-article-time=&quot;1663025820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcbwZkZia1ZbeD3xcRBm4o3qf2RlQKGX4Q7kYElvKI4uNemynDo2dkfrXicF7v0E8QVgkJywD2hruvg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据治理体系规划指导方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492680&amp;amp;idx=1&amp;amp;sn=c47eb723f3fcb6010dc1d2f14400523a&amp;amp;chksm=c0de5d3af7a9d42cf209094b6df8c8770ff9b10f46a71e242cdc0e6fddeb20fab46025c395be#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492680&amp;amp;idx=1&amp;amp;sn=c47eb723f3fcb6010dc1d2f14400523a&amp;amp;chksm=c0de5d3af7a9d42cf209094b6df8c8770ff9b10f46a71e242cdc0e6fddeb20fab46025c395be&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据治理体系指导方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492450_1&quot; data-recommend-article-time=&quot;1662877410&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcbwZkZia1ZbeD3xcRBm4o3qujrftqiaSZor4RlprLPM2ic4MLffWdYxricfAdkeJhtABSIhmyic0KssUQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;银行大数据治理平台建设方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492450&amp;amp;idx=1&amp;amp;sn=efe29edcdc1894a3ce519e03007991b9&amp;amp;chksm=c0de5a10f7a9d30633d5e75668a006a5f1ccb26fa39b77e3787ebfddf5e2fb209981d12b9f9a#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492450&amp;amp;idx=1&amp;amp;sn=efe29edcdc1894a3ce519e03007991b9&amp;amp;chksm=c0de5a10f7a9d30633d5e75668a006a5f1ccb26fa39b77e3787ebfddf5e2fb209981d12b9f9a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;银行大数据治理平台方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489664_1&quot; data-recommend-article-time=&quot;1655163420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdiczHiaBHxHrq5xeYqJzAYtJgibeXHy1RWRuH7MlWIJsPh8UrEguZQUPZSHRmpj8peFUqglUdkcLOmg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据中台建设思路与解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489664&amp;amp;idx=1&amp;amp;sn=487df52e94945bf0afd314e39b010b4d&amp;amp;chksm=c0dda1f2f7aa28e4dfb48ddbd3f8f6ce7f82422c3e509e60f81a4c2d52f5edfd35d6b3a1dfd5#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489664&amp;amp;idx=1&amp;amp;sn=487df52e94945bf0afd314e39b010b4d&amp;amp;chksm=c0dda1f2f7aa28e4dfb48ddbd3f8f6ce7f82422c3e509e60f81a4c2d52f5edfd35d6b3a1dfd5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据中台建设解决方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492679_1&quot; data-recommend-article-time=&quot;1662939420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfck59UyWVwks9Qa257vxibdcYEdOepT4Yy1fmElAyLcHrohiaWQJYibRUBXlSZh5Aicn5TKnnXxELwcg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;BAT大数据架构-资料汇总（限时下载）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492679&amp;amp;idx=1&amp;amp;sn=f4f447cb060782016b920b0e7ee331aa&amp;amp;chksm=c0de5d35f7a9d423fbee95a46901dd8c52f7af3b19b257f49557f21dd3e08fed43473c9a41c7#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492679&amp;amp;idx=1&amp;amp;sn=f4f447cb060782016b920b0e7ee331aa&amp;amp;chksm=c0de5d35f7a9d423fbee95a46901dd8c52f7af3b19b257f49557f21dd3e08fed43473c9a41c7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;strong&gt;BAT大数据架构资料汇总（PPT）&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492248_1&quot; data-recommend-article-time=&quot;1662507420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAeEguFAaAJZOfoxP8lj3Cnar2VvwsamUlyjJvpYgzwZh9NPIxrAddbWkKhZMia83LVsXhibeZeF8GiaA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据存储技术解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492248&amp;amp;idx=1&amp;amp;sn=97de45b6a2176cdec63a8f7e2b53c8f5&amp;amp;chksm=c0de5beaf7a9d2fcfe06a68108e26316f077cf08a1f4d8cf2a81c5cbd5407ea6493952c71586#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492248&amp;amp;idx=1&amp;amp;sn=97de45b6a2176cdec63a8f7e2b53c8f5&amp;amp;chksm=c0de5beaf7a9d2fcfe06a68108e26316f077cf08a1f4d8cf2a81c5cbd5407ea6493952c71586&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据存储技术解决方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247492241_1&quot; data-recommend-article-time=&quot;1661816220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAeEguFAaAJZOfoxP8lj3CnafvWu745bu6iaPCyuaqoMUvlGc5Gjsmu2wfa0bgDjLGBZzUSO2Ew0zAg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据平台总体架构方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492241&amp;amp;idx=1&amp;amp;sn=2ac9a59b220e87289a4abbe82ca26fdc&amp;amp;chksm=c0de5be3f7a9d2f53af1df74e6233b04d997749bb88aee1ac35e9411d149bb3bdb3a168eb811#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492241&amp;amp;idx=1&amp;amp;sn=2ac9a59b220e87289a4abbe82ca26fdc&amp;amp;chksm=c0de5be3f7a9d2f53af1df74e6233b04d997749bb88aee1ac35e9411d149bb3bdb3a168eb811&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据平台总体架构方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491901_1&quot; data-recommend-article-time=&quot;1660779420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcDh1JIGziaVnVwUWku6lZiaALqv5mnqIbU7pbNlSG3mmUVTEuSDInsTO9IOqAegVY4KuA3j7BX2cIg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;埋点体系：埋点治理实践（附PPT下载）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491901&amp;amp;idx=1&amp;amp;sn=4f973b9bf19ac82938b4dd8e5fdb8dff&amp;amp;chksm=c0de584ff7a9d1595202d7249fe9c838f643fd42c94025a3130d45ea879c1bedec9a7d9ce14d#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491901&amp;amp;idx=1&amp;amp;sn=4f973b9bf19ac82938b4dd8e5fdb8dff&amp;amp;chksm=c0de584ff7a9d1595202d7249fe9c838f643fd42c94025a3130d45ea879c1bedec9a7d9ce14d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;埋点体系: 埋点治理实践（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491310_1&quot; data-recommend-article-time=&quot;1659051420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAexaeNaJ3rTmtdyeJnwwuWZRYshn8eTKluPLGA616FPW5szia2Jw9ryKvWpPM77zMTWP7f6LpEh6xQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据综合平台概要设计（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491310&amp;amp;idx=1&amp;amp;sn=ac405a8b2014081d00a749d891372118&amp;amp;chksm=c0dda79cf7aa2e8a6843041571b6fdc2f879b282caf33798906d4010042a5661e7aa97ca86d5#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491310&amp;amp;idx=1&amp;amp;sn=ac405a8b2014081d00a749d891372118&amp;amp;chksm=c0dda79cf7aa2e8a6843041571b6fdc2f879b282caf33798906d4010042a5661e7aa97ca86d5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据综合平台概要设计（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491687_1&quot; data-recommend-article-time=&quot;1659483420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfQQa5SgqiaMtObDYbFCxxZWPkicDr6zGHGMMKjwgY2KN4ysicIficS8bhGsRxicJ6ZdOgan8LSFicKLVicw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;集团型企业主数据管理方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491687&amp;amp;idx=1&amp;amp;sn=bf73854168c0ee5d9563e7fe0a5c46f1&amp;amp;chksm=c0de5915f7a9d0032d4a061db3f2ece54ce036b3a8966e70a4c7287ed9b5dd307db907068169#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491687&amp;amp;idx=1&amp;amp;sn=bf73854168c0ee5d9563e7fe0a5c46f1&amp;amp;chksm=c0de5915f7a9d0032d4a061db3f2ece54ce036b3a8966e70a4c7287ed9b5dd307db907068169&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;集团企业主数据管理方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491688_1&quot; data-recommend-article-time=&quot;1659569826&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfQQa5SgqiaMtObDYbFCxxZWg9oregNtkhhHpqUFH5iaDlfvR5aibx2PRlTcJNFUljwkyPkIpg3KGQBw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据安全治理技术设计方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491688&amp;amp;idx=1&amp;amp;sn=a1b32d0d8cfbb01feac9296eadb25505&amp;amp;chksm=c0de591af7a9d00ca104d8379ddb3664d323ee02fed28949348d9da32a9af73086a31d64e0e8#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491688&amp;amp;idx=1&amp;amp;sn=a1b32d0d8cfbb01feac9296eadb25505&amp;amp;chksm=c0de591af7a9d00ca104d8379ddb3664d323ee02fed28949348d9da32a9af73086a31d64e0e8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数据安全治理技术设方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247491126_1&quot; data-recommend-article-time=&quot;1658101020&quot; data-recommend-article-cover=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/fp3oqPBibTAfDic3VGm2J7xicSjc1DLm2XAzvwblLvgkIhNn3KWLjzQObwgzDQC7pZqQibpI3pbfnCpPliaOb6ngpYA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;DMP标签系统建设实践（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491126&amp;amp;idx=1&amp;amp;sn=7831706fc8ff6322554f8f8bda373c4f&amp;amp;chksm=c0dda744f7aa2e52c439d0184586c836cebfb989eaec9601cea35ad91b2d0fb33222ede1811e#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247491126&amp;amp;idx=1&amp;amp;sn=7831706fc8ff6322554f8f8bda373c4f&amp;amp;chksm=c0dda744f7aa2e52c439d0184586c836cebfb989eaec9601cea35ad91b2d0fb33222ede1811e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;DMP 标签系统建设实践（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247490878_1&quot; data-recommend-article-time=&quot;1657582620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdEFDiaTuvcZAicj1aCqCK8ia4JVzdHAZdUFRzqzuP7eUicFsh9RdLx7gV3oXYkqmwgSQRlnM4r2TrrJA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据架构总体设计方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490878&amp;amp;idx=1&amp;amp;sn=8c4562222ad3012b64d2859a8b11e1ce&amp;amp;chksm=c0dda44cf7aa2d5adbf4d6292fb5fed8f08e9dec52fb784479fd198e3ee850204f1d86f600f8#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490878&amp;amp;idx=1&amp;amp;sn=8c4562222ad3012b64d2859a8b11e1ce&amp;amp;chksm=c0dda44cf7aa2d5adbf4d6292fb5fed8f08e9dec52fb784479fd198e3ee850204f1d86f600f8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据架构总体设计方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247488459_1&quot; data-recommend-article-time=&quot;1653435420&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdpbIHWNu4sB9w3y1yPYZc8rHNAClsc39Jpd73B4PSmVARZZCGgqQvjOEMG6KVDCiae29icDSZFR1Gg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据湖体系规划与规范（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247488459&amp;amp;idx=1&amp;amp;sn=84921d1e6cfebf7e02a686d9e34141c3&amp;amp;chksm=c0ddaab9f7aa23af3b28fe17477f2c15840fb368adf2de1723aa66724aa9650de69a4e723c04#rd&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247488459&amp;amp;idx=1&amp;amp;sn=84921d1e6cfebf7e02a686d9e34141c3&amp;amp;chksm=c0ddaab9f7aa23af3b28fe17477f2c15840fb368adf2de1723aa66724aa9650de69a4e723c04&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;数据湖体系之规划与规范（PPT）&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489665_1&quot; data-recommend-article-time=&quot;1655249820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAdiczHiaBHxHrq5xeYqJzAYtJ9HrMSAYhTgwDmC10z1t5ibcw0U8xnkDDHGPgO13JQRvGhiblxT4JicOyA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据安全治理解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489665&amp;amp;idx=1&amp;amp;sn=6f6a2d0b2e975d83ca7f6433b213f4bf&amp;amp;chksm=c0dda1f3f7aa28e5b316215263d7086983edabb5b13db127ac26d9de40a2a4aadf1951faa6f7#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489665&amp;amp;idx=1&amp;amp;sn=6f6a2d0b2e975d83ca7f6433b213f4bf&amp;amp;chksm=c0dda1f3f7aa28e5b316215263d7086983edabb5b13db127ac26d9de40a2a4aadf1951faa6f7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数据安全之治理解决方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489206_1&quot; data-recommend-article-time=&quot;1654645020&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfNoLibDGRkL6nzwgR4PpHjI4KYxp20JpyL8ibqoQ853w5Y1wfxdibRgwTdtKjxPewkkicPSZibwbzX71A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据处理平台总体架构（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489206&amp;amp;idx=1&amp;amp;sn=e59d560eb80d05614f45c6e1ea380479&amp;amp;chksm=c0ddafc4f7aa26d23f8da80d127a6659738046a56da2b0818cdd868b2beda122afbbcd6ed0b1#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489206&amp;amp;idx=1&amp;amp;sn=e59d560eb80d05614f45c6e1ea380479&amp;amp;chksm=c0ddafc4f7aa26d23f8da80d127a6659738046a56da2b0818cdd868b2beda122afbbcd6ed0b1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据处理平台总体架构（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489204_1&quot; data-recommend-article-time=&quot;1654558620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcZ7CzsVmF2G3yEJD7MkiayDj1J0VJgicMxZZcjDqmLXVbBVxvoCibhpOXibQGZ6BFNUaZBax2MllXmDg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;如何搭建Spark离线数仓（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489204&amp;amp;idx=1&amp;amp;sn=49b7c5e4b7a72ab59e4b8d484aa441cb&amp;amp;chksm=c0ddafc6f7aa26d0ea9c6c83e231abc9936ca17403aa587fb6a9fa59667d93380cd36a3d663b#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489204&amp;amp;idx=1&amp;amp;sn=49b7c5e4b7a72ab59e4b8d484aa441cb&amp;amp;chksm=c0ddafc6f7aa26d0ea9c6c83e231abc9936ca17403aa587fb6a9fa59667d93380cd36a3d663b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何搭建Spark离线数仓（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489203_1&quot; data-recommend-article-time=&quot;1654472220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAcZ7CzsVmF2G3yEJD7MkiayDTfMdcibQfgI0tsebicamftZuddrMQzPuRQIuBeCyDzKmfHKicklSIUMTg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;如何搭建Flink实时数仓（PPT附下载）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489203&amp;amp;idx=1&amp;amp;sn=a46bec73da7ff5225fe4b4f0ca60bf10&amp;amp;chksm=c0ddafc1f7aa26d7ce99c3086d3be03f751da532e7e7064a9175c2c31b36fa435d950ede0de3#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489203&amp;amp;idx=1&amp;amp;sn=a46bec73da7ff5225fe4b4f0ca60bf10&amp;amp;chksm=c0ddafc1f7aa26d7ce99c3086d3be03f751da532e7e7064a9175c2c31b36fa435d950ede0de3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如何搭建 Flink实时数仓（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247490723_1&quot; data-recommend-article-time=&quot;1656632220&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfgoxlDicibgbqIaMsr3xuzEIbjMok5Ck1fDhhDoDles9ic7d1Asq9licoLuZYJdKBsUAR9XBdp58Kj4g/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;主数据管理解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490723&amp;amp;idx=1&amp;amp;sn=b3dbb08b127ff15ec0dec016df422447&amp;amp;chksm=c0dda5d1f7aa2cc7682166889cecadc5e82a84a1e75c2f8280b63ed0291f1d1e14c14447904c#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490723&amp;amp;idx=1&amp;amp;sn=b3dbb08b127ff15ec0dec016df422447&amp;amp;chksm=c0dda5d1f7aa2cc7682166889cecadc5e82a84a1e75c2f8280b63ed0291f1d1e14c14447904c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;主数据管理建设解决方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247490716_1&quot; data-recommend-article-time=&quot;1656373020&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfgoxlDicibgbqIaMsr3xuzEI1HlLzZ03JVSYp0WdwTnriac1hpTeISNmsCJY22NuiayE06LebAfgJ4Kg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据平台解决方案（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490716&amp;amp;idx=1&amp;amp;sn=d68eac96a7bccb6ca06e945c9528fe7a&amp;amp;chksm=c0dda5eef7aa2cf84e650f09b8fc020521fcda7657dd5f10095258dc74afecb6130b4a30bd41#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490716&amp;amp;idx=1&amp;amp;sn=d68eac96a7bccb6ca06e945c9528fe7a&amp;amp;chksm=c0dda5eef7aa2cf84e650f09b8fc020521fcda7657dd5f10095258dc74afecb6130b4a30bd41&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据平台建设解决方案（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247490722_1&quot; data-recommend-article-time=&quot;1656545820&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfgoxlDicibgbqIaMsr3xuzEIcghibDtbmaGnWbnIoavk3yxZ2NoicibK7Tb1PBCIibbqDWoXvR6OkBo69w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据治理全景图谱（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490722&amp;amp;idx=1&amp;amp;sn=8b0dc29f688e39dcb3930b9b1bedff66&amp;amp;chksm=c0dda5d0f7aa2cc685bbaf3d6f571c2e81bf6efe121d240ad4dcacac33264dbf1acc6468eaa3#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247490722&amp;amp;idx=1&amp;amp;sn=8b0dc29f688e39dcb3930b9b1bedff66&amp;amp;chksm=c0dda5d0f7aa2cc685bbaf3d6f571c2e81bf6efe121d240ad4dcacac33264dbf1acc6468eaa3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;strong&gt;数据治理驾驶舱全景图谱（PPT）&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247489183_1&quot; data-recommend-article-time=&quot;1654126620&quot; data-recommend-article-cover=&quot;https://mmbiz.qlogo.cn/mmbiz_jpg/fp3oqPBibTAfYBVwHIhA8VW6eYy9aZgMhW5FM0MPY1I8C2JwVTiadmNcSJQrA4DwaNm0I0QeicIxialuUwEfgldjvA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数据治理大数据平台设计（PPT）&quot; data-recommend-article-content-url=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489183&amp;amp;idx=1&amp;amp;sn=8ad998e2f1ded2b238b136c912413849&amp;amp;chksm=c0ddafedf7aa26fbd4f669f0930aaaa62a14ecc77d37e8e338139a72f48ea1edcd12934af394#rd&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247489183&amp;amp;idx=1&amp;amp;sn=8ad998e2f1ded2b238b136c912413849&amp;amp;chksm=c0ddafedf7aa26fbd4f669f0930aaaa62a14ecc77d37e8e338139a72f48ea1edcd12934af394&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数据治理大数据平台设计（PPT）&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;ol start=&quot;4&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;知识星球历史已上传相关资料：限时优惠&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzkwNzE5NDM5Nw==&amp;amp;mid=2247492679&amp;amp;idx=1&amp;amp;sn=f4f447cb060782016b920b0e7ee331aa&amp;amp;chksm=c0de5d35f7a9d423fbee95a46901dd8c52f7af3b19b257f49557f21dd3e08fed43473c9a41c7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;BAT大数据架构-资料汇总（限时下载）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;BAT大数据架构-资料汇总（限时下载）&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>