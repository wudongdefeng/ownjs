<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c0abcd3d4835faea7de238430c95f877</guid>
<title>优质网站同好者周刊（第 077 期） | 倾城博客</title>
<link>https://toutiao.io/k/irnoyqo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C&quot;&gt;&lt;code&gt;命令行&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/React&quot;&gt;&lt;code&gt;React&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F&quot;&gt;&lt;code&gt;程序&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;🌈 React for interactive command-line apps. Contribute to vadimdemedes/ink development by creating an account on GitHub.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/term.ink.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - GitHub - vadimdemedes/ink: 🌈 React for interactive command-line apps&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://term.ink/&quot;&gt;term.ink&lt;/a&gt; 是基于 React 框架，用于构建交互式命令行（Command Line）应用程序的渲染器（render）；它提供了与 React 在浏览器中提供的相同的基于组件的 UI 构建体验。它使用 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/facebook/yoga&quot;&gt;Yoga&lt;/a&gt; 在终端（Terminal）中构建 Flexbox 布局，因此大多数类似 CSS 的道具，也可以在 Ink 中使用。如果您已经熟悉 React，那么您已经了解 Ink。由于 Ink 是一个 React 渲染器（renderer），这意味着支持 React 的所有功能。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://term.ink/&quot;&gt;Ink&lt;/a&gt; 这对于前端极客而言，是福音般的存在；您可以基于前端技术，快速构建命令行程序，而不用关注底层；能够极大促进您编写命令行程序的热情；进一步完善您的工具流，从而让您的效果更上一层楼。这中间，Lnk 扮演了优良循环的催化剂和基建砖；事实上，基于 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://term.ink/&quot;&gt;Ink&lt;/a&gt; 已经衍生出大量命令行应用程序；在此强烈推荐了解、学习、使用。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62eb42e2d0c36f26c3674324&quot;&gt;倾城之链 - GitHub - vadimdemedes/ink: 🌈 React for interactive command-line apps&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%89%A9%E5%B1%95&quot;&gt;&lt;code&gt;扩展&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/React&quot;&gt;&lt;code&gt;React&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：browser extension, chrome extension, developer tools, developer tooling, continuous integration, security, cybersecurity, enterprise&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Plasmo is a platform for making browser extensions at lightning speed. We make it easy to build, test, and deploy browser extensions in a matter of seconds.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.plasmo.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Plasmo | Iterate on every push&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.plasmo.com/&quot;&gt;Plasmo&lt;/a&gt; 是一个用于开发浏览器扩展的框架、平台，支持开发者&lt;strong&gt;快速&lt;/strong&gt;&lt;code&gt;开发&lt;/code&gt;、&lt;code&gt;测试&lt;/code&gt;、&lt;code&gt;发布&lt;/code&gt;「浏览器扩展」，支持所有主流浏览器（如 Chrome、Firefox、Safari 等等）。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.plasmo.com/&quot;&gt;Plasmo&lt;/a&gt; 所提供的框架基于 React，类似于浏览器扩展的 &lt;a href=&quot;https://nicelinks.site/post/61c928af5be6454b4e3d5146&quot;&gt;Next.js&lt;/a&gt;；通过TypeScript 支持、自动引导 manifest.json、资产生成、自动捆绑等，享受最先进的浏览器扩展开发者体验，零配置、自动化部署。基于 plasmo 开发浏览器框架，具备哪些优势呢？官方有额外给出以下好处：&lt;/p&gt;&lt;h3 id=&quot;开发&quot;&gt;&lt;a href=&quot;#%E5%BC%80%E5%8F%91&quot; aria-label=&quot;开发 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开发&lt;/h3&gt;&lt;p&gt;使用 Plasmo 的零配置声明性扩展框架更快地迭代。&lt;/p&gt;&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#%E6%B5%8B%E8%AF%95&quot; aria-label=&quot;测试 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;p&gt;在数百个站点上测试您的扩展程序，并将安全漏洞留在尘埃中。&lt;/p&gt;&lt;h3 id=&quot;发布&quot;&gt;&lt;a href=&quot;#%E5%8F%91%E5%B8%83&quot; aria-label=&quot;发布 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;发布&lt;/h3&gt;&lt;p&gt;简化向每个 Web 商店的提交、更新和发布。&lt;/p&gt;&lt;p&gt;Plasmo 框架是由黑客为黑客制作的电池组（battery-packed）浏览器扩展 SDK 。构建您的产品，不再担心配置文件和构建浏览器扩展的奇怪特性。该项目在 Github 开源，支持开发者免费使用；如果您想再进一步增强您的浏览器扩展开发，可以考虑付费（Pro） ，从而使用规模测试、秘密扫描等高级功能。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62ea8b8abea86d1ae27b7bd4&quot;&gt;倾城之链 - Plasmo | Iterate on every push&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%9E%84%E5%BB%BA&quot;&gt;&lt;code&gt;构建&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Svelte&quot;&gt;&lt;code&gt;Svelte&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;SvelteKit is the official Svelte application framework&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/kit.svelte.dev.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - SvelteKit • The fastest way to build Svelte apps&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://kit.svelte.dev/&quot;&gt;SvelteKit&lt;/a&gt; ，是构建 &lt;a href=&quot;https://nicelinks.site/post/62a9c2ad90509e23cea772c0&quot;&gt;Svelte&lt;/a&gt; 应用最快的方法；它是可以用于&lt;a href=&quot;https://nicelinks.site/tags/%E6%9E%84%E5%BB%BA&quot;&gt;构建&lt;/a&gt;各种规模的 Web 应用程序的框架，具有出色的开发体验，以及灵活的基于文件系统的路由（跟 &lt;a href=&quot;https://nicelinks.site/post/6010e1b10c71de1fb957b64e&quot;&gt;Vite&lt;/a&gt;、Webpack、Rollup 类似）。它具有以下功能特征：&lt;/p&gt;&lt;h3 id=&quot;由-svelte-提供支持&quot;&gt;&lt;a href=&quot;#%E7%94%B1-svelte-%E6%8F%90%E4%BE%9B%E6%94%AF%E6%8C%81&quot; aria-label=&quot;由 svelte 提供支持 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;由 Svelte 提供支持&lt;/h3&gt;&lt;p&gt;SvelteKit 是一个由 Svelte 提供支持的应用程序框架——用更小的空间构建更大的应用程序。&lt;/p&gt;&lt;h3 id=&quot;两全其美&quot;&gt;&lt;a href=&quot;#%E4%B8%A4%E5%85%A8%E5%85%B6%E7%BE%8E&quot; aria-label=&quot;两全其美 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;两全其美&lt;/h3&gt;&lt;p&gt;具备服务器渲染（SSR）应用程序的所有 &lt;a href=&quot;https://nicelinks.site/tags/SEO&quot;&gt;SEO&lt;/a&gt; 、渐进增强，以及 SPA 的流畅导航。&lt;/p&gt;&lt;h3 id=&quot;快速构建&quot;&gt;&lt;a href=&quot;#%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA&quot; aria-label=&quot;快速构建 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;快速构建&lt;/h3&gt;&lt;p&gt;借助高级路由、服务器端渲染、代码拆分、离线支持等功能开始运行。&lt;/p&gt;&lt;p&gt;与单页应用程序不同，SvelteKit 不会在 SEO、渐进增强或初始加载体验方面做出妥协——但与传统的服务器渲染（&lt;code&gt;SSR&lt;/code&gt;）应用程序不同，导航是即时的，具有类似应用程序的感觉。另外，需要说明的是，目前（2022.08）仍处于测试阶段，如果您想了解更多，可以参见 Github 开源项目：&lt;a href=&quot;https://github.com/sveltejs/kit&quot;&gt;SvelteKit&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62ea86c3bea86d1ae27b7bd2&quot;&gt;倾城之链 - SvelteKit • The fastest way to build Svelte apps&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E8%BF%9C%E7%A8%8B&quot;&gt;&lt;code&gt;远程&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E9%85%B7%E5%B7%A5%E4%BD%9C&quot;&gt;&lt;code&gt;酷工作&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%BC%80%E5%8F%91%E8%80%85&quot;&gt;&lt;code&gt;开发者&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Proxify helps companies to hire senior and vetted developers in as little as one week. Get matched with the top 2% of developers in days, not months.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/proxify.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Find and hire quality developers - Proxify&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://proxify.io/&quot;&gt;Proxify&lt;/a&gt; ，帮助公司在短短一周内，雇用高级和经过审查的&lt;strong&gt;开发人员&lt;/strong&gt;。在几天内，而不是几个月内，就能与前 2% 的开发人员匹配。据其官方网站描述：22 个不同国家/地区的 350 多家公司信任 Proxify 扩展他们的开发团队。无论您的技术堆栈是什么，他们已经证明，经过审查的开发人员准备在一周内开始。Proxify 列举了应该使用他们进行招聘的原因：&lt;/p&gt;&lt;h3 id=&quot;在几天内而不是几个月内雇用&quot;&gt;&lt;a href=&quot;#%E5%9C%A8%E5%87%A0%E5%A4%A9%E5%86%85%E8%80%8C%E4%B8%8D%E6%98%AF%E5%87%A0%E4%B8%AA%E6%9C%88%E5%86%85%E9%9B%87%E7%94%A8&quot; aria-label=&quot;在几天内而不是几个月内雇用 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;在几天内而不是几个月内雇用&lt;/h3&gt;&lt;p&gt;所有 Proxify 开发人员都经过预先审查，因此您将有一个新的团队成员准备好在几天内开始工作。不是几个月。&lt;/p&gt;&lt;h3 id=&quot;最好的开发商&quot;&gt;&lt;a href=&quot;#%E6%9C%80%E5%A5%BD%E7%9A%84%E5%BC%80%E5%8F%91%E5%95%86&quot; aria-label=&quot;最好的开发商 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;最好的开发商&lt;/h3&gt;&lt;p&gt;所有开发人员都会说英语，并具有成熟的技术技能。Proxify 仅接受每月收到的 5000 多名申请者中的 2%。&lt;/p&gt;&lt;h3 id=&quot;有竞争力的价格&quot;&gt;&lt;a href=&quot;#%E6%9C%89%E7%AB%9E%E4%BA%89%E5%8A%9B%E7%9A%84%E4%BB%B7%E6%A0%BC&quot; aria-label=&quot;有竞争力的价格 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;有竞争力的价格&lt;/h3&gt;&lt;p&gt;Proxify 的目标是长期结对开发人员。这就是我们比竞争对手便宜 50% 的原因。&lt;/p&gt;&lt;h3 id=&quot;完美的搭配&quot;&gt;&lt;a href=&quot;#%E5%AE%8C%E7%BE%8E%E7%9A%84%E6%90%AD%E9%85%8D&quot; aria-label=&quot;完美的搭配 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;完美的搭配&lt;/h3&gt;&lt;p&gt;Proxify 的技术团队将帮助您找到：不仅技术合格，而且有积极性加入您的团队的开发人员。&lt;/p&gt;&lt;p&gt;基于 Proxify 寻求开发者，只需要三个步骤即可：&lt;/p&gt;&lt;h3 id=&quot;第-1-步告诉我们您的需求&quot;&gt;&lt;a href=&quot;#%E7%AC%AC-1-%E6%AD%A5%E5%91%8A%E8%AF%89%E6%88%91%E4%BB%AC%E6%82%A8%E7%9A%84%E9%9C%80%E6%B1%82&quot; aria-label=&quot;第 1 步告诉我们您的需求 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;第 1 步：告诉我们您的需求&lt;/h3&gt;&lt;p&gt;与技术经理讨论您对产品或项目的要求和目标。&lt;/p&gt;&lt;h3 id=&quot;第-2-步匹配完美的开发者&quot;&gt;&lt;a href=&quot;#%E7%AC%AC-2-%E6%AD%A5%E5%8C%B9%E9%85%8D%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85&quot; aria-label=&quot;第 2 步匹配完美的开发者 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;第 2 步：匹配完美的开发者&lt;/h3&gt;&lt;p&gt;几天之内，将向您展示经过精心挑选和全面审查的开发人员。&lt;/p&gt;&lt;h3 id=&quot;第-3-步开始合作无风险&quot;&gt;&lt;a href=&quot;#%E7%AC%AC-3-%E6%AD%A5%E5%BC%80%E5%A7%8B%E5%90%88%E4%BD%9C%E6%97%A0%E9%A3%8E%E9%99%A9&quot; aria-label=&quot;第 3 步开始合作无风险 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;第 3 步：开始合作（无风险）&lt;/h3&gt;&lt;p&gt;工作开始。一周内完全无风险。只有满意时才付费。&lt;/p&gt;&lt;p&gt;与其他平台和机构不同，Proxify 专注于帮助您以合理的价格，获得长期发展合作伙伴，而不是零时工。这就是为什么大多数团队成员都在位超过 12 个月的原因。避免惊慌失措的项目，并找到可靠的开发人员加入您的团队。&lt;/p&gt;&lt;p&gt;如果您是开发者，您可以通过 Proxify 平台，申请成为「开发者」，或能帮助您找到合适的工作。除了招聘业务外，Proxify 还提供了大量技术相关文章分享；有通过 Google 搜索 SPA SEO 相关答案，从而知晓 Proxify 平台的存在。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62e9e167bea86d1ae27b7bd0&quot;&gt;倾城之链 - Find and hire quality developers - Proxify&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/SEO&quot;&gt;&lt;code&gt;SEO&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%9C%8D%E5%8A%A1&quot;&gt;&lt;code&gt;服务&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Get higher rankings by serving search engine crawlers a static HTML version of your Javascript website, without compromising your customers’ experience.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/prerender.io.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Render Javascript With Search Engines in Mind | Prerender&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;： &lt;a href=&quot;https://nicelinks.site/redirect?url=https://prerender.io/&quot;&gt;Prerender.io&lt;/a&gt; ，它通过为爬虫提供 JavaScript 网站的静态 HTML 版本，在不影响客户体验的情况下获得&lt;strong&gt;更高的排名&lt;/strong&gt;。是针对单页面应用（SPA）解决 SEO 问题的零侵入解决方案。&lt;/p&gt;&lt;h3 id=&quot;预渲染产生背景&quot;&gt;&lt;a href=&quot;#%E9%A2%84%E6%B8%B2%E6%9F%93%E4%BA%A7%E7%94%9F%E8%83%8C%E6%99%AF&quot; aria-label=&quot;预渲染产生背景 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;预渲染产生背景&lt;/h3&gt;&lt;p&gt;如果您有从事现代前端开发相关工作，使用 &lt;a href=&quot;https://nicelinks.site/post/5b2b7f663bd7ef3847a3fadf&quot;&gt;Angular&lt;/a&gt; ， &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; ， &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;React&lt;/a&gt; 等框架，进行单页应用开发，用户在浏览时，在浏览器动态请求并解析JavaScript、CSS，然后渲染并呈现出最终的页面；用户体验比较好，网站性能也提高不少。但存在一个问题：网络爬虫并不会动态解析 JavaScript（事实上，Google 引擎会抓取，但效果上不是特别理想），访问所有 URL 得到的只是项目入口文件中的代码，不能得到具体的内容（完整 html 源码）；如此一来，网站 SEO 就无从谈起。&lt;/p&gt;&lt;p&gt;除了上述提及的客户端渲染 (&lt;code&gt;CSR&lt;/code&gt; Croswer Side Render)，完全可以基于 SSR（ Server Side Render 服务端渲染）、SSG（Static Site Generation 静态页面生成）、本地预渲染（诸如 &lt;a href=&quot;https://github.com/chrisvfritz/prerender-spa-plugin&quot;&gt;Prerender SPA Plugin&lt;/a&gt; ）等方案，从而解决 SEO 问题。且不说是否合适、会不会影响渲染速度，单就从实现角度，需要对已经采用 &lt;code&gt;CSR&lt;/code&gt; 方案的项目，进行颇多修改，才能达成目的。&lt;/p&gt;&lt;h3 id=&quot;预渲染方案好处&quot;&gt;&lt;a href=&quot;#%E9%A2%84%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88%E5%A5%BD%E5%A4%84&quot; aria-label=&quot;预渲染方案好处 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;预渲染方案好处&lt;/h3&gt;&lt;p&gt;而在服务端使用「预渲染」方案，则无需对现有项目改造，代码&lt;strong&gt;零侵入&lt;/strong&gt;完成。其思路是：对于用户正常访问，提供构建的源码，走客户端渲染；而对于搜索引擎爬虫，则在后台启动无头浏览器，返回渲染完成后抓取 HTML 内容。Github 开源项目 &lt;a href=&quot;https://github.com/prerender/prerender&quot;&gt;prerender&lt;/a&gt; 即是基于这种理念：通过向 Google 和其他搜索引擎，提供预渲染的 HTML 来解决 SEO；它使用 Headless Chrome 将 javascript 呈现的页面呈现为 HTML 的节点服务器。与预渲染中间件一起使用。您可以克隆该项目，部署在自己的服务器，结合 Nginx 配置，即可开启您 SPA 项目的 SEO 之路。&lt;/p&gt;&lt;h3 id=&quot;prerenderio-提供什么服务&quot;&gt;&lt;a href=&quot;#prerenderio-%E6%8F%90%E4%BE%9B%E4%BB%80%E4%B9%88%E6%9C%8D%E5%8A%A1&quot; aria-label=&quot;prerenderio 提供什么服务 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Prerender.io 提供什么服务？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;prerender&lt;/code&gt; 项目由 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://prerender.io/&quot;&gt;Prerender.io&lt;/a&gt; 出品（其内部基于 Headless Chrome，与 &lt;a href=&quot;https://nicelinks.site/post/625c3735ac29ce06470af877&quot;&gt;Google Puppeteer&lt;/a&gt; 类似），也可以使用 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://prerender.io/&quot;&gt;Prerender.io&lt;/a&gt; 提供的服务；它旨在加快向搜索爬虫提供内容的速度，从而提高您的 SEO 分数。只需注册、登录、按照说明进行 Nginx 配置即可；相比自己部署的 &lt;code&gt;prerender&lt;/code&gt; 服务，有更快的速度、更多可选项设置、强大的仪表盘、缓存管理器以及其他缓存相关活动操作。&lt;/p&gt;&lt;p&gt;需要说明的是，&lt;code&gt;Prerender.io&lt;/code&gt; 必须与您的 Web 服务器/后端/CDN 集成，以具有确定哪些请求将被转发到 Prererender 的机制。Prerender.io 是如何工作的？可以参见 &lt;a href=&quot;https://docs.prerender.io/docs/how-does-prerender-work&quot;&gt;Prerender.io 文档 ｜ 入门说明&lt;/a&gt; 。&lt;/p&gt;&lt;h3 id=&quot;为什么使用-prerender&quot;&gt;&lt;a href=&quot;#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-prerender&quot; aria-label=&quot;为什么使用 prerender permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;为什么使用 Prerender®&lt;/strong&gt;？&lt;/h3&gt;&lt;p&gt;相比于客户端渲染、服务器端渲染，很多场景下，动态渲染更有用武之地；服务器可以区分「人类」和「机器人」，为人类提供完整的体验，为机器人提供轻量级的 HTML 版本。为何推荐使用 Prerender？官方给出了以下几个可以说服你的答案：&lt;/p&gt;&lt;h4 id=&quot;让-google-和您的用户满意&quot;&gt;&lt;a href=&quot;#%E8%AE%A9-google-%E5%92%8C%E6%82%A8%E7%9A%84%E7%94%A8%E6%88%B7%E6%BB%A1%E6%84%8F&quot; aria-label=&quot;让 google 和您的用户满意 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;让 Google 和您的用户满意&lt;/h4&gt;&lt;p&gt;Prerender 的中间件会检测 Google 何时访问您的网站，从而生成易于抓取的版本。人类用户可以看到动态的 Javascript 版本，让您控制他们的体验。&lt;/p&gt;&lt;h4 id=&quot;谷歌推荐&quot;&gt;&lt;a href=&quot;#%E8%B0%B7%E6%AD%8C%E6%8E%A8%E8%8D%90&quot; aria-label=&quot;谷歌推荐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;谷歌推荐&lt;/h4&gt;&lt;p&gt;Google 和 Bing 建议使用动态呈现解决方案来解决 JavaScript 呈现问题。事实上，Google 的文档特别推荐 Prerender®，因此您可以专注于开发并将 SEO 留给营销人员。&lt;/p&gt;&lt;h4 id=&quot;简单可靠可扩展的服务&quot;&gt;&lt;a href=&quot;#%E7%AE%80%E5%8D%95%E5%8F%AF%E9%9D%A0%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%9C%8D%E5%8A%A1&quot; aria-label=&quot;简单可靠可扩展的服务 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简单、可靠、可扩展的服务&lt;/h4&gt;&lt;p&gt;只需快速安装我们的中间件即可。Prerender 的托管服务以 99.9% 的服务承诺负责其余的工作。&lt;/p&gt;&lt;h4 id=&quot;开源和社区支持&quot;&gt;&lt;a href=&quot;#%E5%BC%80%E6%BA%90%E5%92%8C%E7%A4%BE%E5%8C%BA%E6%94%AF%E6%8C%81&quot; aria-label=&quot;开源和社区支持 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;开源和社区支持&lt;/h4&gt;&lt;p&gt;Prerender® 由关心软件的行业专家组成的热情社区维护。无论您的配置如何，他们都有解决方案。您甚至可以构建自己的服务器。&lt;/p&gt;&lt;p&gt;本站「 &lt;a href=&quot;https://nicelinks.site/&quot;&gt;倾城之链&lt;/a&gt; 」是基于 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot;&gt;Vue&lt;/a&gt; 等技术栈所开发的单页应用（SPA），且没有基于 SSR、SSG 做首屏、SEO 优化。早期基于 &lt;a href=&quot;https://github.com/prerender/prerender&quot;&gt;prerender&lt;/a&gt; 对搜索爬虫做了预渲染处理，由于没有进一步折腾，效果一般。目前采用 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://prerender.io/&quot;&gt;Prerender.io&lt;/a&gt; 提供的免费服务，可以在仪表盘看到：Googlebot 抓取频率相对很高，越来越多页面「缓存命中」；百度和必应的抓取频率比起 Google 要低太多；整体效果正在持续观察中。如果您也为单页应用 SEO 问题而发愁，Prerender.io 是非常值得关注和使用的服务。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62e60030bd6b821eb12244e2&quot;&gt;倾城之链 - Render Javascript With Search Engines in Mind | Prerender&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;心体澄彻，常在明镜止水之中，则天下自无可厌之事；意气和平，常在丽日光风之内，则天下自无可恶之人。当是非邪正之交，不可少迁就，少迁就则失从违之正；值利害得失之会，不可太分明，太分明则起趋避之私。──明 · 洪应明 《菜根谭》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4fb9ba0edc76959c291cbb34e9dafd27</guid>
<title>可视化服务编排在金融APP中的实践</title>
<link>https://toutiao.io/k/z6pdqve</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;h1&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;h1&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100005331&quot; data-ratio=&quot;0.6506849315068494&quot; data-type=&quot;png&quot; data-w=&quot;146&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1UibHPAanTaZmNVW2yn5bYF7O5pGDH1QmUNa2XCUichFvjlOqV5sfnlHaKRALYlrlRCpZygon1I3PIg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;Tech&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;导读&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;本文重点介绍了京东金融APP在BFF层实践过程中遇到的问题，并引出可视化服务编排在金融APP中的落地实践，其中重点介绍了可视化服务编排系统的核心功能及实现。可视化服务编排系统已经稳定支持了金融APP从去年618到现在的所有发版迭代，对人效提升帮助明显，希望能够对大家在BFF的实践有参考意义。&lt;/span&gt;&lt;span&gt;读者通过这篇文章可以了解到基于传统编码方式来实现业务需求时遇到的问题和挑战，以及通过“可视化服务编排”如何规避及解决之前遇到的问题。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01 &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在今年的敏捷团队建设中，我通过Suite执行器实现了一键自动化单元测试。Juint除了Suite执行器还有哪些执行器呢？由此我的Runner探索之旅开始了！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;p&gt;&lt;span&gt;随着SOA架构的提出到微服务架构的落地实践，原本在同一个系统内运行的业务被拆分到了不同的系统或服务中。这样做，在增加业务架构灵活性的同时，也给端上的调用带来了更多的复杂性，如：原本一次请求即可处理完成的业务，现在可能需要多次请求才能完成。为了降低端上逻辑的复杂性并提高前后端交互效率，BFF层应运而生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;BFF作为前后端的代理层，为端上的应用提供了一个业务接口聚合层，它屏蔽了复杂的服务调用关系，让端上应用可以聚焦在所需要的数据上，而不用关心提供数据的具体服务。但BFF实践的过程中，也遇到了很多问题和挑战，如BFF层的需求往往比较简单，但通过硬编码的方式实现，流程非常繁琐且效率低，那如何提高BFF层需求的交付效率，便是目前需要重点关注解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;span&gt;&lt;strong&gt;  BFF实践中的问题 &lt;/strong&gt;&lt;/span&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;理解，首先 MCube 会依据模板缓存状态判断是否需要网络获取最新模板，当获取到模板后进行模板加载，加载阶段会将产物转换为视图树的结构，转换完成后将通过表达式引擎解析表达式并取得正确的值，通过事件解析引擎解析用户自定义事件并完成事件的绑定，完成解析赋值以及事件绑定后进行视图的渲染，最终将目标页面展示到屏幕&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;BFF（Backend For Frontend）, 即服务于前端的后端，可看做是一个后端服务的代理层，它主要做接口聚合和响应数据裁剪。这里需要指出的是：BFF 只是架构分层中引入的一个概念，而非一种技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;BFF层的核心职责是为前端（包括原生、小程序、H5等）适配不同的业务场景，降低客户端与业务端的耦合，前期通过硬编码的方式来实现BFF层的需求，是最简单最直接的方式。但随着BFF层承接业务需求的增多，通过编码的方式也逐渐暴露出一些问题，如编码效率低、编码细节难以规范、调试测试效率低和服务治理能力弱等。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1 &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;编码效率低&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在接到一个新的业务需求，除了前期的需求沟通外，开始编码前，通常还需要做一些准备工作，对于Java应用来说，流程大概是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3086705202312139&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JoCn1rgKibcQDtib7jYRdSKGzPa68v85T0c7YVWKr1L1MPslhxd5sXlfw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;整个流程中，有太多需要人工处理及等待的步骤，这将会大大降低整个研发流程的效率，虽然现在有一些CI/CD的工具可以减少部分等待时间，但整体的编码体验及效率上的问题还是得不到根本的解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;编码细节难以规范&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由BFF层的特点决定，其承接的需求大多是对业务接口进行整合输出，包括对多个接口的调用、对返回数据进行裁剪、排序、格式化等操作。单看接口的调用方式就有多种实现，如并行调用、串行调用等，为了降低服务的响应时间和提高系统性能及吞吐量，多个无依赖关系的接口我们通常会采用并行调用的方式实现。并行调用，我们可以通过线程池实现，也可以通过事件回调的方式实现，通过事件回调相对于线程池的实现会有更高的性能和稳定性，但实现起来也会更复杂，研发同学通常都会选择更简单线程池实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3 &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;调试测试效率低&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然市面上目前有很多单元测试的工具和框架，但使用起来都少不了配置和编码环节。只要有功能添加或修改，我们就要编写对应的单元测试代码，另外单元测试代码运行大多需要启动整个应用，而应用的启动通常都是分钟级的，这就导致我们研发效率进一步降低。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;此外，开发环境中，我们依赖的业务接口通常是部署测试环境的，但测试环境经常会有部署、重启的操作，甚至有些接口都没有测试环境，这就对我们研发调试带来了更多不便。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.4 服务治理能力弱&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;代码本质上是非结构化的文本数据，我们很难基于代码进行统计，尤其是大促备战前，我们需要知道某个业务方的接口都被哪些服务引用或被哪些页面调用了，此时接口和服务间的依赖关系就显得尤为重要，但基于编码的方式我们是很难做到精准统计，虽然有一些调用链追踪工具可以提供帮助，但还是不够直接，还是需要人肉的去做进一步的识别。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;span&gt;&lt;strong&gt;  可视化服务编排 &lt;/strong&gt;&lt;/span&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;理解，首先 MCube 会依据模板缓存状态判断是否需要网络获取最新模板，当获取到模板后进行模板加载，加载阶段会将产物转换为视图树的结构，转换完成后将通过表达式引擎解析表达式并取得正确的值，通过事件解析引擎解析用户自定义事件并完成事件的绑定，完成解析赋值以及事件绑定后进行视图的渲染，最终将目标页面展示到屏幕。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;可视化服务编排的提出，就是为了解决上面提到的问题。可视化服务编排的初衷是希望尽可能地抛弃代码，通过线上可视化拖拽的方式完成功能的开发、调试、测试和上线，我们不写代码或写少量代码就能完成业务需求的交付，没有代码就消除了前面提到的大多问题，这样极大提高研发的交付效率及编码幸福感。整个服务的编排效果如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36647398843930634&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JKz9gTgbTg8nh6XbsEmXVNsjFBgJCQHYRGbt3vp9hmTNpGC679OZS8w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以通过&lt;/span&gt;&lt;span&gt;线上拖拽的方式完成接口调用关系的编排，如接口的串行、并行和排他调用等，通过简单的脚本完成不同业务需求的定制，如对接口返回数据的裁剪、排序、格式化等操作。编排后可通过在线测试的功能，直接对编排的服务进行测试，实时秒级验证功能的正确性，可以最大程度降低编码及编译打包的等待时间，提高业务整体的交付效率。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 核心功能&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;span&gt;可视化服务编排系统的核心功能都是对BFF日常需求及研发流程的抽象，从接口的调用方式、出入参的处理、接口异常情况的处理、服务的调试测试、服务的上线流程等几个维度完成系统整体功能的设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;接口间调用关系可以抽象为：串行调用、并行调用、排他调用。当依赖的接口间没有依赖关系时，我们可以通过并行的方式，对所有所有同时发起请求，这样可以减少服务的响应时间，从而提高系统整体的吞吐量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当服务依赖的接口有依赖关系时，如接口A的入参需要通过调用接口B来获取，那接口A和接口B之间就必须通过串行的方式调用，即需要先调用接口B，拿到接口B的响应结果才能才调用接口A。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;排他调用就好比代码中的if...else，非A即B，这种场景主要用于根据条件判断调用接口A还是调用接口B，或是执行其他的业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据不同的业务需求和场景，串行、并行和排他的调用方式可能在一个服务中同时存在，所以功能的实现中必须支持不同调用方式的组合及嵌套。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4323699421965318&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JOKZunsFicStMDxyv1NY6CQvbY9LLOVHxfMZCYzYWVvmibYMKOaGrjPCA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接口的入参主要有静态和动态两种形式，针对静态的入参，只需要在界面上提供输入框配置即可。针对动态的参数，值可能来自于其他接口的返回结果，也可能来自动态生成的，如随机数、UUID等，所以编排系统提供了通过表达式或脚本的方式来取值或生成值，以适配灵活的业务场景。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.396681749622926&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;663&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JtywypLhoiaIfEnmRL5uicWQW3TxtyrOLS1HGGPqDw5rHZMrISYjlGrng/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接口的异常&lt;/span&gt;&lt;span&gt;通&lt;/span&gt;&lt;span&gt;常&lt;/span&gt;&lt;span&gt;由两个维度进&lt;/span&gt;&lt;span&gt;行判定，一是接口是否调用成功，如果接口抛出异常或超时都可以&lt;/span&gt;&lt;span&gt;认为是接口调用失败，另一种情况是接口返回数据是否符全预期，如果接口调用成功，但返回的数据不是预期的，如关键字段没有返回或返回的数据格式不正确，同样需要将接口调用判&lt;/span&gt;&lt;span&gt;定为失败。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接口调用失败的情况下，不同场景下的处理策略可能也会不一样，因为有的接口并不是业务强依赖的，即便此接口出现问题也不会影响整个服务的响应。但有些接口则是服务强依赖的，如果请求失败则要求返回兜底数据或直接返回错误。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以对接口的异常判定和异常的处理方式设计了针对性的功能，即“ 异常断言”、“异常处理策略”和“异常处理器”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常断言需要用户填写表达式，用于判断接口返回结果是否符合预期，当异常断言返回True时，则认为接口的调用是失败的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常处理策略则分为“忽略”和“中断”，针对弱依赖接口可以使用“忽略”处理策略，此时如果接口调用被判定为失败，则会执行对应的“异常处理器”，用于根据实际业务需求返回对应的兜底数据。针对强依赖的接口可以使用“中断”处理策略，直接返回错误。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0023121387283238&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7J3Pp1mqprKY3LiawdLuf2dIExJpm21IHX22DNc2Jl1BpeiaGuxkZ9U5Bw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;将需求从之前硬编码改为线上可视化编排的方式来实现，原本的编码习惯及调试测试的相关功能就需要在线上得到体现，为了方便服务的调试及测试，编排系统添加了调试控制台和接口数据Mock的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调试控制台可以在线实时查看服务执行输出的日志，方便研发同学对服务调试过程中的问题进行排查和定位。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5098265895953757&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7Jib2NwI5FCBk9eS8pXDROMOqmOmPpAq8TmItZGPVsuAjXHeXNvf6dCpg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为方便研发同学根据用例自测服务，编排系统添加了接口响应Mock的功能，可根据入参进行匹配并返回特定的数据，这样研发同学就可以不依赖业务方的接口返回，自己通过数据Mock的方式完成服务的自测，从而提高研发效率。接口Mock的功能如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47630057803468207&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7J23icLTSfelU5nnvnJJYx1HBNkUTAnNdshbLIp4ibHx2eIRoXZscLtm9g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于传统编码的方式，当需求开发完成后，除去一些审批和验证流程，上线过程可以概括为以下3个核心步骤：代码提交-&amp;gt;编译打包-&amp;gt;上线部署，其中最关键的步骤为“上线部署”环节，我们需要重启应用或容器，应用重启需要的时间大多是分钟级的，通常完成一台机器的部署需要3-5分钟，且随着机器的增多，整个上线过程所需的时间也会增多。而通过编排实现的服务，整个上线过程都不需要重启应用，其核心部署工作就是刷新内存数据，只需要线上选择要部署的机器，即可在秒级内完成服务的部署。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6346820809248555&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JicTFvnIQz0N9PPGyNeL4KnZh2oPib4uSgRZ5Mj2XkmcOduickPqSDdLVg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.2 功能实现&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;可视化服务编排系统的核心功能有两个，一个是前端编排画布，一个是后端服务执行引擎。编排画布用于实现可视化操作部分，其核心功能是定义可操作的功能并根据用户的意图生成后端可解析执行的DSL。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于DSL的选择，方向主要有两个，一种是根据功能需求，定义一套全新的描述规范，另一种是基于已有的标准进行扩展。通过对前后端实现的复杂度及时间成本的考虑，最终决定基于BPMN规范进行裁剪和扩展，以实现编排整体的DSL规范定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;BPMN（Business Process Modeling Notation），即业务流程建模符号，是一种流程建模的通用、标准语言，通常用来绘制业务流程图，如OA审批流等。服务编排本质上也是流程编排，在BFF场景下，并不需要BPMN定义的所有功能，所以我们只需要对标准的BPMN进行裁剪即可。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;建模语言确定后，我们需要做的是确定如何实现编排画布。通过调研开源BPMN建模工具，从易用性、开放性、活跃度等几个方面考虑，最后决定基于bpmn.js二次开发来完成前端整个编排画布的实现。bpmn.js是一个基于BPMN2.0渲染引擎和建模工具，基于Web，使用JavaScript编写。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;因为bpmn.js原生画板及属性面板是基于标准的BPMN的规范来实现的，在BFF场景下，其中很多配置和属性是冗余的，为了优化用户的操作体验及降低实现复杂度，我们对bpmn.js中的属性面板基于VUE进行了重构，裁剪了BFF中不太关注的属性，添加了BFF中特有的配置项，整个编排画布效果如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5109826589595375&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JX0933YNn7WNdjhgMWrVn4D1z1oz8hqmLRwwy6hG8AToBISib3jZBP0g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;执行引擎是编排系统最核心的功能，其负责执行编排出来的服务。在执行引擎的研发过程中，调研了市面上已有的工具，但不管是从性能、灵活性还是可维护性上，都达不到我们的要求，另外基于已有的引擎做二次开发，时间成本及后续的维护成本也很高，所以最后决定通过自研的方式完成执行引擎的实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;IO选择&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为BFF的核心功能是接口调用及对接口返回的数据进行处理，所以网络IO这块采用的是全链路异步IO，基于事件回调的方式实现，这样做可以带来两个直接好处：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1. 高性能：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;IO异步化后，使用极少的线程即可完成大量并发请求的处理，可明显减少高并发场景下CPU上下文切换带来的额外性能损耗；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2. 高稳定性：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;异步IO消除了因上游接口响应延迟导致自身线程池打满的情况，对服务稳定性有更好的保障；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;预处理&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相较于传统执行引擎解释执行的方式，自研引擎在初始化的过程中会将整个流程提前预处理为一个个“执行单元”，即“单元化”，不同执行单元进行嵌套组合完成整个流程的执行，这样做的好处是，系统可以在执行前完成整个流程的预编译，将一些没必要在运行期的判断、检查逻辑提前到预处理环节，从而减少运行期的逻辑，提高引擎的整体执行性能。执行引擎核心功能参见下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7283236994219653&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JQcbic8NEyoIvA02VJLPe4ibWbxG15qLj0X9os3CsVv5IZEPmicQToebKg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;span&gt;&lt;strong&gt;运行成效&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.1 交付效率&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;BFF的业务需求由原本硬编码的方式改为线上可视化编排后，原来需要线下处理的流程全部转为线上操作，规避掉了大多编译构建及测试的等待时间，对人效提升明显，有些需求从原来的小时级提升为分钟级。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.2 服务治理能力&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;通过编排实现业务需求后，可以由系统统一管理服务和接口，这样接口和服务的元数据天然就是结构化的，接口和服务的引用依赖关系可以做到一目了然。由系统管理接口和服务后，可以添加更多维度的标签，如接口归属的业务线、服务归属的页面等，可为日常的管理提供更多维度的统计数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7Jn6MoUibQDSicz4fWmoMAIE0PVBQqyA3nVb8HuxQGXTNoMcaux7MgQZaA/0?wx_fmt=png&quot; data-cropx1=&quot;71.59861591695501&quot; data-cropx2=&quot;666.1228373702422&quot; data-cropy1=&quot;40.91349480968858&quot; data-cropy2=&quot;566.3961937716263&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8840336134453781&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;595&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JgxEdtV3Ca9jrS6YAFOqE9wV1sqNgHx6qAhnvo9fl7kYxQm0Q8icic8tg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.3 问题排查效率&lt;/span&gt;&lt;/strong&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于服务编排实现的需求，天然具有流程图属性，如下图所示，和编码的方式相比，我们对服务的功能逻辑、接口前后依赖关系、调用关系都能一目了然，对我们日常的问题排查提供了有力帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31445086705202313&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JYYaIv70oubc1s3VAHyzFmEbnhribjBTtq9xTPIzoaN5iaFRkxmElriclA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文重点介绍了京东金融APP在BFF层实践过程中遇到的问题，并引出可视化服务编排在金融APP中的落地实践，其中重点介绍了可视化服务编排系统的核心功能及实现。可视化服务编排系统已经稳定支持了金融APP从去年618到现在的所有发版迭代，对人效提升帮助明显，希望能够对大家在BFF的实践有参考意义。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100005308&quot; data-ratio=&quot;0.47058823529411764&quot; data-type=&quot;png&quot; data-w=&quot;34&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1UibHPAanTaZmNVW2yn5bYF7rUiaXg1tNeElo6pVnvsQhGsVMSiaLn7bT6icNKw0caXsV9icVXUbRQ3S7A/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1MzE2NzIzMg==&amp;amp;mid=2247490126&amp;amp;idx=1&amp;amp;sn=8f69f148b307e19acb1fe3b032954736&amp;amp;chksm=fbf7aaa1cc8023b7f3679801fd2495e8dcde7e6156642421ad40b3a74431691d8bed6b05caeb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;水滴低代码搭建——6倍提效，新品首发素材审核系统实践之路&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;水滴低代码搭建——6倍提效，新品首发素材审核系统实践之路&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1MzE2NzIzMg==&amp;amp;mid=2247490012&amp;amp;idx=1&amp;amp;sn=91a170ed0482dc95d3bdc0c761edb27a&amp;amp;chksm=fbf7a933cc80202538aa85c3ae05d233cf6df048a51df549e551649d04f37a2e93679de464e3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;京东科技埋点数据治理和平台建设实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;京东科技埋点数据治理和平台建设实践&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1MzE2NzIzMg==&amp;amp;mid=2247489919&amp;amp;idx=1&amp;amp;sn=3020ede8ac0ee055411cee331b8ccd78&amp;amp;chksm=fbf7a990cc802086be275e08409c50a4810706548d9fec3eb07788cf8e4f972625bb9cc8e37a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;基于SPI的增强式插件框架设计&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;基于SPI的增强式插件框架设计&lt;span&gt;‍&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1MzE2NzIzMg==&amp;amp;mid=2247489842&amp;amp;idx=1&amp;amp;sn=2e0676d3da4fa8ea57875db333650c33&amp;amp;chksm=fbf7a9ddcc8020cbbac60b571d91abcf3847b055e74d71cac1e930895b8351e879f7ac5af3d8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;京东618广告精排百分位AUC提升技术方案&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;京东618广告精排百分位AUC提升技术方案&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-id=&quot;MzU1MzE2NzIzMg==&quot; data-pluginname=&quot;mpprofile&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1VGqxZI7ZQ51iar80MR0dNLrq51xias5Br3C9Hia2LFA0gCks5T6gMnXibHOKaoaUiasT0LTvBrwrSEC7w/0?wx_fmt=png&quot; data-nickname=&quot;京东技术&quot; data-alias=&quot;jingdongjishu&quot; data-signature=&quot;京东官方技术公众号，你想知道的京东技术前沿黑科技，全在这里。&quot; data-from=&quot;2&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8808777&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JlfFONOvicc7sVBAHKPC51fqfgaYkzibqkJzaD20NricYham9rhBuxvyqA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;求分享&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8808777&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JlfFONOvicc7sVBAHKPC51fqfgaYkzibqkJzaD20NricYham9rhBuxvyqA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;求点赞&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8808777&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/RQv8vncPm1VL0uNianzSL1R3qHJCic0U7JlfFONOvicc7sVBAHKPC51fqfgaYkzibqkJzaD20NricYham9rhBuxvyqA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;求在看&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c274f0522e4b78566b6b25e710c6fb0f</guid>
<title>go数据库查询生成器</title>
<link>https://toutiao.io/k/k61qyu6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://pkg.go.dev/github.com/bokwoon95/sq&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/edcf799d97d7751a494f50a4731943c11a2715134370a369d2adffd7dbbc3719/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706b672e676f2e6465762d73712d626c7565&quot; alt=&quot;GoDoc&quot; data-canonical-src=&quot;https://img.shields.io/badge/pkg.go.dev-sq-blue&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/bokwoon95/sq/actions/workflows/tests.yml/badge.svg?branch=main&quot;&gt;&lt;img src=&quot;https://github.com/bokwoon95/sq/actions/workflows/tests.yml/badge.svg?branch=main&quot; alt=&quot;tests&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;https://goreportcard.com/report/github.com/bokwoon95/sq&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a140777c25aec7985902f1874ed5d56b65e4af5849d7a8d0ce13d9230b72a074/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f626f6b776f6f6e39352f7371&quot; alt=&quot;Go Report Card&quot; data-canonical-src=&quot;https://goreportcard.com/badge/github.com/bokwoon95/sq&quot;/&gt;&lt;/a&gt;
&lt;a href=&quot;https://coveralls.io/github/bokwoon95/sq?branch=main&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4d971a074afddf451886f77104eb975b76bc6aaccfeaaadba09538bfa00bc396/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f626f6b776f6f6e39352f73712f62616467652e7376673f6272616e63683d6d61696e&quot; alt=&quot;Coverage Status&quot; data-canonical-src=&quot;https://coveralls.io/repos/github/bokwoon95/sq/badge.svg?branch=main&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/bokwoon95/sq/main/header.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bokwoon95/sq/main/header.png&quot; title=&quot;code example of a select query using sq&quot; alt=&quot;code example of a select query using sq, to give viewers a quick idea of what the library is about&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-sq-structured-query&quot; class=&quot;anchor&quot; href=&quot;#sq-structured-query&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;sq (Structured Query)&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html&quot; rel=&quot;nofollow&quot;&gt;one-page documentation&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;sq is a type-safe data mapper and query builder for Go. Its concept is simple: you provide a callback function that maps a row to a struct, generics ensure that you get back a slice of structs at the end. Additionally, mentioning a column in the callback function automatically adds it to the SELECT clause so you don&#x27;t even have to explicitly mention what columns you want to select: the act of mapping a column is the same as selecting it. This eliminates a source of errors where you have specify the columns twice (once in the query itself, once to the call to rows.Scan) and end up missing a column, getting the column order wrong or mistyping a column name.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;Notable features:&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;Works across SQLite, Postgres, MySQL and SQL Server. [&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#set-query-dialect&quot; rel=&quot;nofollow&quot;&gt;more info&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Each dialect has its own query builder, allowing you to use dialect-specific features. [&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#dialect-specific-features&quot; rel=&quot;nofollow&quot;&gt;more info&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Declarative schema migrations. [&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#declarative-schema&quot; rel=&quot;nofollow&quot;&gt;more info&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Supports arrays, enums, JSON and UUID. [&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#arrays-enums-json-uuid&quot; rel=&quot;nofollow&quot;&gt;more info&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Query logging. [&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#logging&quot; rel=&quot;nofollow&quot;&gt;more info&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-installation&quot; class=&quot;anchor&quot; href=&quot;#installation&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;This package only supports Go 1.18 and above.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;$ go get github.com/bokwoon95/sq&amp;#10;$ go install -tags=fts5 github.com/bokwoon95/sqddl@latest&quot;&gt;&lt;pre&gt;$ go get github.com/bokwoon95/sq
$ go install -tags=fts5 github.com/bokwoon95/sqddl@latest&lt;/pre&gt;&lt;/div&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-features&quot; class=&quot;anchor&quot; href=&quot;#features&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Features&lt;/h1&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;IN
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#in-slice&quot; rel=&quot;nofollow&quot;&gt;In Slice&lt;/a&gt; - &lt;code&gt;a IN (1, 2, 3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#in-rowvalues&quot; rel=&quot;nofollow&quot;&gt;In RowValues&lt;/a&gt; - &lt;code&gt;(a, b, c) IN ((1, 2, 3), (4, 5, 6), (7, 8, 9))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#in-subquery&quot; rel=&quot;nofollow&quot;&gt;In Subquery&lt;/a&gt; - &lt;code&gt;(a, b) IN (SELECT a, b FROM tbl WHERE condition)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CASE

&lt;/li&gt;
&lt;li&gt;EXISTS

&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#subqueries&quot; rel=&quot;nofollow&quot;&gt;Subqueries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#common-table-expressions&quot; rel=&quot;nofollow&quot;&gt;WITH (Common Table Expressions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#aggregate-functions&quot; rel=&quot;nofollow&quot;&gt;Aggregate functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#window-functions&quot; rel=&quot;nofollow&quot;&gt;Window functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#union-intersect-except&quot; rel=&quot;nofollow&quot;&gt;UNION, INTERSECT, EXCEPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bokwoon.neocities.org/sq.html#querybuilder-insert-from-select&quot; rel=&quot;nofollow&quot;&gt;INSERT from SELECT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RETURNING

&lt;/li&gt;
&lt;li&gt;LastInsertId

&lt;/li&gt;
&lt;li&gt;Insert ignore duplicates

&lt;/li&gt;
&lt;li&gt;Upsert

&lt;/li&gt;
&lt;li&gt;Update with Join

&lt;/li&gt;
&lt;li&gt;Delete with Join

&lt;/li&gt;
&lt;li&gt;Bulk Update

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-select-example-raw-sql&quot; class=&quot;anchor&quot; href=&quot;#select-example-raw-sql&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;SELECT example (Raw SQL)&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;actors, err := sq.FetchAll(db, sq.&amp;#10;    Queryf(&amp;quot;SELECT {*} FROM actor AS a WHERE a.actor_id IN ({})&amp;quot;,&amp;#10;        []int{1, 2, 3, 4, 5},&amp;#10;    ).&amp;#10;    SetDialect(sq.DialectPostgres),&amp;#10;    func(row *sq.Row) (Actor, error) {&amp;#10;        actor := Actor{&amp;#10;            ActorID:     row.Int(&amp;quot;a.actor_id&amp;quot;),&amp;#10;            FirstName:   row.String(&amp;quot;a.first_name&amp;quot;),&amp;#10;            LastName:    row.String(&amp;quot;a.last_name&amp;quot;),&amp;#10;            LastUpdate:  row.Time(&amp;quot;a.last_update&amp;quot;),&amp;#10;        }&amp;#10;        return actor, nil&amp;#10;    },&amp;#10;)&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;actors&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;FetchAll&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;db&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.
    &lt;span class=&quot;pl-en&quot;&gt;Queryf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;SELECT {*} FROM actor AS a WHERE a.actor_id IN ({})&quot;&lt;/span&gt;,
        []&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;},
    ).
    &lt;span class=&quot;pl-en&quot;&gt;SetDialect&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;DialectPostgres&lt;/span&gt;),
    &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;sq.&lt;span class=&quot;pl-smi&quot;&gt;Row&lt;/span&gt;) (&lt;span class=&quot;pl-smi&quot;&gt;Actor&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) {
        &lt;span class=&quot;pl-s1&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Actor&lt;/span&gt;{
            &lt;span class=&quot;pl-c1&quot;&gt;ActorID&lt;/span&gt;:     &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Int&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;a.actor_id&quot;&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;FirstName&lt;/span&gt;:   &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;a.first_name&quot;&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;LastName&lt;/span&gt;:    &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;a.last_name&quot;&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;LastUpdate&lt;/span&gt;:  &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Time&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;a.last_update&quot;&lt;/span&gt;),
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;actor&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
    },
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-select-example-query-builder&quot; class=&quot;anchor&quot; href=&quot;#select-example-query-builder&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;SELECT example (Query Builder)&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;To use the query builder, you must first &lt;a href=&quot;https://bokwoon.neocities.org/sq.html#table-structs&quot; rel=&quot;nofollow&quot;&gt;define your table structs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;a := sq.New[ACTOR](&amp;quot;a&amp;quot;)&amp;#10;actors, err := sq.FetchAll(db, sq.&amp;#10;    From(a).&amp;#10;    Where(a.ACTOR_ID.In([]int{1, 2, 3, 4, 5})).&amp;#10;    SetDialect(sq.DialectPostgres),&amp;#10;    func(row *sq.Row) (Actor, error) {&amp;#10;        actor := Actor{&amp;#10;            ActorID:     row.IntField(a.ACTOR_ID),&amp;#10;            FirstName:   row.StringField(a.FIRST_NAME),&amp;#10;            LastName:    row.StringField(a.LAST_NAME),&amp;#10;            LastUpdate:  row.TimeField(a.LAST_UPDATE),&amp;#10;        }&amp;#10;        return actor, nil&amp;#10;    },&amp;#10;)&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;New&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;ACTOR&lt;/span&gt;](&lt;span class=&quot;pl-s&quot;&gt;&quot;a&quot;&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;actors&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;FetchAll&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;db&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.
    &lt;span class=&quot;pl-en&quot;&gt;From&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;Where&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;ACTOR_ID&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;In&lt;/span&gt;([]&lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;})).
    &lt;span class=&quot;pl-en&quot;&gt;SetDialect&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;DialectPostgres&lt;/span&gt;),
    &lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;sq.&lt;span class=&quot;pl-smi&quot;&gt;Row&lt;/span&gt;) (&lt;span class=&quot;pl-smi&quot;&gt;Actor&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) {
        &lt;span class=&quot;pl-s1&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Actor&lt;/span&gt;{
            &lt;span class=&quot;pl-c1&quot;&gt;ActorID&lt;/span&gt;:     &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;IntField&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;ACTOR_ID&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;FirstName&lt;/span&gt;:   &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;StringField&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;FIRST_NAME&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;LastName&lt;/span&gt;:    &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;StringField&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;LAST_NAME&lt;/span&gt;),
            &lt;span class=&quot;pl-c1&quot;&gt;LastUpdate&lt;/span&gt;:  &lt;span class=&quot;pl-s1&quot;&gt;row&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;TimeField&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;LAST_UPDATE&lt;/span&gt;),
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;actor&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;nil&lt;/span&gt;
    },
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-insert-example-raw-sql&quot; class=&quot;anchor&quot; href=&quot;#insert-example-raw-sql&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;INSERT example (Raw SQL)&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;_, err := sq.Exec(db, sq.&amp;#10;    Queryf(&amp;quot;INSERT INTO actor (actor_id, first_name, last_name) VALUES {}&amp;quot;, sq.RowValues{&amp;#10;        {18, &amp;quot;DAN&amp;quot;, &amp;quot;TORN&amp;quot;},&amp;#10;        {56, &amp;quot;DAN&amp;quot;, &amp;quot;HARRIS&amp;quot;},&amp;#10;        {166, &amp;quot;DAN&amp;quot;, &amp;quot;STREEP&amp;quot;},&amp;#10;    }).&amp;#10;    SetDialect(sq.DialectPostgres),&amp;#10;)&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Exec&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;db&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.
    &lt;span class=&quot;pl-en&quot;&gt;Queryf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&quot;INSERT INTO actor (actor_id, first_name, last_name) VALUES {}&quot;&lt;/span&gt;, sq.&lt;span class=&quot;pl-smi&quot;&gt;RowValues&lt;/span&gt;{
        {&lt;span class=&quot;pl-c1&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;TORN&quot;&lt;/span&gt;},
        {&lt;span class=&quot;pl-c1&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;HARRIS&quot;&lt;/span&gt;},
        {&lt;span class=&quot;pl-c1&quot;&gt;166&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;STREEP&quot;&lt;/span&gt;},
    }).
    &lt;span class=&quot;pl-en&quot;&gt;SetDialect&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;DialectPostgres&lt;/span&gt;),
)&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-insert-example-query-builder&quot; class=&quot;anchor&quot; href=&quot;#insert-example-query-builder&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;INSERT example (Query Builder)&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;To use the query builder, you must first &lt;a href=&quot;https://bokwoon.neocities.org/sq.html#table-structs&quot; rel=&quot;nofollow&quot;&gt;define your table structs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go notranslate position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;a := sq.New[ACTOR](&amp;quot;a&amp;quot;)&amp;#10;_, err := sq.Exec(db, sq.&amp;#10;    InsertInto(a).&amp;#10;    Columns(a.ACTOR_ID, a.FIRST_NAME, a.LAST_NAME).&amp;#10;    Values(18, &amp;quot;DAN&amp;quot;, &amp;quot;TORN&amp;quot;).&amp;#10;    Values(56, &amp;quot;DAN&amp;quot;, &amp;quot;HARRIS&amp;quot;).&amp;#10;    Values(166, &amp;quot;DAN&amp;quot;, &amp;quot;STREEP&amp;quot;).&amp;#10;    SetDialect(sq.DialectPostgres),&amp;#10;)&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;New&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;ACTOR&lt;/span&gt;](&lt;span class=&quot;pl-s&quot;&gt;&quot;a&quot;&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;Exec&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;db&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.
    &lt;span class=&quot;pl-en&quot;&gt;InsertInto&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;Columns&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;ACTOR_ID&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;FIRST_NAME&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;LAST_NAME&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;Values&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;TORN&quot;&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;Values&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;56&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;HARRIS&quot;&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;Values&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;166&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;DAN&quot;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&quot;STREEP&quot;&lt;/span&gt;).
    &lt;span class=&quot;pl-en&quot;&gt;SetDialect&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;sq&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;DialectPostgres&lt;/span&gt;),
)&lt;/pre&gt;&lt;/div&gt;
&lt;p dir=&quot;auto&quot;&gt;For a more detailed overview, look at the &lt;a href=&quot;https://bokwoon.neocities.org/sq.html#quickstart&quot; rel=&quot;nofollow&quot;&gt;Quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-contributing&quot; class=&quot;anchor&quot; href=&quot;#contributing&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Contributing&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;See &lt;a href=&quot;https://github.com/bokwoon95/sq/blob/main/START_HERE.md&quot;&gt;START_HERE.md&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8219697d014804825f8b2bbe8237aa56</guid>
<title>kafka Broker源码</title>
<link>https://toutiao.io/k/wzjabd6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
    
    &lt;div id=&quot;H5&quot;&gt;
        &lt;p class=&quot;waf-nc-h5-mask&quot;/&gt;
        &lt;div id=&quot;WAF_NC_H5_WRAPPER&quot; class=&quot;waf-nc-h5-wrapper&quot;&gt;
            &lt;div class=&quot;waf-nc-h5-panel&quot;&gt;
                &lt;img class=&quot;waf-nc-h5-icon&quot; src=&quot;//img.alicdn.com/tps/TB1zmO_LXXXXXcBXFXXXXXXXXXX-200-200.png&quot; alt=&quot;&quot;/&gt;
                &lt;p class=&quot;waf-nc-h5-description&quot;&gt;为保证您的正常访问，请进行如下验证：&lt;/p&gt;
            &lt;/div&gt;
            &lt;hr class=&quot;waf-nc-h5-hr&quot;/&gt;
            &lt;p id=&quot;h5_nocaptcha&quot; class=&quot;nc-container&quot; data-nc-idx=&quot;1&quot;/&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;p id=&quot;traceid&quot;&gt;TraceID: 2ff6149716597442530402258e&lt;/p&gt;

&lt;/body&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>514e31bf7f9220135a2fb007a7b840a8</guid>
<title>分享 | Spark Skew Join的原理与优化</title>
<link>https://toutiao.io/k/pr0zuan</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/nwwClDeS1mNZM6nK7BaDR3s2x2CI2APjGG4jfoVhPwG3DWrPTU9we5ALWNL350aOQRNkdemMWQnWHHplgROWtA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1259.3548387096773&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;582.652329749104&quot; data-ratio=&quot;0.4614773629864972&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nwwClDeS1mNZM6nK7BaDR3s2x2CI2APjWYVGthbU8tx7uUj5tTN6c4UzMia2r49VTDXMNrx32a0bM3HcHXYIzicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1259&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;供稿 | &lt;/span&gt;&lt;span&gt;eBay Carmel Team&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;作者 | 王刚&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;编辑 | 顾欣怡&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文5499字，预计阅读时间17分钟&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更多干货请关注“eBay技术荟”公众号&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;Carmel&lt;/strong&gt;是eBay内&lt;/span&gt;&lt;span&gt;部基于Apache Spark打造的一款SQL-on-Hadoop查询引擎。我们通过对Apache Spark的改进，为用户提供了一套高可用高性能的服务，用以满足eBay内部大量的分析型查询需求，如今单日查询量已接近&lt;/span&gt;&lt;span&gt;&lt;strong&gt;25万&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在生产中，我们发现制约查询执行性能的一个重要因素是&lt;strong&gt;data skew（数据倾斜）&lt;/strong&gt;，Spark在3.0的版本中引入了&lt;strong&gt;skew join&lt;/strong&gt;，用来解决在join过程中出现的data skew问题。但由于其所能覆盖的场景有限，我们对其做了一系列的扩展和改进，从而解决更多我们线上遇到的data skew问题。&lt;strong&gt;本文就Spark skew join进行介绍，包括skew join的原理与实现，并重点介绍我们在skew join之上所做的优化。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;01 &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;背景知识&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;在一个分布式查询引擎中，对于aggregation（为了方便介绍，本文提到的aggregation都特指group by之后做的聚合）、 join等一些操作，引擎通常需要保证在执行的过程中具有相同key的数据汇集到同一个处理单元内进行处理。在Spark中，这一过程通常是通过shuffle（包括shuffle write和shuffle read）来完成的， shuffle对应的physical operator是ShuffleExchangeExec。那么Spark是如何决定应该为哪些operator加上ShuffleExchangeExec的呢？&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;requiredChildDistribution&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;每个physical operator都实现了requiredChildDistribution方法，以获得一个Distribution的实例，用于表示&lt;strong&gt;operator对其input数据分布情况的要求&lt;/strong&gt;。&lt;/section&gt;&lt;section&gt;举例来说，对于HashAggregateExec（ aggregation对应的physical operator，也可能是SortAggregateExec，这里我们拿HashAggregateExec举例），其执行的前提是“所有具有相同aggregation key的record放到同一个处理单元中”（为了方便介绍，本文我们暂不考虑partital aggregation）。在Spark中，这样的处理单元就是RDD的一个partition，因此也就是要满足“所有group by 的column具有相同value的record被分配到RDD的同一个partition中”。而这样的数据分布规律有一个专门的类来表示ClusteredDistribution。&lt;strong&gt;ClusteredDistribution表示的数据分布情况是“在一个RDD中，所有具有相同key的record被分配在同一个partition内”。&lt;/strong&gt;&lt;span&gt;HashAggregateExec的requiredChildDistribution就是ClusteredDistribution。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6691312&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS989eBia4sL0iciaBgToGMwe1gcJ6Al8atWsrxGT0cb5ZicF6pNPaNkw4xw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;541&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;图1（点击可查看大图）&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;再看join，拿sort merge join举例，其对应的physical operator是SortMergeJoinExec。在Spark的实现里，SortMergeJoinExec的实现简单来说就是把join两边的RDD中具有相同id的partition zip到一起进行关联。前文提到，ClusteredDistribution保证的是具有相同key的record能聚集到同一个partition中，但对join来说这样还不够。如图1所示，在RDD1中假设join key为1的record分配到了partition 0，那么如果RDD1和RDD2要进行join，则RDD2中所有join key为1的record也必须分配到partition 0中。Spark通过在左右两边的shuffle中使用相同的hash函数和shuffle partition number来保证这一点。因此，SortMergeJoinExec对join两边的requiredChildDistribution就不是ClusteredDistribution，而是HashClusteredDistribution。&lt;strong&gt;HashClusteredDistribution不仅保证具有相同key的record被分配到同一个partition内，而且保证了对每一个key分配到的partition id也都是确定的。&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;outputPartitioning&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;同时，每个physical operatior还实现了outputPartitioning接口，以获得一个Partitioning的实例，用于表示&lt;strong&gt;operator输出数据满足的分布情况&lt;/strong&gt;。&lt;/section&gt;&lt;section&gt;举例来说，对于ShuffleExchangeExec，其主要的目的是按照input数据的shuffle key的hash值进行分桶，经过ShuffleExchangeExec后，具有相同hash值的record会聚集到具有相同id的桶里，也就是同一个shuffle partition中。Spark把这样的分布情况叫做HashPartitioning。因此ShuffleExchangeExec的outputPartitioning就是HashPartitioning。而像HashAggregateExec这样的operator，由于其本身并不会改变input数据的分布情况，其outputPartitioning就是其input operator的outputPartitioning。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;EnsureRequirements&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;决定应该为哪些operator加上ShuffleExchangeExec的逻辑都是在rule EnsureRequirements里完成的。&lt;/strong&gt;一个physical plan在Spark中用一个tree来表示，每一个physical operator都对应tree上的一个节点。EnsureRequirements的执行过程要遍历整个 tree，当遍历到一个节点时，去检查其子节点的 outputPartitioning是否满足该节点的requiredChildDistribution。如果不满足，则在两个节点之间加上一个ShuffleExchangeExec。整个遍历过程从叶子节点开始，一直到根节点结束。这样当遍历结束后，就能确保每个节点的子节点的outputPartitioning都满足该operator的requiredChildDistribution。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt; 02 &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt; Spark skew join的实现及其不足&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;Data skew本身是一个很泛化的概念，指的是数据分布不均匀，从而导致大量数据聚集到少数的单元内。Spark中这样的单元是RDD的一个partition，而每一个partition对应一个task。因此data skew也意味着某一些task要处理的数据量远大于其它task处理的数据量，这些task可能会拖累整个SQL的执行速度，尤其是对join来说。&lt;/section&gt;&lt;section&gt;从3.0开始，Spark引入了adaptive query execution（AQE），使得Spark能够通过stage执行结果动态地调整plan，而skew join就是AQE的一项重要应用。&lt;/section&gt;&lt;section&gt;下面我们借用databricks的一篇blog里的例子来介绍skew join的实现。如图2，Table A join Table B，shuffle partition是4，那么在join阶段task和shuffle partition的分配情况如表1所示。但从图2我们可以看出，partition A0的size要明显大于其他partition的size，所以对task 0来说，其所要读的数据量也远大于其他task的数据量。&lt;strong&gt;这就是一个典型的data skew现象。&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;针对这种问题，Spark提供了一种解决方案，其基本思路是，对那些skewed partition进行切分，将skewed partition的数据分片分配到不同task上。这样原本一个shuffle partition只会分配到一个task，变成了同一个shuffle partition的数据可能分配到多个task上，如图3所示，从而减小了单个task的压力，进而提升整个SQL的执行速度。经过skew join处理后，其分配情况如表2所示。因此在join阶段，task数量由4变为5，并行度提升了&lt;strong&gt;&lt;span&gt;25%&lt;/span&gt;&lt;/strong&gt;。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;177&quot; data-ratio=&quot;0.40524781341107874&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS7DpQ79oHZY3bH7FNuoHp8vBQ9GXTQ5PVgF3RgZ2g1R98tq81gNPGpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图2（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;223&quot; data-ratio=&quot;0.3436055469953775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSgpG423WG8ibTCXrvne6q6F8icYQSSibh3sppC5Mz8MyiaW5BItyU8ibJotg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1298&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图3（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4724409&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSSwcBaAkITGBGWibF2QyLTqbK3iaSlzU5rIjaDCUER0jIzlvtx2mAfjIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;skew join通过对skewed partition进行切割，能够大幅度提高并行度，避免出现长尾现象。从而大大提升了某些SQL的执行性能。但通过观察线上的使用情况，我们发现了现有skew join的一些不足。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;首先，现有的skew join只支持最基本的sort merge join的pattern。如图4所示，join左右两边必须是sort和shuffle，而线上的SQL千变万化，这样的pattern不足以覆盖所有的场景。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.1173021&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS7Tia5dteZtMlWP6uTBsN9PZOeT5ib4jRRiamGa4MPVZyWy3ntCPicpNPeA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;341&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图4（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;其次，我们在线上经常会发现一些case，在SQL执行过程中出现了data skew的现象，而且plan也match现有skew join支持的pattern，但skew join并没有生效。经过分析发现， Spark在决定是否采用skew join的时候还有一个判断：&lt;strong&gt;引入skew join后是否会导致引入额外的ShuffleExchangeExec，如果会，则放弃使用skew join&lt;/strong&gt;。那什么样的情况下会引入额外的ShuffleExchangeExec呢？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6709753&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSvhazdN4bxOmKwLiafMkR0Kbib0129ZYrgm8xSKCl8eC90wpTtkGLo3hQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;851&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图5（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;图5中给出了一个例子：两表join，两边表的join key分别是column a和column b，join完后再根据column a做聚合。由于在join之前，左表就会根据column a做一次shuffle，而join本身不改变输入数据的分布情况，因此join之后的结果分布还满足HashPartitioning，partition key为column a。这种分布满足HashAggregate的requiredChildDistribution，所以在SMJ之后不需要再做一次shuffle。但是，我们发现在ShuffleExchange1中出现了data skew。根据前面的介绍，如果要使用skew join，就要对ShuffleExchange1生成的RDD 的skewed partition进行拆分，同一个partition的数据在shuffle read时被分配到多个task中。&lt;strong&gt;这可能导致一些column a相同的record被分配到不同的task中&lt;/strong&gt;，从而不再满足column  a做aggregation需要满足的条件，即“所有column a相同的record被分配到同一个task中”，因此在图中，需要在HashAggregate之前加上一次shuffle。&lt;/section&gt;&lt;section&gt;然而，我们在生产环境中发现，一些case由于data skew导致的性能下降要远比多一轮shuffle更严重。对于这些case我们倾向于采用skew join，哪怕会因此多出一些shuffle的开销。&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt; 03 &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;对skew join做的一些改进&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;针对以上提到的两点不足，我们对现有的skew join做了一些优化，使其能够覆盖到更多data skew的情况，主要包括以下三点。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;支持单边是bucket表的skew join&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;在ebay内部，bucket这一特性被广泛使用于各个核心表中。如此一来，这些表在和其他的表或者数据做join时，就可以通过bucket join来避免shuffle，其plan如图6所示。我们发现这里的 ShuffleQueryStage作为中间结果，时常会出现data skew的现象。现有的skew join还无法支持这种pattern的plan，如果要利用上skew join，只能在这些bucket表参与join时，不再走bucket join，强制做一轮shuffle。但很多bucket表作为核心表通常又比较大，做一次shuffle的开销也比较大。基于此，我们对现有的skew join做了一些改进，使其适用于这种pattern。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.1173021&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSuora5k4kSbSSA8H5eOiahvjTghOFITkyxxqgsFFDLXjCsPYSwWwFWRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;341&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图6（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;基于前文的介绍，skew join的核心是对join一边的RDD partition做split，另外一边的RDD 对应的partition做duplicate。在现有的实现中，split和duplicate的逻辑是通过CustomShuffleReaderExec来实现的，CustomShuffleReaderExec在shuffle read阶段对某些shuffle partition的数据做切分或者重复读。而对于我们这种case，因为一边没有shuffle，所以没法复用现有的逻辑。而且对这些bucket表，在建表时 bucket column选得通常比较合理，数据在各个bucket分布均匀，因此不需要处理bucket表这一边data skew的情况，而只需要考虑怎么对bucket表的某些partition进行duplicate。&lt;/section&gt;&lt;p&gt;我们的做法是增加一种新的operator， PartitionRecombinationExec，其execute方法返回一个RecombinationedRDD。RecombinationedRDD实现如图7所示，它本身没有什么计算逻辑，只是对其parent RDD的partition做一些重新排列，duplicate出一些需要重复读的partition， 对partition做重排列是在方法getPartition中实现的。然后在生成执行计划阶段，把operator PartitionRecombinationExec添加到plan的合适的位置就可以了。其实现效果如图8所示。&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6867336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSDWGP2pGNrdoJMlqqUFSiaGJulAQMPtWvRVskpLkWpdrvYrnjdySKqTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;897&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图7（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.4371585&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSD2X6Qick7pVQctSKSA8f2xVcU7IvCjbS6r6nsYecWdtSKAdFvQicY4Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图8（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;这里不得不称赞一下Spark优雅的设计，让这些工作变得如此的简单。因为有了RDD这一层抽象，所有的operator都只需要在RDD上进行操作。当实现一个新的operator时，只需要编写对已有RDD的输出的每一条InternalRow的处理逻辑，然后返回一个新的RDD，最后把这个新的operator挂在logical/physical plan上，所有的工作就都完成了。剩下的一切就可以交给Spark框架去处理，从新建的RDD怎么去和已有的RDD串联，到这些RDD上的操作最终怎么转换成一个个task，再到这些task又怎么在一个复杂的分布式的环境中执行… 几乎包揽一切，大大提高了开发效率。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;让skew join支持更复杂的plan&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;除了上述当有一边是bucket表的场景中，我们还在线上发现了很多patten，现有的skew join没能覆盖到。如图9所示，SMJ的一边有一个HashAggregate，根据前文的介绍，如果aggregation key和join key是一致的，在HashAggregate后也不需要加上ShuffleExchangeExec。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.1173021&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS7Lx2biaYPB6glpOsU348qG9zUqngpOuuTGpcicyBIw0aibEkrVPzL29Hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;341&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图9（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;那么对于这种case，如果发生了data skew，我们是否也可以通过现有的skew join的方式去处理呢？这需要分两种情况进行讨论。&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Case 1&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;ShuffleQueryStage1出现了data skew。如果要apply skew join，就要把ShuffleQueryStage1对应的RDD的skewed partition做拆分，而ShuffleQueryStage2里与之对应的partition做duplicate。&lt;/section&gt;&lt;section&gt;这里面有个问题，做完duplicate后再执行HashAggregate，整个query的结果还正确么？做完duplicate后就不再满足“具有相同aggregation key的所有record分布到同一个RDD partition内”这一条件，那么最终执行的结果是正确的么？&lt;/section&gt;&lt;section&gt;答案是肯定的。这其实就是skew join实现的巧妙之处，&lt;strong&gt;skew join并不保证在整个处理过程中每一个算子的结果的正确性，而只保证join后结果的正确性&lt;/strong&gt;。如果我们再看图4中的例子，其中有一个CustomShuffleReaderExec会做duplicate read。因此，如果只看该CustomShuffleReaderExec输出的结果，那显然也是不正确的，但是根据join执行的原理，在join之后那些duplicate的record会自动去重。而图9的例子跟图4的例子本质上没什么不同，即使aggregation的输出结果看起来不正确，但是经过上层的SMJ，就确保了结果的正确性（当然重复的计算也会带来一些额外开销）。&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;Case 2&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;ShuffleQueryStage2出现了data skew。如果要apply skew join，那么HashAggregate读的数据将是经过split的数据，仍旧不再满足“具有相同aggregation key的所有record分布到同一个RDD partition”这一条件。那这次查询返回的结果还正确么？&lt;/section&gt;&lt;section&gt;答案是否定的。现有的skew join中SMJ可以做到对那些duplicate的record去重，而对那些分布在不同task中的具有相同aggregation key的record不能起到聚合的作用，这些record只有全部分配到同一个task中才能被完全聚合起来，因此SMJ输出的结果也将不再正确。&lt;/section&gt;&lt;section&gt;经过上述讨论，我们会发现，在SMJ中，只有所有子节点对input的数据分布情况没有要求的一边出现了data skew时，我们才可以对其进行拆分，进而apply skew join。于是我们对rule OptimizeSkewedJoin做了一些改进，一方面放宽了其能够匹配到的plan的范围，如图10所示，另一方面在判断某一边能不能split时加了条件，如图11所示。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1305556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSoEdBI6WRICvicfScpVkKh78BUc9jXWUBsGp7ddkgrSLK02yWrMuC2eA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图10（点击可查看大图）&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5425926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS4Sshm4Lo0lYY6iaS6SBtJmR8y0DW3YIAdNtPIicMd5iaV7Os9l5yMUVCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图11（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;经过这一改进，skew join支持了更多种情况，如图12所示。SQL及其执行的DAG为图13。&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8757396&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSbu94lFpCCwP1DosPvibaKfdNdicRKiaDY6N2NZBLNS6Sz1KicerHtN1xjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;338&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图12&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSaG1Kmiakic0yVmIlKRUkxznJjiacVX6nBEQ9UhNXticzVZDfgOk0zeFqZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图13（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;在shuffle开销可以接受的情况下，尽可能应用skew join&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;前文讲到Spark在决定是否要apply skew join时会判断是否会因此引入新的shuffle，如果发现会引入新的shuffle，则停止apply skew join。之所以这样做，一个原因是现有的skew join的实现还不能正确处理这样的case。因为在apply skew join后，框架并不会再去执行rule EnsureRequirements，去添加一些必要的shuffle。&lt;strong&gt;于是我们去掉了这个check，并尝试在执行完OptimizeSkewedJoin后，再去执行一遍EnsureRequirements&lt;/strong&gt;，但也因此引发了不少问题。&lt;/p&gt;&lt;section&gt;首先，AQE引入了rule CoalesceShufflePartitions，用来合并shuffle partition，从而减少shuffle read task的数量。而合并shuffle partition这一过程是在operator CustomShuffleReaderExec里实现的，因此在执行完CoalesceShufflePartitions后，会在一些shuffle 之后加上一个CustomShuffleReaderExec。而由于CustomShuffleReaderExec会合并不同的shuffle partition，它会改变input数据的分布情况，所以CustomShuffleReaderExec的outputPartitioning是UnknownPartitioning。在这种情况下，再执行一遍EnsureRequirements会引入新的ShuffleExchangeExec，如图14所示。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.6422287&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSnibrlsjyoIOsiaQHjWCDYicTYCTHI2zeumYNPQVGRg8d5MPibG6aAg6ic0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;341&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图14（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;我们先关注ShuffleExchange2，HashAggregateExec需要的数据分布是“具有相同aggregation key的所有record分布到同一个RDD partition内”，这里CustomShuffleReaderExec做的事情只是把多个shuffle partition合成一个partition，合并之后的数据分布还满足这一条件，因此ShuffleExchange2是没有必要的。为了解决这个问题，我们加入了一种新的Partitioning CoalescedPartitioning，其实现如图15所示。除了HashPartitioning，我们还考虑了现有的所有Partitioning经过coalesce后满足的效果。而如果CustomShuffleReaderExec只是合并了一些partition（没有拆分partition），它的outputPartitioning就是CoalescedPartitioning。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8180862&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSibFjEYoVAiafsqiajWcJaicQ2wGFUPs6X1GFA8yCG6a10UpjE8sZ8ibo0DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;951&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图15（点击可查看大图）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;接下来考虑SMJ。经过rule CoalesceShufflePartitions后，SMJ两边引入了CustomShuffleReaderExec，而CustomShuffleReaderExec的outputPartitioning是我们前面新加的Partitioning CoalescedPartitioning。在上文中我们讲过，对SMJ来说，两边的input只满足“具有相同join key的record分布在RDD的同一个partition”是不够的，还要保证join两边的input按照相同的规律分布。因此SMJ两边的input 如果经过了coalesce的话，我们还需要保证两边coalesce的方式是一致的。于是我们在EnsureRequirements中又加了一些逻辑来保证这一点，如图16所示。SMJ两边input的outputPartitioning如果是CoalescedPartitioning的话，还必须保证coalesce spec一致，否则至少会有一边再加shuffle。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4379487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCS5KYR0oraA0QUYjqyVblYl91vVuTfDNYbCecN3HpdLibKBkY1jdWGBmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;975&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图16（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;前面只谈到通过rule CoalesceShufflePartitions引入的CustomShuffleReaderExec，而skew join本身也是通过CustomShuffleReaderExec来做shuffle partition的duplicate和split的。这里的CustomShuffleReaderExec做的事情不止是合并多个shuffle partition，因此其outputPartitioning也不再是CoalescedPartitioning。那么如何避免EnsureRequirements在这些OptimizeLocalShuffleReader之后加上ShuffleExchangeExec呢？这里的情况比较复杂，由于篇幅有限，我在这里就不做过多介绍，基本思路有两个：&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;li&gt;&lt;section&gt;对于一个SMJ operator，如果发现其已经apply skew join，改变它的requiredChildDistribution，让其对子节点的outputPartitioning不再有特殊要求，从而避免引入不必要的shuffle。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在执行完EnsureRequirements后，再通过模式匹配来去掉一些不必要的shuffle。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;图17是一个示例SQL，其执行的DAG如图18所示。&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7218935&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSiay8ibTdeFUQs3MHTAe1oVFmYmYEQoY1216duQCnkr7hpFwGJ1lUY42A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;338&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2010695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSHm2iamnXC0s7ARG3N0w6aEibHVP7ZIHEAkrfGH5H5htReUiauO2Oict3OA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;935&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;图18（点击可查看大图）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;04 &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;总结和感悟&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;现有的skew join是在AQE的框架内实现的。而自从引入AQE后，Spark查询优化器的复杂度提升了很多，从以往容易理解的平铺直叙式的展开的方式，变成了如今这种往返迭代，动态调整的方式。这一转变带了不少挑战，在AQE中添加的逻辑可能会在意想不到的时刻被触发，而且很可能触发多次。同时，由于我们线上分析型的SQL千变万化，动辄上百近千行的SQL，生成的plan都异常复杂。对这样的plan做调整必须异常谨慎，因为你很难想到这些调整正作用于一个什么样的plan上。而更严重的是，对这些核心的rule，如EnsureRequirements的改动，稍有不慎就会导致漏加shuffle或者sort，最终导致查询结果不正确，这是不能接受的。&lt;/p&gt;&lt;section&gt;那在对现有的skew join做改动时，应该如何尽量去降低这些风险呢？我想，首先需要我们对AQE框架的实现有比较深刻的理解。其次，对于skew join，需要考虑三个问题：skew join的原理和实现都是什么样的？它能够支持的pattern有哪些？它支持的边界又在哪里？当把这些问题都想清楚后再去做改动，基本上就能够保证这些改动逻辑上的正确性。尽管这些改动可能会生成一个不够优的plan（前期我们经常会发现生成的plan多了一些没必要的shuffle或者sort），但基本不会生成错误的plan。在做优化的同时，我们也加深了对Spark和AQE的理解，这项工作充满挑战又富有乐趣！&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;您可能还感兴趣：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650511083&amp;amp;idx=1&amp;amp;sn=1378c4c78573eba7db391a830dd4d161&amp;amp;chksm=8731aebfb04627a9cc1a02e9d1abbc5f6c71f006fe2e444729a9f45eb82aee80fad4de3300cc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Hadoop平台进阶之路 | HDFS NameNode性能优化实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508894&amp;amp;idx=1&amp;amp;sn=4bf7318920e8da0c1870279be18bd60a&amp;amp;chksm=8731b60ab0463f1c5fa0edd6aaf95984bed5c125d6f1dde542648f7f5dd29fead7f68a1c1fe5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Hadoop平台进阶之路| 一场PB规模量级的HDFS数据迁移实战&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508767&amp;amp;idx=1&amp;amp;sn=d48f285471b735c59888033973032959&amp;amp;chksm=8731b58bb0463c9d8b594218f915dd77a181bdf0399dd7554b54f80fff5a135912504218d6e1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Hadoop平台进阶之路 | eBay Spark测试框架——Woody&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508941&amp;amp;idx=1&amp;amp;sn=a30f7ff3bf20096cd7646986c4a9352d&amp;amp;chksm=8731b6d9b0463fcff040d51b35c338738ddf7dd931a273a68e916a88eceb5bbe205448e81e96&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;从OpenStack到Kubernetes | 如何在大规模产线应用迁移中保证高可用性？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508915&amp;amp;idx=1&amp;amp;sn=31a9d5ae5bcc286057c2b3509a87640f&amp;amp;chksm=8731b627b0463f316756f490654c7609142b2bc43c1447c4d6edd8d1dfff95fb2f79dbe9ce0a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从Druid到ClickHouse | eBay广告平台数据OLAP实战&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508523&amp;amp;idx=1&amp;amp;sn=45db183efb4f264a462e9677687f843a&amp;amp;chksm=8731b4bfb0463da9098e0b0e977d63e5678418df22d37d1723c83638738d062c1deb929d932b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据之道 | Akka Actor及其在商业智能数据服务中的应用&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650507809&amp;amp;idx=1&amp;amp;sn=9ecddff049d28f6f3b05e41b61373467&amp;amp;chksm=8731b275b0463b63e23f4abf1190611e9cecf2490dab0dc89f9a1918d92a139405cb1dc6f08b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据之道 | 属性图在增强分析平台中的实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508891&amp;amp;idx=1&amp;amp;sn=c57f53b58860301f34f7c1839f70d889&amp;amp;chksm=8731b60fb0463f195acc49547b90bbfd24206cdf86a4260fccc5dc69c00c62900cd64d207132&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;技术分享｜基于图的大规模微服务Trace分析方法与企业实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508843&amp;amp;idx=1&amp;amp;sn=b43da4c2691cab6e67f66d90a7154024&amp;amp;chksm=8731b67fb0463f691d00b37dda441eee867840a97f58da139478d91c87bedc8c555b5966051a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;超越“双十一” | ebay支付核心账务系统架构演进之路&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508841&amp;amp;idx=1&amp;amp;sn=20b1e5cf0796cb658ede3cc6876797db&amp;amp;chksm=8731b67db0463f6b17fdf5431246cfec39b0d0ddb705149e2e14c011ebb5a74793a12a9c953f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;平台迁移那些事 | eBay GC调优策略的实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508307&amp;amp;idx=1&amp;amp;sn=e1a2efbdcfe871929ad9f6511e40f8d9&amp;amp;chksm=8731b447b0463d519c8bf1f802577576cebf145eee8a6f3522924505c17a79990f2f4d6e04c5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;平台迁移那些事 | eBay百亿级流量迁移策略&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650507960&amp;amp;idx=1&amp;amp;sn=f6a63284aacf287e9d926e122a753da5&amp;amp;chksm=8731b2ecb0463bfa92430e6fa638e77cd17e59321481c7cac0ba7a07dfda5065aa0c0d0516c6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;分享 | eBay TESS，我心中的那朵“云”&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650507912&amp;amp;idx=1&amp;amp;sn=653f41ceb4c97c8a2a19b7cb7fd4870a&amp;amp;chksm=8731b2dcb0463bca70122af8c37c99f12881f12c9970517b7b87557cbe8f25f27e88ecbaf1cb&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;前沿 | BERT在eBay推荐系统中的实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650508098&amp;amp;idx=1&amp;amp;sn=2f11f7af732f4e505a188f6db23f215b&amp;amp;chksm=8731b316b0463a00d74e2aa01dca3f8fbad25aad3b43a9182e0262cb0b61760c54581aa7260c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;eBay云计算“网”事｜网络重传篇&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MDMyNDUzOQ==&amp;amp;mid=2650507840&amp;amp;idx=1&amp;amp;sn=20e2d810c56f92a8eb2e7f4820ffa549&amp;amp;chksm=8731b214b0463b0254b6ebfc7cdc631de513f915066aec03a82719eda725cb4847367452c5a4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;eBay云计算“网”事｜网络丢包篇&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.36134453781512604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nwwClDeS1mO8PLeHice9oEVx2qwvlSxCSmhmtSBU1yoAyL5l4H7c11p7XxKWsvb4eLTtcT9NxEkocGEWdGnP5xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;119&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;👇点击&lt;/span&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;span&gt;，一键投递 &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;    eBay大量优质职位，等的就是你&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>