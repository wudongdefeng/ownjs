<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>59b67600dc903f4e1a19e6cb3b691464</guid>
<title>【深入浅出SpringCloud原理及实战】「Netflix系列之Hystrix」针对于限流熔断组件Hystrix的基本参数和实现原理介绍分析_洛神灬殇的博客-CSDN博客</title>
<link>https://toutiao.io/k/ke3yssc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-tomorrow-night&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h1&gt;&lt;a id=&quot;_0&quot;/&gt;[每日一句]&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;也许你度过了很糟糕的一天，但这并不代表你会因此度过糟糕的一生。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;a id=&quot;_4&quot;/&gt;[温馨提示]&lt;/h1&gt; 
&lt;p&gt;承接第一篇文章&lt;a href=&quot;https://blog.csdn.net/l569590478/article/details/128714743?spm=1001.2014.3001.5501&quot;&gt;🏹【深入浅出SpringCloud原理及实战】「Netflix系列之Hystrix」针对于限流熔断组件Hystrix的基本参数和实现原理介绍分析&lt;/a&gt;&lt;/p&gt; 
 
&lt;h1&gt;&lt;a id=&quot;_15&quot;/&gt;[背景介绍]&lt;/h1&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;分布式系统的规模和复杂度不断增加，随着而来的是对分布式系统可用性的要求越来越高。在各种高可用设计模式中，【熔断、隔离、降级、限流】是经常被使用的。而相关的技术，Hystrix本身早已算不上什么新技术，但它却是最经典的技术体系！。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix以实现熔断降级的设计，从而提高了系统的可用性。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix是一个在调用端上，实现断路器模式，以及隔舱模式，通过避免级联故障，提高系统容错能力，从而实现高可用设计的一个Java服务组件库。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Hystrix实现了资源隔离机制&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h1&gt;&lt;a id=&quot;_26&quot;/&gt;[熔断器状态]&lt;/h1&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;closed&lt;/strong&gt;：closed是关闭状态，服务调用方每次请求都到服务提供方；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;open&lt;/strong&gt;：是open打开状态，意思是如果服务提供方的异常率或者是请求的并发量超过设置的阈值之后，就会开启熔断机制，开启熔断机制之后服务调用方所有的请求都不会在请求到服务提供方，而是直接使用本地的服务降级方法；&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;half-open&lt;/strong&gt;：是半打开状态，服务调用方所有的请求依然会请求到服务端，hystrix也有自我恢复机制，意思是当服务提供方的熔断机制处于打开状态时，会在开启一个时间窗口，就是一定时间后或者是下一次请求的时间大于时间窗口的时间，hystrix就会重新将这次请求再次发送到服务提供方，如果成功就将状态改为half-open状态，如果失败就继续处于开启状态，并且重新刷新时间窗口的时间。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h1&gt;&lt;a id=&quot;_34&quot;/&gt;[配置介绍]&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/Configuration&quot;&gt;主要参考:&lt;/a&gt; https://github.com/Netflix/Hystrix/wiki/Configuration&lt;/p&gt; 
&lt;p&gt;上一篇文章&lt;a href=&quot;https://my.oschina.net/liboware/blog/5076608&quot;&gt;🏹【Hystrix技术指南】（1）基本使用和配置说明&lt;/a&gt;主要是介绍一下相关的使用方式、以及相关的一些实战方面的配置，本篇文章会针对于配置进行具体介绍。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;Hystrix4_40&quot;/&gt;Hystrix属性的4中优先级&lt;/h2&gt; 
&lt;ol&gt;&lt;li&gt;内置全局默认值（Global default from code）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;如果下面3种都没有设置，默认是使用此种，后面用“默认值”代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;动态全局默认属性（Dynamic global default property）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;可以通过属性配置来更改全局默认值，后面用“默认属性”代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;内置实例默认值（Instance default from code）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;在代码中，设置的属性值，后面用“实例默认”来代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;动态配置实例属性（Dynamic instance property）&lt;/li&gt;&lt;/ol&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;可以针对特定的实例，动态配置属性值，来代替前面三种，后面用“实例属性”来代指这种。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;优先级：1 &amp;lt; 2 &amp;lt; 3 &amp;lt; 4&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;hystrix.command.default和hystrix.threadpool.default中的default为默认CommandKey&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h1&gt;&lt;a id=&quot;_64&quot;/&gt;[命令属性]&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.strategy&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的隔离策略，有两种选项：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;THREAD — 固定大小线程池中，以单独线程执行，并发请求数受限于线程池大小。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;SEMAPHORE — 在调用线程中执行，通过信号量来限制并发量。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;默认值：THREAD（ExecutionIsolationStrategy.THREAD）&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;可选值：THREAD，SEMAPHORE&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;总结：隔离策略，默认是Thread, 可选Thread｜Semaphore&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.strategy

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.strategy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;


&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;THREAD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ExecutionIsolationStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SEMAPHORE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.timeoutInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：超时会作用在HystrixCommand.queue()，即使调用者没有调用get()去获得Future对象。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;默认值：&lt;strong&gt;命令执行超时时间，默认1000ms&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性: hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionTimeoutInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.timeout.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置HystrixCommand.run()的执行是否有超时限制。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.timeout.enabled

实例属性：hystrix.command.HystrixCommandKey.execution.timeout.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionTimeoutEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.interruptOnTimeout&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的执行是否在超时发生时被中断。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.execution.isolation.thread.interruptOnTimeout

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeout

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationThreadInterruptOnTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.thread.interruptOnCancel&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.run()的执行但取消动作发生时候可以响应中断。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.thread.interruptOnCancel
实例属性：hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancel
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationThreadInterruptOnCancel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;execution.isolation.semaphore.maxConcurrentRequests&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;设置当使用ExecutionIsolationStrategy.SEMAPHORE时，HystrixCommand.run()方法允许的最大请求数。如果达到最大并发数时，后续请求会被拒绝。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;信号量应该是容器（比如Tomcat）线程池一小部分，不能等于或者略小于容器线程池大小，否则起不到保护作用。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests

实例属性：hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withExecutionIsolationSemaphoreMaxConcurrentRequests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_211&quot;/&gt;&lt;strong&gt;回退方法&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;下面的属性控制HystrixCommand.getFallback()执行。这些属性对ExecutionIsolationStrategy.THREAD和ExecutionIsolationStrategy.SEMAPHORE都有效。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;fallback.isolation.semaphore.maxConcurrentRequests&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests

实例属性：hystrix.command.HystrixCommandKey.fallback.isolation.semaphore.maxConcurrentRequests

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withFallbackIsolationSemaphoreMaxConcurrentRequests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;fallback.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.fallback.enabled

实例属性：hystrix.command.HystrixCommandKey.fallback.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withFallbackEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;Circuit_Breaker_258&quot;/&gt;断路器（Circuit Breaker）&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;设置断路器是否起作用，用来跟踪circuit的健康性，如果未达标则让request短路。默认true&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.enabled

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.requestVolumeThreshold&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置在一个滚动窗口中，打开断路器的最少请求数。&lt;/p&gt; 
 
&lt;p&gt;默认值：20&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.requestVolumeThreshold

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.requestVolumeThreshold

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerRequestVolumeThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.sleepWindowInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置在回路被打开，拒绝请求到再次尝试请求并决定回路是否继续打开的时间，触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowInMilliseconds

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerSleepWindowInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.errorThresholdPercentage&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置打开回路并启动回退逻辑的错误比率，错误比率阀值，如果错误率&amp;gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.circuitBreaker.errorThresholdPercentage

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerErrorThresholdPercentage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.forceOpen&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果该属性设置为true，强制断路器进入打开状态，将会拒绝所有的请求，强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认false&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;该属性优先级比circuitBreaker.forceClosed高。&lt;/strong&gt;&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.forceOpen

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceOpen

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerForceOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;circuitBreaker.forceClosed&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;如果该属性设置为true，强制断路器进入关闭状态，将会允许所有的请求，无视错误率，强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;
默认属性：hystrix.command.default.circuitBreaker.forceClosed

实例属性：hystrix.command.HystrixCommandKey.circuitBreaker.forceClosed

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCircuitBreakerForceClosed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_386&quot;/&gt;请求上下文&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestCache.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand.getCacheKey()是否启用，由HystrixRequestCache通过请求缓存提供去重复数据功能。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.requestCache.enabled

实例属性：hystrix.command.HystrixCommandKey.requestCache.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestCacheEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestLog.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置HystrixCommand执行和事件是否要记录日志到HystrixRequestLog。&lt;/p&gt; 
&lt;p&gt;默认值：true&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.command.default.requestLog.enabled

实例属性：hystrix.command.HystrixCommandKey.requestLog.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCommandProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestLogEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a id=&quot;_428&quot;/&gt;压缩器属性&lt;/h3&gt; 
&lt;p&gt;下面的属性可以控制HystrixCollapser行为。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maxRequestsInBatch&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置触发批处理执行之前，在批处理中允许的最大请求数。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.maxRequestsInBatch

实例属性：hystrix.collapser.HystrixCollapserKey.maxRequestsInBatch
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withMaxRequestsInBatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;timerDelayInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置批处理创建到执行之间的毫秒数。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.timerDelayInMilliseconds

实例属性：hystrix.collapser.HystrixCollapserKey.timerDelayInMilliseconds
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withTimerDelayInMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;requestCache.enabled&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置请求缓存是否对HystrixCollapser.execute()和HystrixCollapser.queue()的调用起作用。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.collapser.default.requestCache.enabled

实例属性：hystrix.collapser.HystrixCollapserKey.requestCache.enabled

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixCollapserProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withRequestCacheEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a id=&quot;_489&quot;/&gt;线程池属性&lt;/h2&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;coreSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置核心线程池大小。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;默认值：10&lt;/p&gt; 
  &lt;ul&gt;&lt;li&gt;线程数默认值10适用于大部分情况（有时可以设置得更小），如果需要设置得更大，那有个基本得公式可以follow：&lt;/li&gt;&lt;li&gt;requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.coreSize

实例属性：hystrix.threadpool.HystrixThreadPoolKey.coreSize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withCoreSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maximumSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;1.5.9新增属性，设置线程池最大值。这个是在不开始拒绝HystrixCommand的情况下支持的最大并发数。这个属性起作用的前提是设置了allowMaximumSizeToDrivergeFromCoreSize。1.5.9之前，核心线程池大小和最大线程池大小总是相同的。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;maxQueueSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置BlockingQueue最大的队列值。&lt;/p&gt; 
 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;修改SynchronousQueue和LinkedBlockingQueue需要重启。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;默认值：-1&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.maxQueueSize

实例属性：hystrix.threadpool.HystrixThreadPoolKey.maxQueueSize
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withMaxQueueSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;queueSizeRejectionThreshold&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置队列拒绝的阈值——一个人为设置的拒绝访问的最大队列值，即使maxQueueSize还没有达到。&lt;/p&gt; 
&lt;p&gt;当将一个线程放入队列等待执行时，HystrixCommand使用该属性。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：如果maxQueueSize设置为-1，该属性不可用。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.queueSizeRejectionThreshold

实例属性：hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withQueueSizeRejectionThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;keepAliveTimeMinutes&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置存活时间，单位分钟。如果coreSize小于maximumSize，那么该属性控制一个线程从实用完成到被释放的时间。&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;默认属性：hystrix.threadpool.default.keepAliveTimeMinutes

实例属性：hystrix.threadpool.HystrixThreadPoolKey.keepAliveTimeMinutes

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;实例默认的设置：&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;prism language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HystrixThreadPoolProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Setter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withKeepAliveTimeMinutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;allowMaximumSizeToDivergeFromCoreSize&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;在1.5.9中新增的属性。该属性允许maximumSize起作用。属性值可以等于或者大于coreSize值，设置coreSize小于maximumSize的线程池能够支持maximumSize的并发数，但是会将不活跃的线程返回到系统中去。（详见KeepAliveTimeMinutes）&lt;/p&gt; 
&lt;p&gt;默认值：false&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolKey.allowMaximumSizeToDivergeFromCoreSize&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withAllowMaximumSizeToDivergeFromCoreSize(boolean value)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;metrics.rollingStats.timeInMilliseconds&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;p&gt;默认值：10000（毫秒）&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.metrics.rollingStats.timeInMilliseconds&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolKey.metrics.rollingStats.timeInMilliseconds&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withMetricsRollingStatisticalWindowInMilliseconds(int value)&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;metrics.rollingStats.numBuckets&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置滚动的统计窗口被分成的桶（bucket）的数目。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：”metrics.rollingStats.timeInMilliseconds % metrics.rollingStats.numBuckets == 0&quot;必须为true，否则会抛出异常。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10&lt;/p&gt; 
&lt;p&gt;默认值：10&lt;/p&gt; 
&lt;p&gt;可能的值：任何能被metrics.rollingStats.timeInMilliseconds整除的值。&lt;/p&gt; 
&lt;p&gt;默认属性：hystrix.threadpool.default.metrics.rollingStats.numBuckets&lt;/p&gt; 
&lt;p&gt;实例属性：hystrix.threadpool.HystrixThreadPoolProperties.metrics.rollingStats.numBuckets&lt;/p&gt; 
&lt;p&gt;实例默认的设置：HystrixThreadPoolProperties.Setter()&lt;/p&gt; 
&lt;p&gt;.withMetricsRollingStatisticalWindowBuckets(int value)&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_642&quot;/&gt;其他配置属性&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.enabled：执行时是否enable指标的计算和跟踪，默认true&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds：设置rolling percentile window的时间，默认60000&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.numBuckets：设置rolling percentile window的numberBuckets。逻辑同上。默认6&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.rollingPercentile.bucketSize：如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100&lt;/li&gt;&lt;li&gt;hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms33 Request Context 相关参数&lt;/li&gt;&lt;li&gt;hystrix.command.default.requestCache.enabled 默认true，需要重载getCacheKey()，返回null时不缓存&lt;/li&gt;&lt;li&gt;hystrix.command.default.requestLog.enabled 记录日志到HystrixRequestLog，默认true&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;Collapser_Properties__653&quot;/&gt;Collapser Properties 相关参数&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE&lt;/li&gt;&lt;li&gt;hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10&lt;/li&gt;&lt;li&gt;hystrix.collapser.default.requestCache.enabled 是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true&lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>32f5d2d702287da4111f0be2f6234c59</guid>
<title>看懂这25个核心概念，就没有啃不动的机器学习论文</title>
<link>https://toutiao.io/k/i50okq4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;307&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBKbkrcByicT3CQZnOUkrcialJkL6afI2FKemVWBDm5LPiaMuv06W5983bA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;MLer 寒假也要卷起来。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者 | 李梅&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编辑 | 陈彩娴&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习领域的研究进展迅速，研究者既要及时跟进最新研究，也要不时地回顾经典。寒假开始，各位机器学习er在度假之余，想必也不会忘了自己卷王的身份。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近，Github上出现了一个名为“ML Papers Explained”的优质项目，精选了机器学习领域的一些核心概念，对相关工作的原始论文做了解读，实在是广大MLer的一大福利。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;259&quot; data-backw=&quot;546&quot; data-height=&quot;732&quot; data-ratio=&quot;0.47378640776699027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTB4SWkbXDuWbje0xj3FD6Ryzm6KjtPJxgLXsW4DkvPo5IstT9cwYoicNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1545&quot; data-width=&quot;1545&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;项目地址：https://github.com/dair-ai/ML-Papers-Explained&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;25个必学的ML概念&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;该项目由三位数据 Rastogi、Diego Marinho、Elvis Saravia创建，旨在介绍机器学习领域重点技术的研究论文，既有经典重现，也有最新前沿跟进，突出论文的主要创新点，讨论它们对研究领域的影响及其应用空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;该项目目前集合了25个机器学习概念，涉及计算机视觉、目标检测、文档信息处理、自然语言处理等方向。按类别划分，包括RCNN系列：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;134&quot; data-ratio=&quot;0.7362637362637363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBQA4AGXDuxgOgIWZ53mTyfXia7yVY5K0snc53braOjFia52bS3lS82Z1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;182&quot; data-width=&quot;182&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Transformer系列（Layout Transformers、Document Information Processing、Vision Transformers）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;749&quot; data-ratio=&quot;2.052054794520548&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBfgLCSbqy6KH47QNs9gMb49ZMHnhA3LGtfAhzEPb99n5uaOIBvkb0BQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;365&quot; data-width=&quot;365&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以及Single Stage Object Detectors系列：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-height=&quot;113&quot; data-ratio=&quot;0.3183098591549296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTB5UM8WicWYEicBaJJ5nPxC6Ye7HichZx1OxXucapobicf4WkbGEyFvpzTaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;355&quot; data-width=&quot;355&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击这些关键词，就是一篇论文详解，这些论文解读大都不是长篇累牍，而是简明扼要地介绍论文的核心发现、实验结果，同时有进一步的延伸思考。文章的排版也清晰明了，能够帮助研究者快速且深入理解一篇论文的精髓。这里选取两篇解读来一睹为快。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;论文解读示例&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;TinyBERT解读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在大模型越来越成为AI核心研究方向的当下，回顾这些经典的语言模型论文是大有裨益的。比如自BERT模型出现以后，提高模型参数量的同时降低大模型的计算成本，就一直是该领域的一个热点方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Github上的这个论文解读项目就精选了多篇相关论文，以一篇对知识蒸馏方法TinyBERT的解读为例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;80&quot; data-backw=&quot;546&quot; data-height=&quot;92&quot; data-ratio=&quot;0.14626391096979333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBEMDN7FSSMljZ1SjVAXodY3o5ToWA7OQwsZn0lEKuET6obYNjpewEIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot; data-width=&quot;629&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这项工作由年华中科技大学和华为诺亚方舟实验室合作，在2019年提出。这篇解读概括了TinyBERT这项工作的三个核心贡献：Transformer蒸馏、两步蒸馏过程、数据增强，这些方法改进了基于Transformer的模型在特定情况下的知识蒸馏效果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是Transformer蒸馏。这部分介绍了论文所用蒸馏方法的核心思想和公式，并解释了先前的蒸馏工作DistillBERT的弊端，如它使用教师模型来初始化学生模型的权重，导致两者必须有相同的内部尺寸并允许层数不同，而TinyBERT通过在嵌入和隐藏损失函数中引入可学习的投影矩阵来规避这个问题，从而使得学生和教师模型的内部表示在元素方面可以进行比较。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;571&quot; data-backw=&quot;546&quot; data-height=&quot;668&quot; data-ratio=&quot;1.0453834115805947&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBWWJWtZHN7QlP6G45vLjibRcuY7zMRvicNM3giaKdo2Y7nlv8FAStkDArA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot; data-width=&quot;639&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，解读作者还在这里引用了另一项相关研究，为TinyBERT的进一步工作提出了一个有趣的方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;180&quot; data-backw=&quot;546&quot; data-height=&quot;210&quot; data-ratio=&quot;0.329153605015674&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBxJFbgAtyZ6Ad1V3WKrF5wdTciaAw7fv26hSibJYrA5qFJILef0rTcsgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;638&quot; data-width=&quot;638&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后是两步蒸馏法。这里说明了TinyBERT所使用的蒸馏过程遵循了原始BERT的训练方法——在大规模的通用数据集上进行预训练以获得语言特征，然后针对特定任务数据进行微调。所以在第一个步骤中，使用在通用数据上训练的通用BERT作为教师，学生学习模仿教师的嵌入和转换层激活来创建一个通用的TinyBERT；在第二个步骤中，将教师模型切换到特定任务模型并继续训练学生模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;355&quot; data-backw=&quot;546&quot; data-height=&quot;416&quot; data-ratio=&quot;0.651017214397496&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBibiagfQy5vjrrs2Rny6YKKOhwicicgiac1CJmnVUwh0enU6pkRZYduibFb1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot; data-width=&quot;639&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三个是数据增强。这部分介绍了论文作者使用了数据增强技术来在微调步骤中对特定任务的数据集进行扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;418&quot; data-backw=&quot;546&quot; data-height=&quot;482&quot; data-ratio=&quot;0.765079365079365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBgWTwNDzPVJrryicWxicSJ54y4h5GJ398tBcZlnVb36SibHUaFoE0DI49A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;630&quot; data-width=&quot;630&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之后文章精简地呈现了原始论文中TInyBERT的关键数据，如该模型的性能在基准测试中达到了BERT基础教师模型的96%，同时体积缩小了7.5倍，速度提高了9.4倍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;377&quot; data-backw=&quot;546&quot; data-height=&quot;437&quot; data-ratio=&quot;0.6903633491311216&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBPLnxwVYFE2p2xRew3zhiaqd8sMQZNNpzibE3PIOSCt6bOGicJYGAeZbicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;633&quot; data-width=&quot;633&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对原始论文的三个核心贡献，文章还给出了一些有价值的思考，如特定任务的蒸馏（微调）比通用蒸馏（预训练）更重要等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;215&quot; data-backw=&quot;546&quot; data-height=&quot;251&quot; data-ratio=&quot;0.3934169278996865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBl1V3MGHa8EoTBFKLxl9ESE36BdCx74HIkSyO1iaNbAicibw2w2C4YXZPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;638&quot; data-width=&quot;638&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Swin Transformer解读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再比如当年屠榜各大视觉任务的Swin Transformer，由微软亚洲研究院郭百宁团队提出，是视觉领域的研究者必读的一篇论文，这项工作也在这个论文解读项目有精彩的分享：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;100&quot; data-backw=&quot;546&quot; data-height=&quot;131&quot; data-ratio=&quot;0.18347338935574228&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBwlkiaAlDB3SWmPDhxEVdY9Kg9icId0r2fLFteRia1ddbdEf4cVMBe7l2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot; data-width=&quot;714&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文章首先以原始论文中的关键图表，简要介绍了Swin Transformer的基本方法及其核心设计元素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;287&quot; data-backw=&quot;546&quot; data-height=&quot;463&quot; data-ratio=&quot;0.5261363636363636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBbjQJttetTpncUia3oh08IIdyLriconvfGSIP85ChJuzRBmjyrsCicxVrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot; data-width=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后逻辑清晰地详解了Swin Transformer的架构细节，包括4个stage和Swin Transformer Block&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;316&quot; data-backw=&quot;546&quot; data-height=&quot;506&quot; data-ratio=&quot;0.5789473684210527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBxBHIP23kSK1oC0WEcrs529e9M4qjBeGUyyhULgaAicsEFnqrg20Q0DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;874&quot; data-width=&quot;874&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着列出了Swin Transformer的几项实验：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;179&quot; data-backw=&quot;467&quot; data-height=&quot;180&quot; data-ratio=&quot;0.3837953091684435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtBpt58HyDPVCxtPDaSnlTBLCwcOPuzgRbysRTuNeHbHd3ASPdorzKTyw56xk7FSU2Jyu6H6FuO5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;469&quot; data-width=&quot;469&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有兴趣的读者可以自行前往该项目探索一番，如果想分享自己的论文解读，也可以向该项目提交PR。据项目作者透露，后续还将推出notebook和讲座，帮助大家更好地跟进研究进展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16586556006231=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16586556006231=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16586556006231=&quot;rgb(157, 157, 157)&quot; data-darkmode-original-color-16586556006231=&quot;#fff|rgb(73, 73, 73)&quot;&gt;&lt;strong data-darkmode-bgcolor-16586556006231=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16586556006231=&quot;#fff|rgb(255, 255, 255)|rgb(255, 255, 255)&quot; data-darkmode-color-16586556006231=&quot;rgb(255, 76, 0)&quot; data-darkmode-original-color-16586556006231=&quot;#fff|rgb(73, 73, 73)|rgb(255, 76, 0)&quot; data-style=&quot;margin: 0px; padding: 0px; outline: 0px; max-width: 100%; font-family: system-ui, -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 17px; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); color: rgb(255, 76, 0); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;&lt;span data-darkmode-bgcolor-16586556006231=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16586556006231=&quot;#fff|rgb(255, 255, 255)|rgb(255, 255, 255)&quot; data-darkmode-color-16586556006231=&quot;rgb(255, 76, 0)&quot; data-darkmode-original-color-16586556006231=&quot;#fff|rgb(73, 73, 73)|rgb(255, 76, 0)|rgb(255, 76, 0)&quot;&gt;更多内容&lt;/span&gt;&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16586556006231=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16586556006231=&quot;#fff|rgb(255, 255, 255)|rgb(255, 255, 255)&quot; data-darkmode-color-16586556006231=&quot;rgb(255, 76, 0)&quot; data-darkmode-original-color-16586556006231=&quot;#fff|rgb(73, 73, 73)|rgb(255, 76, 0)&quot; data-style=&quot;margin: 0px; padding: 0px; outline: 0px; max-width: 100%; font-family: system-ui, -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 17px; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); color: rgb(255, 76, 0); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot;&gt;&lt;span data-darkmode-bgcolor-16586556006231=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16586556006231=&quot;#fff|rgb(255, 255, 255)|rgb(255, 255, 255)&quot; data-darkmode-color-16586556006231=&quot;rgb(255, 76, 0)&quot; data-darkmode-original-color-16586556006231=&quot;#fff|rgb(73, 73, 73)|rgb(255, 76, 0)|rgb(255, 76, 0)&quot;&gt;，点击下方关注：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5ODEzMjIyMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/cNFA8C0uVPtXjwicoibpia0GEwTzHaE7VLcdMvxiaV27Es9lt6u2zZK5AsxwENshw3fU66UL2Hpf7eLneF1X86nGTA/0?wx_fmt=png&quot; data-nickname=&quot;AI科技评论&quot; data-alias=&quot;aitechtalk&quot; data-signature=&quot;聚焦AI前沿研究，关注AI青年成长&quot; data-from=&quot;2&quot; data-index=&quot;0&quot; data-origin_num=&quot;2137&quot; data-isban=&quot;0&quot; data-weuitheme=&quot;light&quot; data-weui-theme=&quot;light&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;234&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;234&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.42857142857142855&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cNFA8C0uVPvfRWTsmyhhPlIqhibx1eNmrTncouRia4QwrSuNlnQfYBibiaLAEuTUtmZRibTENX8RgOhGH5NTj0XxgHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-darkmode-bgcolor-16235547691655=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16235547691655=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16235547691655=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16235547691655=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-style=&quot;margin-bottom: 0.5em; font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; background-color: rgb(255, 255, 255); color: rgba(0, 0, 0, 0.85); text-align: left;&quot; class=&quot;js_darkmode__37&quot; data-darkmode-bgcolor-16259760301582=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16259760301582=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16259760301582=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16259760301582=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16264034008691=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16264034008691=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16264034008691=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16264034008691=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16283960807539=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16283960807539=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16283960807539=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16283960807539=&quot;#fff|rgba(0, 0, 0, 0.85)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-darkmode-bgcolor-16235547691655=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16235547691655=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16235547691655=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16235547691655=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16259760301582=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16259760301582=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16259760301582=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16259760301582=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16264034008691=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16264034008691=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16264034008691=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16264034008691=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16283960807539=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16283960807539=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16283960807539=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16283960807539=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-darkmode-bgcolor-16235547691655=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16235547691655=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16235547691655=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16235547691655=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-style=&quot;padding: 3px; border-width: 3px; border-style: solid; border-color: black;&quot; class=&quot;js_darkmode__38&quot; data-darkmode-bgcolor-16259760301582=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16259760301582=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16259760301582=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16259760301582=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16264034008691=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16264034008691=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16264034008691=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16264034008691=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16283960807539=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16283960807539=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16283960807539=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16283960807539=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-darkmode-bgcolor-16235547691655=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16235547691655=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16235547691655=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16235547691655=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16259760301582=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16259760301582=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16259760301582=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16259760301582=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16264034008691=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16264034008691=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16264034008691=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16264034008691=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16283960807539=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16283960807539=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16283960807539=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16283960807539=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; data-darkmode-bgcolor-16235547691655=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16235547691655=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16235547691655=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16235547691655=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16259760301582=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16259760301582=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16259760301582=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16259760301582=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16264034008691=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16264034008691=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16264034008691=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16264034008691=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; data-darkmode-bgcolor-16283960807539=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16283960807539=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16283960807539=&quot;rgba(163, 163, 163, 0.85)&quot; data-darkmode-original-color-16283960807539=&quot;#fff|rgba(0, 0, 0, 0.85)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;未经「AI科技评论」授权，严禁以任何方式在网页、论坛、社区进行转载！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;公众号转载请先在「AI科技评论」后台留言取得授权，转载时需标注来源并插入本公众号名片。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a9bdc704ffadff30d29ae5cac977ae1e</guid>
<title>怎样实现 T+0 的实时报表？</title>
<link>https://toutiao.io/k/ia28ukl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;T+0 的概念，运用比较广泛的是在金融领域，T（Transaction）表示交易日期，+0 就是指交易当天，+N 就代表交易的 N 天后&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在大数据、数据分析领域，也总用到这个概念，含义仍然相同，T+0 表示当天的实时数据，T+N 则表示当天的数据 N 天后才能看到&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;放到报表中 T+0 就是今天的报表就可以看到今天实时的数据，T+1 就是今天的数据，明天才能看到&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;T+0 报表的难点在哪里&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果所有数据都存在一个数据库中，那 T+0 报表其实没什么难度，直接查就是最新的实时数据&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但实际应用中，很多场景下，数据是会分开存储的，比如下图这样，由于历史数据过于庞大，为了保证业务库的性能不受影响，就只能把老的历史数据迁移到别的库去存储，这时候，如果报表需要同时分析历史数据和当前最新数据做 T+0 报表，就需要从不同的分库中同时取数，而且历史库和业务库很多时候又不是一个类型，&lt;strong&gt;怎么跨库查询取数就成了一难题&lt;/strong&gt;，&lt;strong&gt;这也正是 T+0 报表的难点所在&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果解决不了这个难题，那就只能用 ETL 等方式，定时把冷热库的数据抽取到一起，然后再出报表，那就是 T+1 甚至严重到会 T+7 了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5740072202166066&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6Xq5egmvbeFJFPT3ibJ2icfsByXhjyOqqp1R7hVHiaqgCrSSuH0dMt6dIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;目前有什么手段&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;报表本身的多数据集&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;好一些的报表工具，其实提供了一个初级的解决方案，就是报表本身的多数据集功能，它可以直接进行跨库查询，获取最新数据，做出 T+0 报表，比如下面这样的&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2581227436823105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH695De5gya38rjDYhAp8FmOicIX4H5km9Krky5gwN5tD8aiaVgQbPyF4yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15162454873646208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6w2Q2DbLg8nWoBVl8ibN1zFs8ovFZk68lwQhqichw655icFdeNQY7kDkKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是报表工具计算能力有限，只能做一些初级简单的，比如上面的分组汇总，两个数据集的分组情况如果相同，或者第一个数据集包含第二个的，那可以这样做，否则分组就会错乱，就不好做了，就得用自定义数据集提前把数据合并好了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有一些其他复杂的计算单凭报表的计算能力也无法实现，也得用定义数据集算&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外分库的数据一般数据量非常大，全部把计算放到报表内，在性能上也不一定能保证，不是很适用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以报表工具的多源混算在简单场景下可以做出 T+0 报表，复杂情况下不能胜任，是比较初级的功能&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;数据库的跨库查询&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;数据库本身也有跨库查询的功能，比如 Oracle 的 DBLink，MySQL 的 FEDERATED 引擎，都可以进行跨库查询，也可以做到 T+0 查询，再把数据给到报表，就能做出 T+0 报表，但是这些功能都对异构数据支持的不是很好，对非关系型数据源更是无能为力，适用的场景也比较窄&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;JAVA 编码&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;这是工程师的杀手锏，没有好办法，那就敲代码呗，没有什么是代码搞不定的，一个跨库取数难不倒 JAVA, 不管你是同构异构还是非关系数据库，各种情况都能搞定&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但话又说回来，但凡有更简单的办法，谁愿意做个查询取数还得用 JAVA 实现呢&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 写起来难，算起来慢&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 这类高级语言，对结构化数据的计算支持很有限，虽然都能做，但却能力比较弱，写起来非常繁琐，简单做个求和运算都需要写数行代码的循环来实现，而报表数据源处理则大量涉及批量数据运算，采用高级语言开发时会导致动辄数百行的冗长代码，编写、调试和后续维护都会很困难，而且性能也无法保证，高手懂算法，写出来的就算的快一些，普通人写的可能就会出现性能问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 还破坏应用架构&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JAVA 代码需要和应用程序一起编译、打包，造成和应用的高度耦合，给后续维护带来困难&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每次修改，都得重新编译，就需要整个应用陪着重启甚至停机，影响应用稳定&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以 JAVA 虽然什么都可以搞定，能力很强，但却也不是一个很好的选择&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;更好的方法&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看过各种手段的不足后，我们也就明了了，更好的方案，需要它支持跨库运算，支持同构异构数据，支持各类不同数据源，支持大数据量，书写简单，性能好，不会破坏应用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有这样的方案吗？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;润乾报表&lt;/strong&gt;集成&lt;strong&gt;SPL 集算器&lt;/strong&gt;以后就具备了这样的能力&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4657039711191336&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH66N5oIBwya1dRSQ2ktCluVRJtDfHrRicw7Y6OdRtiaW9tnlkRGtVJhf6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;SPL&lt;/strong&gt; 是一款流行的专业的数据计算处理工具，很多项目开发商都在用，因为它不仅好用，&lt;strong&gt;而且还免费，开源&lt;/strong&gt;，是常年做项目，总需要做数据处理的工程师的好帮手&lt;/span&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;SPL 支持各类数据源&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;集成 SPL 后，润乾报表相当于多了一个计算层，这个计算层支持常见的各类数据源，可以同时计算来自不同数据源的数据，不管它是同构还是异构，不管你怎么分库，分到哪里，都能做到 T+0&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5613718411552346&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1cfKfMXXPyUoxe92nHiaBTpH6GcrLMfHDThnicfr9pdroqhH8R0MKpGJOuSdxJco9q4ZxtydvNibDAx2w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;554&quot;/&gt;&lt;/section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;A&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=cold=db1.cursor(“select * from orders where odate&amp;lt;?”,date(now()))&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;/ 冷数据从历史库中取，昨天及以前的数据&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=hot=db2.cursor(“select * from orders where odate&amp;gt;=?”,date(now()))&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;/ 热数据从生产库中取，今天的数据&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=[cold,hot].conjx()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A3.groups(area,customer;sum(amout):amout)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;开发简单，性能好&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;SPL 不仅可以像上面的代码一样，简单写出跨库的取数查询，比 JAVA 简单的多，它还比 SQL 写起来简单&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看个小例：&lt;strong&gt;查出各科成绩都在前 10 名的学生&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用 SQL 写起来，比较复杂，也很难理解&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from (&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;code-snippet__keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; subject &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; score &lt;span class=&quot;code-snippet__keyword&quot;&gt;DESC&lt;/span&gt;) ranking&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; score_table)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; ranking&amp;lt;=&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(*)=(&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;distinct&lt;/span&gt; subject) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; score_table)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;用 SPL，则按思路过程写出计算就行，写起来简单，还容易理解，性能也比 SQL 要更好，而且在 SPL 中， 这样的高性能函数和算法还有很多，谁都可以直接用，不需要非得高手才能写出性能好的算法了&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;A&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=score_table.group(subject)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A1.(~.rank(score).pselect@a(~&amp;lt;=10))&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;=A1.(~(A2(#)).(name)).isect()&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;说到性能，还要提到开源 SPL 有自己的存储，它提供了&lt;strong&gt;高效的二进制文件存储方式&lt;/strong&gt;，文件存储具备很多优势，不仅读取效率更高，还可以有效利用文件压缩、并行等机制提速，同时还不会像数据库那样容易受到容量的限制，在一些传统的历史库无法保证计算性能和时效的情况下，甚至可以用 SPL 的二进制文件存储当做历史库来提升性能了&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;低耦合热切换&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;SPL 作为润乾报表的计算层，它编写的计算脚本是存储在报表模板里的，是解释执行的，这就避免了和应用的耦合&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;解释执行的 SPL 同时也具备了热切换的能力，不会像 JAVA 一样影响应用的稳定了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大数据时代，数据的分库存储很常见，T+0 实时报表的需求更常见，用常规的手段来做，简单的、少量的情况还能应付，复杂，大量的时候，就需要用更好更新的技术了，润乾的 SPL 计算层，不仅可以轻松应对各类跨库实时查询，而且在开发效率和性能上也比常规手段更简单高效的多，它还开源免费，并不需要在报表以外再多加成本，另外润乾报表本身价格也很亲民，&lt;strong&gt;1W 一套，3W 一年随便用&lt;/strong&gt;，一套润乾，就把报表需求和各类数据准备的外围难题都解决了&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;感兴趣的小伙伴，请识别右侧二维码与我们联系&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;微信号｜RUNQIAN_RAQSOFT&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/3dBJseibic1ccQ5icibsj5In3tQSrniaticue8OGWvoBqBSJhBibeicuGu5Nrt33yiccCtKGodgGziaQad8gHyZlG2e6ibGRA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9846a65159a7c7a178a3f47e98ac8d7c</guid>
<title>7天DAU超亿级，《羊了个羊》技术架构升级实战</title>
<link>https://toutiao.io/k/526ntt6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10084033613445378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/VY8SELNGe95czZhnamWia6rvd1aenicicPiasMmUOHHu1wyeNicNJsWGa4syzF2PoOAePZEYtZX8jicbEDRPW3KsUlOw/640?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; data-w=&quot;1071&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;导语 | &lt;span&gt;在短短的7天内，羊了个羊小游戏的DAU突破了1亿。然而，其最初&lt;span&gt;技术架构仅支撑5000QPS并发，无论技术、人力、资源以及服务都难以应对。用户涌入、数据飙升，给原有的技术架构、运维体系、以及安全防范等技术体系都带来了巨大的挑战。&lt;span&gt;如何通过架构优化，让一款小程序游戏可以在短时间内实现对上亿DAU的支持？本文将从技术角度解读这背后的技术实践历程，希望为正在从事小游戏开发的技术同行带来一些参考。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.3636363636363635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/wprMnqDUJH6cGyaKFfNz8LBPUNI4OiaTm1xFeAQicqx4HvD995taYCVicLg8FibpERuzj3wz9MD4wcwMoks6RibdXKm1ibH4MT3Sn9/640?wx_fmt=svg&quot; data-w=&quot;11&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;1 背&lt;/span&gt;&lt;span&gt;景&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2 架构全面升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 插件集成&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;    3.1 一崩再崩，自动扩容为何不灵？&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;    3.2 运维能力不足，如何快速补齐？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;    3.3 BOT刷排行，如何保持游戏公平？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;小游戏设计的“三高”原则&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.3636363636363635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/UOlZKghBxaaFDCr9CbkR03IAZNGptnic2SGuu0JicCvYuVswicMoNLqwKSicE8zkJiaIOK8ianbJKHTAMYvxK9pcHPNKmOc2LpbneC/640?wx_fmt=svg&quot; data-w=&quot;11&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FiaZYIGick0nWJJXC1lSLI8zy2asbcicfNgvgJXexvB9rOnicPxbKFdEibPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;谁也没有想到，去年9月，一款卡通背景消除闯关游戏《羊了个羊》全网迅速刷屏。&lt;/span&gt;&lt;span&gt;但凡一个拿着手机目不转睛的人，九成概率都在忙着通关，还有大批的人，因为不能通关而通宵达旦，夜不能寐。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台数据显示，在短短的7天内，这款小游戏的DAU就突破了1亿。要知道，除了王者荣耀、原神等屈指可数的现象级手游之外，1亿DAU是这个行业的喜马拉雅山，可是，它却被一个看上去设计粗糙的小程序游戏轻松实现了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户涌入、数据飙升，实际上给原有的技术架构、运维体系、以及安全防范等技术体系都带来了巨大的挑战，这个创业团队一共只有几个人，最初的技术架构仅支撑5000QPS并发，因此，无论技术、人力、资源以及服务都越来越难以应对。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;如何通过架构优化，让一款小程序游戏可以在短时间内实现对上亿DAU的支持？&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;本文将从技术角度解读这背后的技术实践历程，希望为正在从事小游戏开发的技术同行一些参考。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9F812pnpTVKsrLmlcKHlIuuBvuwqeIqmOLOsD9nTpkow7FlAh45LKRLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构全面升级&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;一款小游戏能不能成功，不仅和本身的通关设计有着巨大的关系，而且还和上量之后，系统能否持续稳定也密切相关。&lt;/span&gt;&lt;span&gt;《羊了个羊》这款小游戏在爆火之后的前几天，曾经在技术架构面临严峻考验，这对一款正在用户量快速爬坡的小游戏来说，可以说是致命的挑战，如果不能快速解决，将会大幅降低玩家的游戏体验，从而快速被用户抛弃。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》在最开始也遇到了这样的问题，就是一瞬间，涌入海量用户，速度之快，人数之多，超过了所有人的预期。就像一条双向两车道，车流量不大的情况下，还能正常行驶，可一旦来了成千上万辆车，交通的效率肯定大打折扣，甚至堵死。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在回过头看，最开始的技术架构因为技术以及时间等因素，在设计上有些简单，如下图1所示，玩家流量通过一个LB进入，传输给几个POD进行游戏逻辑处理， 再将数据进行存储，其中，热数据存储在Redis中, 持久化数据存在MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;由于设计时，对如此大流量缺乏充分考虑，实际上也没有料想到会有这么大的流量，而且&lt;/span&gt;&lt;span&gt;&lt;strong&gt;单点服务的性能瓶颈，再加上代码未进行充分优化，造成当时的系统最高只能承受5000的QPS&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，但实际流量增长很快， 并且持续升高并到达性能瓶颈，游戏服务开始瘫痪，全部玩家无法再进行游戏。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;1.602661596958175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0KmrY7drg3FMEKqBlWfF3W7Mr9RVx2gSNh22CO19XoCViaoibVh6ZOnqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;526&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》最开始技术架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对服务中断， 《羊了个羊》和腾讯云服务团队在详细分析原来架构的不足之后，决定从三个方面，针对原有架构做重点优化：在计算扩容层，依靠腾讯云云原生产品为原有技术架构升级，实现服务高可用；为快速补齐运维能力，通过业务日志诊断程序性能，配合业务调优以减少服务器压力；最后在安全防范领域，通过安全方案抵抗异常流量攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;0.8524426719840479&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0xN2I5lDwb75X5Yibf8KTpESztbbBXI67Wp3PAPpvJt0g6qvBntHN3OA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1003&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《羊了个羊》最新技术架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体措施上，首先通过引入腾讯云TKE Serverless 的弹性机制， 实现游戏服自动纵向和横向扩展，实现服务解藕，增加容错和熔断机制；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，通过腾讯云开箱即用的日志服务 CLS，对游戏接口稳定性/异常调用趋势进行监控，帮助用户快速观测产品质量 ，并第一时间获取到异常panic统计分析和告警 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，还要针对许多恶意BOT流量大量涌入到游戏中，导致游戏服务器 QPS、带宽快速升高，影响服务可用性等情况，引入WAF+高防包， 抵御外部异常流量攻击。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在此之外，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;双方产研团队还通过启用CDN做游戏动静态资源分离，让玩家使用的游戏资源实现就近下载，减轻网络端压力&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;；设计多LB入口实现入口高可用和限流，避免系统被超额流量过载；把MongoDB转换为读写分离模式，配合代码逻辑优化实现性能提升，引入分库实现业务分层与隔离，Redis缓存热数据，分担数据库查询压力等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过上述一系列技术升级， 新架构经受住了一波又一波的流量峰值考验，甚至在高峰期DAU过亿后，游戏技术系统依旧表现稳定，这对于一个发布才几个月的小游戏来说，在国内也很难再找到这样的例子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9Fl62j5eylelCcZwNOEv5HRg9xicSj2KIwvdQMPbwiau3eqyIUpKbjQ6nA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术实战：扩容、运维、安全&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;下面我们将从&lt;/span&gt;&lt;span&gt;&lt;strong&gt;扩容、运维、以及安全三大核心环节&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;入手，详细介绍在具体实操过程中，双方是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;如何应对流量的爆发挑战&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 &lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;一崩再崩，自动扩容为何不灵？&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在展开之前，先说下这次起到至关重要的一款产品----TKE Serverless ，它是基于腾讯云 TKE 容器服务孵化出来的一种全新的无需管理服务器形态的 Kubernetes 容器服务平台，最核心的利器是拥有一个全新的集群节点管理模式，称之为超级节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上云的开发者都知道虚拟机，超级节点就类似于一台超大规格的 CVM 虚拟机，它是基于 Serverless 容器技术，模拟 Serverful 有节点管理体验的新形态容器集群节点。如果用户需要进行固定资源的扩缩容，仅需要对这台“超大规格的 CVM”进行升降配，简单点击几个鼠标，就可以配置完成，资源管理变得极为简单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上，《羊了个羊》在6月上线初期就采用了 TKE Serverless 的云原生方式部署游戏系统，希望借助产品的免运维及快速扩缩容能力，支撑未来玩家的规模增长，但在9月上旬，《羊了个羊》突然一夜爆火，玩家规模急剧上升，游戏系统开始出现不稳定的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过梳理发现，因为初始配置的容器规格比较低，副本数也相对较少，当初始玩家规模不断上涨时，《羊了个羊》团队根据 TKE 控制台的监控/告警能力，发现容器的 CPU/内存等各项指标都达到了最大值，运维同学当时随即做出调整，游戏服务的各项指标稳定了下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但随着玩家规模继续上涨达到千万级别时，游戏又开始出现了偶发的不稳定问题，表现为内存指标快速增加直到打满整个容器，且流量还在不断增长中。腾讯云团队紧急联合《羊了个羊》产研团队分析应用的瓶颈，快速解决了如服务内存泄露、服务分级缓存策略、云产品配额限制等多个问题，这才让游戏服务逐渐稳定了下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;由于《羊了个羊》技术团队配置了基于 CPU 指标的容器 HPA 动态扩缩容策略，在游戏日活持续陡增的情况下，系统能够在秒级自动扩容了近万核容器资源。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;在此期间，也无需投入人力运维 Kubernetes 集群以及担心资源不足等问题，从而可以把精力都投入到游戏玩法优化上来。在随后的两周时间，尽管玩家规模增长到几百倍以上，最终达到了上亿的日活，这套服务依旧保持稳定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 运维能力不足，如何快速补齐？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过技术架构的迭代以及不断激增的用户，《羊了个羊》技术团队也认识到，因为爆火太快，更需要快速补齐运维能力，才能更好的持续调整和提升游戏体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此，《羊了个羊》选择了开箱即用的日志服务 CLS，CLS 对游戏接口稳定性、异常调用趋势的监控可帮助他们快速观测产品质量 ，并第一时间获取到异常panic统计分析和告警 ；在游戏运营方面，玩家登录链路耗时/对局时间等数据亦可通过 CLS 分析、校验及处理，进而调整和提升游戏体验；同时还能满足游戏用户行为及审计对账等需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TKE Serverless在提供充足的计算资源后，可以使用CLS的云原生特性实现稳定性和程序调优。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;用户研发人员仅需在容器控制台点击新建日志采集按钮即可完成数据接入，无需在运维上投入人力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;借助云原生的能力和CLS的SQL分析、仪表盘、监控告警能力，分析出程序可优化点, 解决游戏开发商在初期和爆发期对游戏稳定性和运营数据分析的难题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了运维数据外，用户还将部分运营数据接入CLS。在游戏调整玩法、分析活动数据时，运营人员可借助CLS快速观测数据变化，并作出应对策略。游戏开发商在将CLS用作简单运维工具查日志、做接口调用告警外的同时，还将游戏的通关数据、用户行为分析、审计对账等运营数据在CLS中存储分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lines=&quot;1&quot; data-sign=&quot;187f729f1aabcd483fd11b8e9e1d3409&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.3&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;恶意BOT抢刷排行，如何保持游戏公平？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪里有流量，哪里就有黑产。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于设计之初没有充分考虑安全问题，因此引来大量不法分子通过恶意BOT抢刷游戏排行，几乎每分每秒，都有恶意流量访问游戏接口，并且这一部分恶意群体通过互联网、QQ群和微信群中传播恶意刷排行的脚本，极大的破坏了游戏公平性，让本该属于游戏对抗的乐趣被恶意BOT抹杀。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且更重要的是随着羊了个羊热度的不但攀升，许多恶意BOT流量的大量涌入，导致游戏服务器 QPS、带宽快速升高，一度影响服务可用性。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;经过双方产研团队合作，决定快速接入腾讯云WAF进行防护，一开始接入WAF的时候，相关 QPS 峰值已达 21W，接入WAF之前CPU一直处于临界值水位 、网络链接打满的导致服务不可用的情况。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_img_placeholder&quot; data-ratio=&quot;0.45966850828729283&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9SmqmVtF4jdN5mtEHv9XRkCnBrOmXcp0zrOV28ibDCFqxcjtHfAZ5pIzCrQgD9ff3TqcxlsDdLChiat2qglcFcIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;905&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过选择负载均衡型WAF即可在不改动网络架构的情况下3秒完成业务接入，实现在用户无感的情况下对恶意流量进行清洗及防护。为了有效打击攻击者的恶意流量， WAF 中 BOT 行为管理也提供了全链路、全生命周期的的恶意行为流量体系，实现快速高效的恶意流量治理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.08148148148148149&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/VY8SELNGe94QeANounecCYXmibLibjDT9FPB6mZB01WGXHsGUE2UYENHAJNeKa8y0qwiajZdfHR5lvk4rjnrQabwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小游戏设计的“三高”原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;通过腾讯云这次完整支持《羊了个羊》团队在小游戏架构扩容、系统运维以及安全防范领域的实战经验，我们也得到了一些启发，希望给同行一些参考。比如面对突发流量，小游戏系统在设计的过程中需要考虑以下能力：第一是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，能够承载瞬时爆发流量，保证响应时长在可接受的范围；其次是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高可用&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，系统持续提供服务，小概率发生宕机时，过载保护将故障控制在可承受范围内，不影响核心业务；最后是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高扩展&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，服务系统应该具备水平和垂直扩展能力，在成本和可用性中实现最佳平衡点。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我们也看到，目前在国内甚至国际上，小游戏发行商还是以中小型游戏公司为主，公司大都处于早期创业或融资阶段，对云产品不熟悉、技术能力参差不齐，在算力资源、技术架构、业务逻辑、运维经验方面缺乏成熟的经验，这些都是小游戏公司早期非常典型的困境。通过腾讯云和《羊了个羊》产研团队的这次密切合作，不仅让腾讯云在服务类似客户上积累了宝贵的经验，也为未来的发展指明了清晰的目标，就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;针对不同赛道搭建标准化架构，为游戏公司的业务保驾护航&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上期文章的开发者读者们太热情啦&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;😻小云继续给各位加赠福利😻&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫码下图一键领红包封面&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;如被领取完 请&lt;/span&gt;&lt;/span&gt;&lt;span&gt;关&lt;/span&gt;&lt;span&gt;注&lt;/span&gt;&lt;span&gt;开发者&lt;/span&gt;&lt;span&gt;公众&lt;/span&gt;&lt;span&gt;号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在后台回复【2023】继续领取&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.5868263473053892&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe963blWxQqSA3pbGLCwleGUrYicQnxXGtVpGbGuLiaBx6icBP4c9x6kZJiazaSNyKQOQoVOrdDric6iaiaSpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你可能感兴趣的腾讯工程师作品&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-w=&quot;24&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/M6IC6IoU4PwMicRZB4dKAVUhfw1GR9CJvqeqIWic50hQeGiaVgjY4oK8BXrMNsMra2MQ3f4LAlLKT6ibW9GdTvibUtg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sPQicVg8nzU0ceHDyC83Jm2vibsTbUia3blLRW1z0KUrw4OIV2eOibRmEWfWJYVXuyN6TOno2sLg9ZU7meG4uAY2jg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;24&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247571906&amp;amp;idx=1&amp;amp;sn=4da401e74d5bae42b47fe9f17df31f1e&amp;amp;chksm=eaa9c392ddde4a84eaad051015f0af1bb2832eb35174d982aae1f5a0d5ef4f7371a2e8ebe0e2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你的2022年度开发者关键词，请查收&amp;gt;&amp;gt;&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;你的2022年度开发者关键词，请查收&amp;gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;| &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247571091&amp;amp;idx=1&amp;amp;sn=59f966d59925222d3a535266bb3a59a5&amp;amp;chksm=eaa9ccc3ddde45d5a71e3d1b92661b88c02ae36fdd07c1cf7070a305c83eb946793cbef1d8f1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;React语境下前端DDD的长年探索经验&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;React语境下前端DDD的长年探索经验&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247570676&amp;amp;idx=1&amp;amp;sn=dbdef6eff7fee16efa6373f5caebfd36&amp;amp;chksm=eaa9cea4ddde47b25e60e32b5faeb0662481dd49a32f1a5f3fe8650da9264a54842a4e356318&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;国民级应用：微信是如何防止崩溃的？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;国民级应用：微信是如何防止崩溃的？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247570454&amp;amp;idx=2&amp;amp;sn=fe5976e862b193d03de576d0761553d9&amp;amp;chksm=eaa9ce46ddde475058a75c8830ca36d8f233758168e7ac42a7e636b307b7b46a1825599cd1be&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从Linux零拷贝深入了解Linux-I/O&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从Linux零拷贝深入了解Linux-I/O&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术盲盒：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568617&amp;amp;idx=1&amp;amp;sn=d3409583764c4877964765a6b774b1de&amp;amp;chksm=eaa9d6b9ddde5faff511c416033948f76b056b209df76c6eb12adfea3f618422297b9b11895b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt;｜&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568512&amp;amp;idx=1&amp;amp;sn=5a2e887c0ac511e9a4fe5cd68a388e48&amp;amp;chksm=eaa9d6d0ddde5fc6376f1ffcc6e7b050fefded23d5b24c5f7b801885f509df06cd53d99f0a45&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;后端&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568656&amp;amp;idx=1&amp;amp;sn=98f7033418fc1fd7d019eeb18008b616&amp;amp;chksm=eaa9d740ddde5e56aa0b7df55dc2f70c65f329d37246453c2b3316356f3f84cc9f87eb6b8db4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;AI与算法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;AI与算法&lt;/a&gt;&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568672&amp;amp;idx=1&amp;amp;sn=85e4b3e1c46289058398b216edb40941&amp;amp;chksm=eaa9d770ddde5e669cfaa25c37887ae058c433e4296ca04f8ff5373184bc76d4420f1d2049a7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运维｜&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;运维&lt;strong&gt;&lt;span&gt;｜&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDU4OTExOQ==&amp;amp;mid=2247568677&amp;amp;idx=1&amp;amp;sn=e95255553777c53d38cb1e64c1c16432&amp;amp;chksm=eaa9d775ddde5e633a75d20eb484181c0e03cb6f8237a4141c599e4f13ad3af6748c5e8d1a9a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师文化&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;工程师文化&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable js_wx_tap_highlight&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;MzI2NDU4OTExOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe97ibOIthe2pvwt1H0HqX0HVJVFK9WPNQKNsibXynR5yT5S7b45uIpzN7xeZdeJIfOibPjOflZ35rKZyw/0?wx_fmt=png&quot; data-nickname=&quot;腾讯云开发者&quot; data-alias=&quot;QcloudCommunity&quot; data-signature=&quot;腾讯云官方社区公众号，汇聚技术开发者群体，分享技术干货，打造技术影响力交流社区。&quot; data-from=&quot;2&quot; data-is_biz_ban=&quot;0&quot; data-index=&quot;0&quot; data-origin_num=&quot;664&quot; data-isban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;🔹&lt;/span&gt;关注我并点亮星标🔹&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;工作日晚8点 &lt;/span&gt;看腾讯技术、学专家经验&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94245&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;点赞|分享|在看 传递好技术&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3428571428571427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VY8SELNGe94zy8bmYPnbKTD0kTDBhW3GbAVfG1HMK2YU7rbobopxLeEulM2GREMf3LnMlkYw2yjuwop3WNcHlg/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-w=&quot;35&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8356a2673b233142e81ef946925146b6</guid>
<title>RabbitMQ 使用延迟插件，代码量直接降一半？</title>
<link>https://toutiao.io/k/9ll6fdv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;What is rabbitMQ ？&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RabbitMQ 是一个由 Erlang 语言开发的 &lt;strong&gt;AMQP&lt;/strong&gt;（高级消息队列协议） 的开源实现。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RabbitMQ 是&lt;strong&gt;轻量级且易于部署&lt;/strong&gt;的，能支持多种消息协议。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;RabbitMQ 可以部署在分布式和联合配置中，以满足&lt;strong&gt;高规模、高可用性&lt;/strong&gt;的需求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体特点包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可靠性&lt;/strong&gt;（Reliability）：RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布 确认。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;灵活的路由&lt;/strong&gt;（Flexible Routing）：在消息进入队列之前，通过 Exchange 来路由消息的。对 于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;消息集群&lt;/strong&gt;（Clustering）：多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高可用&lt;/strong&gt;（Highly Available Queues）：队列可以在集群中的机器上进行镜像，使得在部分节 点出问题的情况下队列仍然可用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多种协议&lt;/strong&gt;（Multi-protocol）：RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多语言客户端&lt;/strong&gt;（Many Clients）：RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、 Ruby 等等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;管理界面&lt;/strong&gt;（Management UI）:RabbitMQ 提供了一个易用的用户界面，使得用户可以监控 和管理消息 Broker 的许多方面。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;跟踪机制&lt;/strong&gt;（Tracing）: 如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生 了什么。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;插件机制&lt;/strong&gt;（Plugin System）:RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编 写自己的插件。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;RabbitMQ 的消息模型&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3617021276595745&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXSjLvA8UqMTrwrXW7gkqRC7C09sRC4BmJVibUNO3rufesocfLgCr7icjg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;658&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35224274406332456&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXDG809CIfCZib1g0oibJqphzhgn9Q09iaRMujIcqLNHLxIoKiaQFcRXtsUQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;758&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Why use rabbitMQ ？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，我以一个（花店）商家的角色来向大家形象地举例：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;异步&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;之前顾客来店里下单，我会叫顾客等一下，同时叫店员准备订单，准备好送到顾客手上了顾客&lt;strong&gt;才能离开&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在顾客打电话给我：&quot;我要买 xxx，地址是：xxx，你帮我送一下&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我拿个小本子记下：顾客 a，电话：xxx，地址：xxx&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;店员&lt;strong&gt;有空&lt;/strong&gt;后就会准备订单并配送&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;解耦&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;以前有新订单时，我会亲自找&lt;strong&gt;每一个店员&lt;/strong&gt;（负责准备花束的，负责记账的，负责送花的等），告诉他们有新订单了，有空了处理一下&lt;/p&gt;&lt;p&gt;如果有店员入职，我通知的时候会多&lt;strong&gt;通知&lt;/strong&gt;一个人；离职时，少&lt;strong&gt;通知&lt;/strong&gt;一个人（维护一个需要通知的人员列表）&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，有新订单的时候，我只需要&lt;strong&gt;记到小本子上&lt;/strong&gt;，店员有空了自己来看&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;削峰&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;去年七夕，很多电话打给我，我把每一个订单告诉店员，但是店员忙不过来，客户又一直打电话来催，最后店员累成狗直接罢工&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年七夕节我学乖了，电话打进来我会告诉顾客：&quot;我知道了，&lt;strong&gt;会尽快安排处理&lt;/strong&gt;&quot;，然后记到小本子上就行，店员有空时&lt;strong&gt;按顺序来处理订单&lt;/strong&gt;就好&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;另外还有一种思路，引导客户不一定要在七夕才开始下单，可以&lt;strong&gt;提前&lt;/strong&gt;先买（淘宝的双十一预售就是出于这样的削峰思路）&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上是 rabbitMQ 解决的&lt;strong&gt;核心&lt;/strong&gt;问题。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;How to use rabbitMQ ?&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基操安装方式&lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;MAC 端&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;brew install rabbitmq&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Windows 端&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;安装 Erlang，下载地址：&lt;span&gt;erlang.org/download/ot…&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7753479125248509&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXLzxuIHkbnrsjibgHaLN2bPkwJNgrUibLibgXjWHr04Avb9kD7uwmaMJXQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;503&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;安装 RabbitMQ，下载地址：&lt;span&gt;dl.bintray.com/rabbitmq/al…&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7753479125248509&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXAU8m2v2Q8qCpgDiaRPIPEibznZqHIza0eF4KhZ2wY2zlIFAHcDibiaqkog/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;503&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;安装完成后，进入 RabbitMQ 安装目录下的 sbin 目录&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39466666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXTOsiabrCu0WTUkN7ayCwNSrY4dmmhRjqDTusiaPf9zDeUZdicibgiatqUrw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;750&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在地址栏输入 cmd 并回车启动命令行，然后输入以下命令启动管理功能：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rabbitmq-plugins &lt;span&gt;enable&lt;/span&gt; rabbitmq_management&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19637462235649547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXQKNCwialrZs9Lq2Z96ehJpiaujicQrYwFBH9ALv9Wf1BcRib4oIxYBlfjw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;993&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;访问地址查看是否安装成功：&lt;span&gt;http://localhost:15672/&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3255578093306288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXX4eAnkZDgNvk5BegZAI1jksa9EibiaUMoVmOAoanUr5iccZcWM8ZRibDnA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;986&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;CentOS 端&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装 erlang&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# rabbitmq 依赖 erlang 需要自己去自行下载&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /path/to/erlang-sound-code &amp;amp;&amp;amp; ./configure --prefix=/usr/&lt;span&gt;local&lt;/span&gt;/erlang&lt;br/&gt;make &amp;amp;&amp;amp; make install &lt;br/&gt;&lt;br/&gt;vim /etc/profile&lt;br/&gt;&lt;span&gt;# 添加&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; PATH=&lt;span&gt;$PATH&lt;/span&gt;:/usr/&lt;span&gt;local&lt;/span&gt;/erlang/bin&lt;br/&gt;&lt;br/&gt;&lt;span&gt;source&lt;/span&gt; /etc/profile&lt;br/&gt;&lt;span&gt;# 输入 erl，会出现版本信息，即安装成功&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装 rabbitmq&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;#下载 abbitmq_server-3.8.16 并移动到/usr/local/下&lt;/span&gt;&lt;br/&gt;vim /etc/profile&lt;br/&gt; &lt;span&gt;# 添加&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; PATH=&lt;span&gt;$PATH&lt;/span&gt;:/usr/&lt;span&gt;local&lt;/span&gt;/rabbitmq_server-3.8.16/sbin&lt;br/&gt;&lt;span&gt;source&lt;/span&gt; /etc/profile&lt;br/&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /usr/&lt;span&gt;local&lt;/span&gt;/rabbitmq_server-3.8.16/sbin &lt;br/&gt;&lt;span&gt;# 启动&lt;/span&gt;&lt;br/&gt;./rabbitmq-server start&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;功能实现&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;RabbitMQ 实现延迟消息的方式有两种，一种是使用&lt;code&gt;死信队列&lt;/code&gt;实现，另一种是使用&lt;code&gt;延迟插件&lt;/code&gt;实现。&lt;/p&gt;&lt;p&gt;死信队列的实现网上较多，本文介绍更简单的，使用&lt;code&gt;延迟插件&lt;/code&gt;实现（mac 环境，java 版本）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;另外的安装方式（建议使用这种）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先准备需要用到的安装文件及插件 (rabbitmq_delayed_message_exchange)，版本需要匹配，不匹配的版本可能装不上或导致兼容问题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXiauWrcB2zp5Ksria2MBg3QwhIicN4oOp0vjjQlmglUguCWQoiabs5ib0mvw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1560&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本人使用的 erl_25.0 和 rabbitMQ-3.10.0（可以到官网下载或者私信作者获取）。使用这种方式安装的优点在于本地安装和服务器安装流程完全一致，不过服务器需要开放安全端口 5672,15672 视情况，一般建议测试环境开放，生产环境关闭。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装 erl 和 rabbitMQ，具体步骤略（这个应该没人不会吧，逃~）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将插件文件复制到 RabbitMQ 安装目录的&lt;code&gt;plugins&lt;/code&gt;目录下，执行以下命令后重启 rabbitMQ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rabbitmq-plugins &lt;span&gt;enable&lt;/span&gt; rabbitmq_delayed_message_exchange&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实现延迟消息&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;以一个实际业务场景举例：当客服状态为在线且 3 分钟未回复客户消息时，自动重启 im 会话机器人接管会话。这是一个常见的延迟消息使用场景。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先在&lt;code&gt;pom.xml&lt;/code&gt;文件中添加&lt;code&gt;AMQP&lt;/code&gt;相关依赖&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!--消息队列相关依赖--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-amqp&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;application.yml&lt;/code&gt;添加 RabbitMQ 的相关配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;rabbitmq:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;host:&lt;/span&gt; &lt;span&gt;localhost&lt;/span&gt; &lt;span&gt;# rabbitmq 的连接地址&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;5672&lt;/span&gt; &lt;span&gt;# rabbitmq 的连接端口号&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;virtual-host:&lt;/span&gt; &lt;span&gt;/mall&lt;/span&gt; &lt;span&gt;# rabbitmq 的虚拟 host&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;username:&lt;/span&gt; &lt;span&gt;im&lt;/span&gt; &lt;span&gt;# rabbitmq 的用户名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;xxxxxx&lt;/span&gt; &lt;span&gt;# rabbitmq 的密码&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;publisher-confirms:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; &lt;span&gt;#如果对异步消息需要回调必须设置为 true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来创建 RabbitMQ 的 java 配置，主要用于配置交换机、队列和绑定关系&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 消息队列配置&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RabbitMqConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 机器人消息重启插件消息队列所绑定的交换机&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;CustomExchange &lt;span&gt;chatPluginDirect&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//创建一个自定义交换机，可以发送延迟消息&lt;/span&gt;&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        args.put(&lt;span&gt;&quot;x-delayed-type&quot;&lt;/span&gt;, &lt;span&gt;&quot;direct&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CustomExchange(QueueEnum.QUEUE_RESET_MESSAGE_CANCEL.getExchange(), &lt;span&gt;&quot;x-delayed-message&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, args);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 机器人消息重启插件队列&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;chatPluginQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(QueueEnum.QUEUE_RESET_MESSAGE_CANCEL.getName());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 将机器人消息重启插件队列绑定到交换机&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Binding &lt;span&gt;chatPluginBinding&lt;/span&gt;&lt;span&gt;(CustomExchange chatPluginDirect, Queue chatPluginQueue)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder&lt;br/&gt;                .bind(chatPluginQueue)&lt;br/&gt;                .to(chatPluginDirect)&lt;br/&gt;                .with(QueueEnum.QUEUE_RESET_MESSAGE_CANCEL.getRouteKey())&lt;br/&gt;                .noargs();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个消息的发出者，通过给消息设置&lt;code&gt;x-delay&lt;/code&gt;头来设置消息从交换机发送到队列的延迟时间&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 机器人重启队列发出者&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatQueueSender&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(ChatQueueSender&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; AmqpTemplate amqpTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;sendMessageToChat&lt;/span&gt;&lt;span&gt;(Long cmid, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; delayTimes)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//给延迟队列发送消息&lt;/span&gt;&lt;br/&gt;        amqpTemplate.convertAndSend(QueueEnum.QUEUE_RESET_MESSAGE_CANCEL.getExchange(), QueueEnum.QUEUE_RESET_MESSAGE_CANCEL.getRouteKey(), cmid, &lt;span&gt;new&lt;/span&gt; MessagePostProcessor() {&lt;br/&gt;            &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Message &lt;span&gt;postProcessMessage&lt;/span&gt;&lt;span&gt;(Message message)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; AmqpException &lt;/span&gt;{&lt;br/&gt;                &lt;span&gt;//给消息设置延迟毫秒值&lt;/span&gt;&lt;br/&gt;                message.getMessageProperties().setHeader(&lt;span&gt;&quot;x-delay&quot;&lt;/span&gt;, delayTimes);&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;            }&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个消息的接收者，用于处理延迟插件队列中的消息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 机器人重启队列处理者&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@RabbitListener&lt;/span&gt;(queues = &lt;span&gt;&quot;im.chat.cancel&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ChatQueueReceiver&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ChatRestartRobotService chatRestartRobotService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RabbitHandler&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handleOnChat&lt;/span&gt;&lt;span&gt;(Long cmid)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span&gt;//        log.info(&quot;机器人会话重启&quot;);&lt;/span&gt;&lt;br/&gt;        chatRestartRobotService.restartRobot(cmid);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，在对应的地方调用即可：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24351585014409222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/FoiciaVBBCfia5do6wgnUwicwC543gwxbQbXSAOD19e1ZFGcWoicRpThyHt6BvO7vNzKA3qScJUmtyAa2z3Rt97koZA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;694&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;done !&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;erlang.org/download/ot…: &lt;em&gt;http://erlang.org/download/otp_win64_21.3.exe&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;dl.bintray.com/rabbitmq/al…: &lt;em&gt;https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;http://localhost:15672/: &lt;em&gt;http://localhost:15672/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>