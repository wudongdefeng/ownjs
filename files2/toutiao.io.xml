<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e1e4ec6679e2e89b9932f346e3cf6f08</guid>
<title>Java 大后端各种架构图汇总（建议收藏！！）</title>
<link>https://toutiao.io/k/dvo6z1w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击&lt;strong&gt;&lt;span&gt;关注&lt;/span&gt;&lt;/strong&gt;公众号：&lt;/span&gt;&lt;/strong&gt;互联网架构师，后台回复&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot; 2T&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;2T&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;获取&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2TB&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2TB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;学习资源！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;上一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523205&amp;amp;idx=1&amp;amp;sn=89b261f829ce6c3487ce8b2ccf3ed06b&amp;amp;chksm=ea5f56e3dd28dff5238989d3e07d775d34c04a4e80a166059e92e84379274819203d72d1dc1d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Alibaba开源内网高并发编程手册.pdf&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;Alibaba开源内网高并发编程手册.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;span&gt;来源：https://blog.csdn.net/qq_37651267/article/details/95244623&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;1. java 类加载器架构&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7907801418439716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSh3W4iaTQFPQ0ibmQVicUHuv4Ees0AvQqQA4nke55kNj7qVZbPSeQUHDRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;564&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;2. JVM 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9401408450704225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSEmiakYWpKtDMFrrXbHvNt6Enxxia8lvXYl94fxHQUhicTpG6Pnkp390Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;568&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5076400679117148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSmxg8yJeWbKSI0pLLqGzia7Oo70Q1OCWsEXIfalz5pPFicIbMFSTHmD0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;589&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8712871287128713&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSgva1XZtwoaCNJLhLDo8InNjLFDweicH8LUNtjY5ytnaqykqtnmMArnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;505&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;3. Java 技术体系&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36904761904761907&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSnl7ZiaulMeVavI6q40ukl4NZPt0teTicaQGZHqLu80IegOIIIqP9RkOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;4. 线程运行架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSCiciaqDAZKibkEiagbS1kCE99jOJ1l8pC4dL2VeTTibXWb2P38qhCprqOpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;5. Java 体系（编译与运行）结构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.051975051975052&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSaibIoasNibb36WgREy1LCDG6WVzSuXfQmvFmlrWeiaFGnFveicBGicwniaew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;481&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;6. JMS 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9772727272727273&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMScibogn2VKBN5DicuLJYXNrSHBcb7adHZEy3hAdpNniaibbmIrPT27ia1IYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;528&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9244897959183673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS8Ep8owxSDq59M9AjqF1roBvgypS7nqb1716KibBczMO3h8dMYsOZl3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;7. JMX 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7392055267702936&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSWsXnc4UNvTC0jfiapYWbARIh3zfYZs0JXOjhXIEYMqtnBfKVWZIZEzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;579&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5117370892018779&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSNGvibBkUrfFDMPPWSlxDCQR1nT9Y6eYd8SLTONqytd9aTnApaTriaelA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;8. Spring 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5574074074074075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSLUZMibRK1ibvBg3njcf819icWBq1nhaO9ianvl3Y9EkNlzAUfWIXJNoy4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;540&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6788079470198676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSgR4BqKoKvvpVwlSDWciatZYBQUBWHuL1apHXznGHicQ6YKz14LPTZPeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;604&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6723259762308998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSEv5Nuze9VHHCpXFo4Fu0AbPxkPwpmaVYGpuAHpZVOTnQhLib3QENfxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;589&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;9. Hibernate 架构&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1176470588235294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSFDic0IAzL6yEYnBbxMGSQiawQgWEb6dMakgmyGqaeSuhniag7kjRsonTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;340&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6497797356828194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSSRjtBHchBLYMD21XuP97PhicydwLoR6fIxVFDnricZfKUs6ia5W6S3ib3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;454&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;10. ibatis 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3978328173374613&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS0xqUkt6qtoiad9kLVsUKiaaiax9POARTcrq9aPeAon2ZlpQekwBOFkC1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;646&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;11. Struts2 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9530612244897959&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS1B8uc3551D98DibRfFyGfuJhVibNU0bibglQU0pjagqeYv1iaF4NLThYXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;12. Struts1 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46184738955823296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS7Anz6WxWmZ0NQat7Z23odhQWNDj3USnak8FIbQiaLibmC5yZMFib9pvsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;498&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;13. JBPM&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9326047358834244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSd9sAgOFtCLiakzuxLMtjMkiaZTxNr0dicBVuBwrjuz4WRApichQsWWBXmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;14. EJB 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6142433234421365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSzLxufxbU2aE7pFKPjPARI0vKorZ0MCQ4IVQzcYOictHgFWlzA0ljtgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;674&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5531914893617021&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSgI4P8XKQynV9AMU3ibyoncUCKI9aWWLaQvQ6gxRBEiaJoH4kiaKhfvF2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;564&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;15. Portal&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5916666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSBQiatsxiahQhrl46eOtATtgH74pdwLZia1yDnUR7qVkD122BJewQqc2nQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;16. J2EE&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6877256317689531&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSZn7sQO90NcxlwOLKeIictpdsbwEevwSuIbQdqVLicUahuib3wqcLrbeQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;17. SmartClient Ajax 框架架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39399293286219084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSYWQgY28pw0sPe1ReF37DtpkQUdhtv6q4Wiaia2loicg88RicfvKRkp9mlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;18. Oracle&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7789855072463768&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSyGbib4Z7H7LUT05fOLHKr9n9qGGkDSIhVgiaFj8f3DicbyJ3ibwNhWHRRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;19. MYSQL 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2576923076923077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSSljKibmO8iaSxWRfgBSxfTvcKmR4LZnYbjnkxK8dXwmJtgnRY7u9GJsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;20. Android 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7203883495145631&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSU8ibQrcxT2NG61MyCK1Vd9z91eb226eIH6pOTPT12dVUvgPCGicwKGcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;515&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;21. 云计算架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6765327695560254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSQqz6FnjERFkAh142NBmjWMSaTez7jtPr8jd9m5kJenpagnC2I8yPqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;473&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;22. LINUX 内核&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7382297551789078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSK39kKat82gzged0y7T2EyibSqagZDiapc4mbQYE3LQlmSgA5EyPzqeTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;23. vmware 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.094758064516129&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS2OPAam0ICCHuESESe9LC14uHudavql7IB9O34LxUuPLvR7RPJn90kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;496&quot;/&gt;&lt;/p&gt;&lt;p&gt;24. SAP 系统整体架构&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.680073126142596&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSqAiao72mM2bvSBrRZ3iby9wuG6SV7Yt4FojTPxZwFMAez4lRdaYpkC7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;547&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;25. 门户网站应用架构蓝图&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4930555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSPLVSlGicRh5W9EmDqBxsicXbqHibKLzuY9licfGoam1L9FCbcZHNhpDFaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;576&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;26. SOA 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5354166666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSxROVsJ4T8eofm4wdV9RKWlVCficYTjyvoapvoM4TziavYaf5NGVwZrFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;27.MIS 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7179080824088748&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSXdZxByGd3RbBK1R5QhKYOL7pQHl53ewZjD3MIlsdGsuxqoJh82uWjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;631&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;28.APUSIC ESB 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.574430823117338&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMS4Srn745g8UFpzRwevrV4Bt8HUxjx85M5Ie3G366nOxQhQ6MUCnQC3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7916666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSfiabJFwl3AEx6kCmGHI6lueK4QjaPz0773KvPG7Rt9xjWQuC1d0XCBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;648&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;29.GIS esb 技术架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7436823104693141&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSgvOSibgr6wqOsib69B55VKnyt3MXtpl2g9CxcdxnmIVcYMgT7sKxVyJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;30.CRM 方案架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5925324675324676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMStMLTFVOvoiaE8PP1ibVff3fEcHnkD2fZaRmcJ7dKwM3gEmIBiaYPhKB6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;616&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;31.OA 架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8633333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSE2WP8SzomwYmqnFkARSLCMNT15xdsH2xl6LV86AdXNCTZI0WXqticSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8423076923076923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRKDYRaHItdwKER3dOaNKuMSjNmo9neJCe9qegDcWdnEjwN8eYMyRcKls2ecw29eUWdkT1bNKn2CHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;520&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;-End-&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;527&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;1357582&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;最后，关注公众号互联网架构师，在后台回复：2T，可以获取我整理的 Java 系列面试题和答案，非常齐全&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1423611111111112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRI2cbvKcYHPMKYlo4ibO3ZXG4kRnuC195QBJzMR0VLd7p08kYInDEEiasufnLsY7LhFwPIml2fPergw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;288&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;正文结束&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;推荐阅读 ↓↓↓&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247527958&amp;amp;idx=1&amp;amp;sn=6d407650c574b304b681aecbf5c1323b&amp;amp;chksm=ea5fa370dd282a66a8b6463fb60ad850d47cc35d727ac4b66fdf29f88ce30eef400287b1b746&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;全新 IDEA 2022.2 正式发布，新特性真香！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;全新 IDEA 2022.2 正式发布，新特性真香！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488035&amp;amp;idx=1&amp;amp;sn=5300893903094128bdc20ce2a5717a50&amp;amp;chksm=ea5cdf45dd2b56531ac0c3a8fb8b56b06bc546785f8772a4d02e2ca87c4e30f25b24bf21f784&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;从零开始搭建创业公司后台技术栈&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;3&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488928&amp;amp;idx=1&amp;amp;sn=4c56dd675e1b32a73b698df3d5e8609f&amp;amp;chksm=ea5cd8c6dd2b51d05e6d6d715418241f471ccb3002719263b2d0e092763f68f3691249970a08&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;程序员一般可以从什么平台接私活？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;4&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247527535&amp;amp;idx=1&amp;amp;sn=6cb6c086057aebaedc47859518eb80da&amp;amp;chksm=ea5fa109dd28281f3a90a36ea1deb7e8d1658d221f718ea15023b0345b53fc496c137496d10d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Spring中毒太深，离开Spring我连最基本的CRUD都不会写了...&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Spring中毒太深，离开Spring我连最基本的CRUD都不会写了...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;5.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247513283&amp;amp;idx=1&amp;amp;sn=3b3d8e893a1241cf5af2150370ae9d71&amp;amp;chksm=ea5f79a5dd28f0b3a7603b1fbdb306f77ac64223bd05c4b7f0dc0469f77a68359810c5de2a01&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;为什么国内 996 干不过国外的 955呢？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;为什么国内 996 干不过国外的 955呢？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;6&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247528236&amp;amp;idx=1&amp;amp;sn=c675d5d3aede21b4b7ebbba21eadf96c&amp;amp;chksm=ea5fa24add282b5cfb13757cd534ec600fb910f9dcb7f3ee3dea5e7929e0fbbd22381625ff20&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;中国的铁路订票系统在世界上属于什么水平？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中国的铁路订票系统在世界上属于什么水平？&lt;/a&gt;                        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;7&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488564&amp;amp;idx=1&amp;amp;sn=256862239b12a1313919ee3ea6ff0d1c&amp;amp;chksm=ea5cd952dd2b50443feec88eb893233d2f6cf33f89e2ce72192c98035fd26cb0eb797a86f8f0&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;15张图看懂瞎忙和高效的区别！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100030073&quot; data-ratio=&quot;0.1328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GQek52mKtWDXtSkfViaQ2FZ2ZfSyjBcSkArjQVCMH4a7uxg6Vkibiaiciaiae2uxvzia7yib04tleLiaqcFVGUf2vcMf4A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc0b2943efe5c92bce1667807a3e2c9a</guid>
<title>新一代主机安全4大核心技术和15大应用场景</title>
<link>https://toutiao.io/k/ilhis90</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;p&gt;随着业务数字化转型，企业的业务变得越来越开放和灵活，面临的安全挑战也日益增加。在这种多变、开放的场景下，无论安全边界怎么做，都无法阻挡黑客打破边界进入企业内部来窃取核心资产。&lt;span&gt;&lt;strong&gt;当下安全对抗以及安全管理的核心，正逐渐从边界转移到核心服务器系统上。&lt;/strong&gt;&lt;/span&gt;当然，聚焦于主机安全领域的厂商，也受到了资本疯狂追捧。例如全球市值最高的网络安全公司CrowdStrike，年营业额约50亿人民币，当前市值却高达4000亿人民币。这家公司背后的投资机构也同样星光熠熠，包括CapitalG（谷歌资本）、Accel Partners、华平投资等众多顶级创投。这也充分证明了资本市场看好主机安全企业未来巨大的潜力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;安全正在经历一场前所未有的进化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;达尔文进化论中说，进化来源于突变。这句经典的评述对于信息安全行业同样适用。那些层出不穷的未知威胁，正是进化的动力。&lt;span&gt;&lt;strong&gt;随着新一代主机安全产品出现，让整体安全防御发生了巨大变化，主要体现在以下6个方面：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;① 安全从边界走向内部，形成纵深防御，从主机系统内构建安全能力。&lt;/section&gt;&lt;section&gt;② 安全从粗放走向精细，对于主机资产、风险漏洞、黑客攻击等做精细化管理。&lt;/section&gt;&lt;section&gt;③ 安全从固化走向灵活，主机安全编排能力发展，可以迅速实现新功能扩展。&lt;/section&gt;&lt;section&gt;④ 安全从低效走向高效，采用由内而外的监控，让事件响应变得更加高效。&lt;/section&gt;&lt;section&gt;⑤ 安全从孤立走向协同，提供主机侧安全数据，让整个体系更加完整。&lt;/section&gt;&lt;section&gt;⑥ 安全从运维走向运营，以业务发展为基础，以事件核查为线索，以持续优化为根本。&lt;/section&gt;&lt;p&gt;&lt;br/&gt;据统计，在亚洲80%以上企业被黑客入侵后，需要数月时间才能发现入侵痕迹。如果想要了解黑客是怎么进来的，拿走了什么以及留下了什么，则还需要数周时间方能完成。此外，后期漏洞修复和处置也需要数天时间才能完成。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;由此可知，传统安全事件响应周期很长，想要在入侵初期就及时发现黑客攻击更是困难。青藤云安全作为国内新一代主机安全的践行者，通过七年多时间，上亿研发投入，自主研发出了以保护“工作负载”为核心的主机自适应安全平台，致力于提升对于事件的检测、分析和响应的效率。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4117647058823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXyRntcvUpRwibZA9t4foRDyG4lXyib12S186ugMZuu0yWKkdfN1wZntjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这样的背景下，青藤基于多年主机安全经验，联合信通院于&lt;strong&gt;近期推出2022年最新版的《主机安全能力建设指南》&lt;/strong&gt;，感兴趣的读者可扫码领取电子版方案。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXlT3fzx0Zad2k05yy3jtAfDwDjic4aXYVNszFHjnqT2rcZ1tXmpicIhCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;扫码下载2022《主机安全能力建设指南》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6370370370370371&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr5sB05k92lynTmZ9icBZGccX4dEthFrvqiaOzq2BNrdy9qzPd8xiahVhBweHmFqStxfXicjOvRWFjcjBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;该方案覆盖了主机安全的三个主要层级，包括基础级、增强级、先进级&lt;strong&gt;，&lt;/strong&gt;在每个层级具备不同需求的主机安全能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;七年匠心打造的四大核心技术&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;运行在产品核心平台底层的是新一代主机安全能力引擎。该引擎拥有四大核心技术，分别是Knowledge-Base、脚本引擎、QSL语言、AI增强技术。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;第一个核心技术是Knowledge-Base&lt;/strong&gt;&lt;/span&gt;，简称KB系统。通过该技术将安全检测目标抽象成对象，进而封装底层复杂度，使上层安全人员工作变得更简单。举个简单例子，假设Apache某个版本爆出新漏洞，安全人员需要根据版本号尽快确认受影响的资产。但是Apache自身版本以及所处的操作系统环境可能各不一样，而且不同版本的配置文件也不一样。因此，安全人员想要通过检测配置文件中的版本号来确定是否存在漏洞将会变得非常困难。但是通过青藤KB系统，可快速将Apache抽象为一个对象，那么安全人员则无需关注Apache的版本号、所处操作系统环境以及配置文件的路径。只需在编写检测脚本时，调用一个对象就能获得Apache对应版本号数值，极大减小了工作量。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;第二个核心技术是脚本引擎&lt;/strong&gt;&lt;/span&gt;。通过C语言和Java语言构建整个系统，但是在C语言内部支持了LUA脚本，在Java这一层支持了Python脚本。脚本引擎使得青藤产品可以实现热更新，也使产品更易扩展和发布。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;第三个核心技术是QSL&lt;/strong&gt;&lt;/span&gt;。这是青藤自主研发的面向安全人员的一套语法，极大提高事件分析和响应能力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;第四个核心技术是AI增强技术&lt;/strong&gt;&lt;/span&gt;，基于机器学习、深度学习，从复杂的现象中提炼规律，让安全更智能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;青藤万相·主机自适应安全平台核心功能包括资产清点，风险发现、入侵检测、合规基线、病毒查杀等功能。通过底层核心引擎，实现了各功能的智能集成和协同联动。其插件化的构建方式，不仅具备灵活的扩展能力，也能实现各功能模块之间无缝联动。其分布式的部署方式，能够应对客户大量任务下发和大型攻击来临的海量数据分析处理，并始终保持稳固的性能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;主机自适应安全平台的核心功能和应用场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;01 从安全角度重新定义资产&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;资产是安全防护前提，安全人员只有知道自己要保护什么，才有可能把安全做好。青藤的资产清点为客户带去三大核心价值：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;① &lt;strong&gt;&lt;span&gt;全自动化的资产梳理&lt;/span&gt;&lt;/strong&gt;。可从正在运行的机器上反向生成CMDB，实时同步最新资产，减轻安全人员复杂的管理操作。&lt;/p&gt;&lt;p&gt;②&lt;strong&gt; &lt;span&gt;让保护对象清晰可见&lt;/span&gt;&lt;/strong&gt;。通过超细粒度识别，大到操作系统，中到应用框架，小到代码组件都能精准发现。&lt;/p&gt;&lt;p&gt;③ &lt;strong&gt;&lt;span&gt;安全不再落后于运维&lt;/span&gt;&lt;/strong&gt;。部署青藤产品之后，安全部门手里的资产信息是整个公司最全和最准确的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;应用场景：新漏洞出现时快速定位受影响的资产&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;当新漏洞爆发时，青藤资产清点可快速定位受影响的资产。比如当WordPress爆发出新漏洞时，可能既没有漏洞POC也没有漏洞编号。在这种情况下如何快速定位受影响资产呢？通过青藤资产清点可快速查找WordPress资产分布在哪些业务组件里，这些业务组件是谁负责的，就能知道这个漏洞影响范围，也能迅速进行处置。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5601990049751244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXS9Pel2dtt0NmyOTTvNbHyy0QFOianKA7ZiaIRy6GmdLKCDRoNVCdK33w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1005&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;02 基于Agent风险发现，比快更快，比准更准&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;青藤风险发现致力于帮助用户精准发现内部风险，帮助安全团队快速定位问题并有效解决安全风险。该产品能提供详细的资产信息、风险信息以供分析和响应，能为客户提供以下三大核心价值：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;① &lt;span&gt;&lt;strong&gt;准确的风险识别，白盒视角的风险发现比黑盒更准确。&lt;/strong&gt;&lt;/span&gt;基于Agent的漏洞扫描，在准确性上拥有天然优势。传统漏扫产品对资产覆盖的深度和广度不足，导致检测准确率不高。&lt;/p&gt;&lt;p&gt;② &lt;span&gt;&lt;strong&gt;极大提升扫描效率，在复杂环境下依然能达到极高的效率。&lt;/strong&gt;&lt;/span&gt;传统漏扫产品效率低，而基于Agent方式可快速完成全部扫描。因此，一旦出现新的漏洞可在在很短时间内完成检测工作。&lt;/p&gt;&lt;p&gt;③&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自动关联资产数据，定位相关负责人以及属于何种业务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;在查到某机器上存在某个漏洞之后，可迅速知道谁负责这台机器。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;应用场景1：新高危漏洞的快速应急检测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;从之前攻防实战演练来看，攻方团队利用了Weblogic反序列化漏洞、JBOSS远程代码执行漏洞、Apache Axis远程命令执行漏洞等多个0Day漏洞进行攻击。通过青藤风险发现可以快速进行响应，绝大部分漏洞都可通过资产识别直接定位，对于无法识别的漏洞可以通过编写检测脚本将其配置到检测系统中即可。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5293276108726752&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccX0jxTMVibrtIfB9W3vpgic3z0Wh8iciaI2TLiad3g313qQvyZRNgVF5iaqOLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;699&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;应用场景2：高危漏洞的补丁识别和关联&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;当一个漏洞被精准定位后，青藤风险发现能够关联分析这个漏洞相关的补丁。例如，风险发现产品通过CVE编号确认所有资产中有13台机器上存在Shellshock漏洞。青藤产品不仅提供详细补丁情况，还能够检测补丁修复后是否会影响其它业务。青藤通过识别应用，加载SO和进程本身确认是否被其它业务组件调用，来判断补丁修复是否会影响其它业务。因此，在高危漏洞爆发后，青藤产品能快速帮助客户进行补丁识别和关联，并确认打补丁后是否存在风险等。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.524074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXorhcBbzBdrIOaIJEiaG7nEzjrTarXPtqzQKE0XvJb5U5g0MeOATpK6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用场景3：深度清理弱密码死角&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;根据权威机构调查显示，每家企业都存在大量的弱口令。但是想要发现这些弱口令并非易事，传统漏扫产品受限于暴力破解字典和时间限制很难全面发现弱口令。虽然很多客户组织了大规模的弱密码检查和修复，在部署青藤Agent后依然发现了大量的弱口令。例如，在MySQL的弱密码检测中，为客户发现了多数管理员在改密码时，只会修改其中一个可登录host的密码，对其他可登录host的密码没有进行修改，或者修改后也没有flush privileges以让新密码生效。青藤基于Agent的方式进行本地的弱密码检测，无需进行远程登录尝试，通过对各种应用进行剖析，直接从文件中去解析哈希，再对哈希做检测，不仅速度快也无死角。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;应用场景4：从已经泄露的密码中反向定位影响范围&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;相信很多人都遇到过类似情况，某台机器被黑了，但是安全人员无法确认密码是否已泄露。通过青藤产品，只需将这个密码配到系统里，通过检测哪些机器有同样密码就可以判断哪些机器是有风险的。青藤提供了一系列定位的工具，安全和运维人员可以清晰知道哪些机器密码是需要修改的。&lt;br/&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5962301587301587&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXq2RL1RFB9KkbGXD4gKmsUdo2rVaOxYRzawLmPnrb6gObTKkdfVseNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;03 基于行为的入侵检测&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;青藤入侵检测，重新定义了检测引擎，通过生成很多内在指标，并且对这些指标进行持续的监控和分析，那无论黑客使用了什么漏洞、工具和方法，都会引起这些指标的变化从而被检测出来。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;① &lt;span&gt;&lt;strong&gt;实时发现失陷主机：检测“成功的入侵”，抓住重点，提高效率&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;相比传统IDS，青藤产品报警准确率高，能够让安全的人抓住重点，解决最核心的问题。&lt;/p&gt;&lt;p&gt;②&lt;span&gt; &lt;strong&gt;检测未知手段的入侵：通过关系，行为特征透过表象抓住本质&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;以业务关系为例，一旦黑客入侵就会破坏这些关系，比如A到B之间从来没有连接，但是黑客在内网可能就从A连接到B，这一点就能暴露这个黑客。&lt;/p&gt;&lt;p&gt;③ &lt;span&gt;&lt;strong&gt;快速的应急响应能力：能够快速收集数据和实时调查，并进行有效处置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;通过Agent从机器中获取数据，然后进行持续分析处理数据，将响应时间缩短到最小。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用场景1：利用反弹shell功能抓住Web RCE和迅速定位&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如下图所示，通过反弹shell的告警邮件来分析进程信息，由此确认对应服务和了解相关漏洞。然后通过日志的审计插件可以获得访问日志详细信息，进而还原出攻击的方法和IP。此外，青藤产品还能够对RCE漏洞执行快速检测。如果将这两个功能组合在一起，几乎可以发现所有基于0Day漏洞的RCE的攻击。&lt;br/&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8014492753623188&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXBHePQdtFIRcSpR8MejNOP5JfGwxbsOYN8EeCaIvbibUmR8Tic2cFrJfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用场景2：挖矿进程的检测和迅速定位&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;青藤入侵检测产品，通过集成包括小红伞、ClamAV 等国内外多个主流的病毒查杀引擎，并利用青藤自研发的大数据分析、机器学习和模式行为识别等多种检测模型，为用户提供全面和实时的后门检测和防护能力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;此外，还能够提供自动化响应级别的沙箱，把任何样本丢到沙箱内部会自动输出一个处置规则，只需将这个处置规则导入系统就可以清理干净挖矿病毒。因此，被挖矿后想做应急响应，只需一个样本就能够自动生成处置规则，全自动化清理处置掉。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5425925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccX4aibtAqSSMc4pwKMXnClps3qiaBnKgkUdaJdNTicibwTueslfYDA5JRXvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用场景3：和威胁情报联动，迅速定位到具体的恶意进程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;青藤万相·主机自适应安全平台通过结合威胁情报，可以直接定位到进程。比如哪个进程向外请求了黑DNS，哪个进程连接了Hash等。因此，如果将过去24小时所有对外请求过的DNS去重后排序，选择出top5对应的进程。如果其中存在一个恶意域名，就可以直接关联到对应进程。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5398148148148149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccX6eiaTRkHDVoO53lGRia9BebLwo27E85eeEEjm2MXo0Eu7m22jw3QibR6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用场景4：发现暴力破解成功后的异常登录（机器学习）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;过去想要发现黑客暴力破解密码后异常登录行为，则需要通过人工编写对应规则，确定什么是异常登录，什么是正常登录。但是，青藤已经通过机器学习的方式取代人工服务，机器自动学习登录行为，非常准确有效。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6101851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXc1XG3fGW1AxSdhlGod52PgUg2sSC0dr2pLs0geJYQqQdWLcgT6CZwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用场景5：发现绕过堡垒机登录的不合规行为&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因为堡垒机可以自动生成口令，很多企业安全人员会认为部署堡垒机之后就不存在弱口令。但是部署青藤Agent之后，通过扫描发现了大量弱口令。通过检查分析，发现很多机器没有接入堡垒机，而是绕过堡垒机。为解决该问题，只需在青藤异常登陆的产品功能页进行规则配置，就可以轻松发现有哪些机器没有通过堡垒机。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;应用场景6：识别内网横向渗透和内部蠕虫传播&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;青藤蜜罐是复用了Agent的能力来形成的微蜜罐。在每个Agent上设置一些端口，这些端口正常情况下不会被自己员工访问。在主机内只需覆盖15%的微蜜罐范围，几乎就能100%发现内网横向渗透所有攻击。因为黑客每做一次内网探测就有15%的概率被发现，彻底解决了传统蜜罐覆盖问题。此外通过微蜜罐还能清除、定位内网的蠕虫并清除干净。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;04 自定义检查标准，满足不同检查基准场景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;合规标准让运维人员有了检查默认风险的标杆，但是面对网络中种类繁杂、数量众多的设备和软件，如何快速、有效地检查设备，又如何集中收集核查的结果，以及制作风险审核报告，并且最终识别那些与安全规范不符合的项目，以达到整改合规的要求，这些是网络安全运维人员面临的新的难题。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用场景：应对等保合规检查，落实企业基线要求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;通过青藤产品基线功能，能够在半小时之内把数万台机器的基线分析清楚，对于不符合要求的检测项，提供代码级的修复建议。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5368098159509203&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXEvSdnhOBG107KAq2AOLq6cjQovqWryqHood6eNps6VNVS5HUsH0eug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;05 提供高价值主机层数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;安全日志是一个大数据系统，能够把主机上所有活动记录下来，并且很方便的进行分析。从安全角度引导客户对日志进行查询与分析，发现黑客入侵的蛛丝马迹，还原攻击现场。该产品基于ES系统，可在5s内获得查询结果，同时对TB级数据进行统计分析，并保证数据至少保留180天，并可导入其他系统。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;应用场景1：运维操作审计，实时审计+事后排查分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;记录服务器的所有运维命令，进行存证以及实时审计。例如，实时审计运维人员在服务器上操作步骤，一旦发现不合规行为可以进行实时告警，也可以作为事后审计存证。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccX2mElCsKAoOAoGopEYNXbWKIHwjTXjkTbeIZpW5pCmh1ZnD9mtQGsIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用场景2：为态势感知和SOC提供关键基础数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;通过Agent采集主机上的事件，可以将数据信息对接给SOC、态势感知等产品，也可以对接给编排系统。青藤安全日志可以从主机侧提供非常独特的数据，这些数据是传统网络设备无法获取的。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5361111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXdgPXGrk0mYv4aiagnZshrNfao0B1ESAXXib10owP5dMQaNAtmq0RRvBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用场景3：Do everything in one line&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这个应用场景的核心是通过一条命令实现复杂交互过程，如下所示：&lt;br/&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12103407755581669&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXk8NOt58sibWAmSb2ibGyzclIlg3HibRl12BNtfjIBo4t10BNd7xYuKBTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图所示命令包含的含义是：对24小时内机器上创建的所有进程MD5去重，再把这些MD5传给腾讯的威胁情报接口。如果发现是黑MD5，就将该进程杀死。在正常情况下，完成这一系列动作需要耗费大量时间精力。首先需要查找机器上的恶意进程，然后再跟威胁情报平台进行匹配，最后再处理恶意进程。但通过青藤提供的独特QSL语言，一句命令行就可以实现复杂过程，提高安全人员整体分析和处置的效率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个场景化真实案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;①某天快到下班点，青藤的安全驻场人员突然接到产品告警，发现反弹shell和webshell，于是迅速展开排查，确定失陷主机为公司一台文档服务器。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36203703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXTcMwGIpW6B9kHliaOgbao1tuC7ShsNs3a6zAUMNoJD34RZqEsLJ2aog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里补充说明下，青藤新一代主机入侵检测系统的“反弹shell”功能，可以通过对用户进程行为进行实时监控，结合异常行为识别，可发现进程中非法 Shell 连接操作产生的反弹 Shell行为，能有效感知“0Day”漏洞等利用的行为痕迹，并提供反弹 Shell 的详细进程树。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;② 凭借上述产品功能，青藤主机入侵检测系统在该服务器被上传webshell之后，发现反弹shell操作如下：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23055555555555557&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXa98mKiau0icL16ne8bwkgBbDljibWjDDQMQgQNHuUm1XevB7AtE771a1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;③安全人员使用安全日志、操作审计，检查黑客操作的每一条命令，发现历史记录被黑客清空了，幸好有审计功能，默默地记录下了黑客的每一条操作。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2574074074074074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXpnS4XTpuCCN0oxaNZO1NVe7Z4VN7nF1Tv2lPKlHc9XBZNibbJfbNB2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;安全人员发现黑客先利用系统漏洞进行了提权后，安装修改了一些文件，怀疑是安装rootkit系统后门，之后安全人员使用青藤入侵检测产品“系统后门”功能进行检查，发现了多个系统后门和被篡改的关键位置文件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24814814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXnKaDwEh7Qwy15sfEwhFWatA9pBbicP0MPOML9doPEmfHhnECbr5LLRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;④通过分析，发现黑客的入侵路径来源为struts2漏洞入口，黑客上传webshell后进行提权以及安装后门操作。安全人员通过操作审计以及黑客的webshell特征，还原了黑客对主机进行的操作。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;⑤ 最后，安全人员协助客户开启了端口蜜罐的功能，针对目前流行的MS17010漏洞开启了445等端口的蜜罐，并将安全人员常用的扫描器的地址加入了白名单，通过大量的部署微蜜罐，来增大内网诱捕黑客的几率。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;通过上述分析，我们还原整个安全事件，发现此次事件属于典型的APT入侵攻击事件。首先黑客通过Windows后门进入内网潜伏下来，并在内网漫游找到有Web站点或有漏洞的主机并上传webshell，继而进一步通过webshell实现反弹连接，获取目标主机的shell控制权为下一步攻击做好准备。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;上述整个攻击过程可以说做得滴水不漏，环环相扣。面对这种高级别攻击，传统基于规则策略的安全检测产品就形同虚设，黑客可以很轻松绕过。但是青藤新一代主机入侵检测系统可以提供多锚点的检测能力，能够实时、准确地感知入侵事件，发现失陷主机，并提供对入侵事件的响应手段，为系统添加强大的实时监控和响应能力，帮助企业有效预测风险，精准感知威胁，提升响应效率，保障企业安全的最后一公里。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果您有关于主机安全方面的任何问题，&lt;strong&gt;欢迎致电400-188-9287转1，或直接扫描下方二维码，领取2022《主机安全能力建设指南》&lt;/strong&gt;。您也可以点击“&lt;strong&gt;阅读原文&lt;/strong&gt;”&lt;strong&gt;免费申请试用&lt;/strong&gt;青藤的主机安全产品~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr5sB05k92lynTmZ9icBZGccXlT3fzx0Zad2k05yy3jtAfDwDjic4aXYVNszFHjnqT2rcZ1tXmpicIhCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;233&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;扫码下载《主机安全能力建设指南》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2ef81c4cd00ac33452aeb4276e27107e</guid>
<title>案例推荐 | 支撑超万家停车场：科拓停车基于 Pulsar 的消息总线架构演进</title>
<link>https://toutiao.io/k/uop3fzg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;本文由 StreamNative 发起并组织整理。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;h1&gt;关于作者&lt;/h1&gt;&lt;p&gt;张居开，科拓停车成都研发分中心架构师，负责数据同步链路、中间件的预研、自建工作，同时主导或参与数据中台以及各业务线的复杂业务和技术难点攻关。Canal Contributor，主要贡献为在 Canal 1.1.6 版本贡献了 Pulsar 集成特性。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;导读&lt;/h1&gt;&lt;p&gt;科拓停车目前是智慧停车行业 Top3 的领军企业，其业务涵盖智慧停车解决方案、车场运营管理服务、互联网智慧停车平台、停车场增值服务等板块；旗下“速停车”平台已成为目前微信生态主流智慧停车平台之一。科拓停车成都研发分中心的主要职责包括技术和数据中台、城市停车平台，以及一些 C 端业务和中间件预研工作。 &lt;/p&gt;&lt;h2&gt;场景介绍&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;387&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6888888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIaicmh7xPYxgEFu023PAK86dyxKJF6bZ4vQUf8al3M79BrgtqAbO2lDWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;智慧停车以停车位资源为基础，将无线通信技术、移动终端技术、GPS 定位技术、GIS 技术等综合应用于城市停车位的采集、管理、查询、预订与导航服务，实现停车位资源的实时更新、查询、预订与导航服务一体化，实现停车位资源利用率的最大化、停车场利润的最大化和车主停车服务的最优化。我国智慧停车行业起步较晚，现处于加速发展阶段，停车场能够实现无人化管理，车主自助完成入库、缴费和出库。&lt;/p&gt;&lt;p&gt;智慧停车产业链参与者包括上游设备供应商、中游智慧停车解决方案、下游智慧停车方案需求者。其中上游设备商可分为硬件、软件两类，硬件主要包括高清摄像头、地磁车检器等设备，软件则包括云计算、储存、信息处理等设备；中游为智慧停车方案提供商；下游为智慧停车方案需求者，包括政府、停车场商、车主等三类用户。&lt;/p&gt;&lt;h3&gt;核心业务发展历程&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 早期缴费流程&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;车辆到达出口➝岗亭保安算费用➝跟车主收现金➝找零➝开闸放行&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. 过渡缴费流程&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;车辆到达出口➝LED屏显示费用➝跟车主收现金➝找零➝开闸放行&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;3. 电子支付流程&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;扫单车场码/扫出口静态码/扫缴费机动态码➝付费离场/无感离场&lt;/p&gt;&lt;p&gt;整个发展历程主要解决的是停车场出口因缴费导致拥堵的问题。&lt;/p&gt;&lt;h2&gt;业务对消息总线的需求&lt;/h2&gt;&lt;p&gt;整体业务对消息总线的需求主要来自于两个方面：数字化转型与业务扩展，具体体现在以下几个方面：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 线下车场、设备、订单信息、进出车数据等如何上云&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 整个链路如何满足日益增长的数据量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 核心关键业务如何保障稳定、高效、低延迟&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 需要契合公司云原生发展方向，易于管理，易扩展&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;消息总线架构演进&lt;/h2&gt;&lt;h3&gt;1.0 - 单通道公有云架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;185&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3287037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIaznHyyP6TNeOaEb5n8EKR27lyQdfEJFoKmEl7IVPEia2hzZB0VhfdJ9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;在业务初期，MQTT 服务、RocketMQ 与业务项目部署所使用的服务器均采购云上产品，这样能够快速搭建起整个业务链路，保障业务正常上线投入使用。随着业务的扩展、用户体验要求的提升，原有的单通道链路难以满足业务的吞吐量、可靠性等指标需求，整个系统的稳定性、可靠性、及时性等都有了更高的要求，我们在单通道架构的基础上设计了双通道架构。这也就是消息总线架构 2.0 版本。&lt;/p&gt;&lt;h3&gt;2.0 - 双通道公有云架构&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;256&quot; data-backw=&quot;579&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIac932HeYhDhUibajNdYQf6CG6zicDaeLd7FSAAiceL3XQWukxYMyOY4hug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;在新的架构中，车场对业务核心数据进行上报时会同时向两个通道发送，由业务系统做去重处理。&lt;/p&gt;&lt;p&gt;这样设计的目的是提升可靠性，防止因数据传输延迟失败造成终端客户出现无法结账离场等故障。&lt;/p&gt;&lt;p&gt;整个消息链路已经能够很好地支撑我们的业务，同时 MQTT 和 RocketMQ 属于云产品，拥有大部分云原生产品的特性，在遇到节假日流量高峰期时，能够通过横向扩展支撑业务的扩张。&lt;/p&gt;&lt;p&gt;但是整个架构同样存在几个比较严重的痛点：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 原有的 MQTT + RocketMQ 的组合难以满足上万车场的吞吐量需求和低延迟需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 云端服务的可靠性为 99.99%，意味着每年会出现约50分钟的故障时间，在业务侧是无法接受的，很容易出现群体事件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 公司核心业务完全依赖具体的云服务商产品，后续可能出现多云业务、私有云业务、甚至迁移到其它云服务商的业务，如果其它云服务商没有对标的产品，那么会非常的被动。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 随着业务的发展，数据同步任务需求增加（DTS），加上数据入湖、数据中台的建设等因素，导致我们需要长期运营、维护多条消息链路的不同技术栈。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;5. 随着业务的扩展，云上产品使用量的增加，带来成本的剧增。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;从长远发展、降本增效等方面考虑，最终我们采取了全链路自建的方式，下面主要通过三个方面介绍我们在自建消息总线的过程中对 Apache Pulsar 的运用与实践。&lt;/p&gt;&lt;h1&gt;新一代架构：Apache Pulsar 实践&lt;/h1&gt;&lt;h2&gt;为什么选择 Apache Pulsar&lt;/h2&gt;&lt;p&gt;科拓停车在继续改进消息总线的过程中，对消息总线提出了“高吞吐、低延迟、高可用、易扩展、多租户、易管理和 MQTT 桥接”等要求，并基于此对 Apache Pulsar 进行压力测试。经过对比，Apache Pulsar 可以满足上述要求，且在管理、监控、报警方面有完善的工具链，能够降低运维压力。&lt;/p&gt;&lt;p&gt;在科拓的整个技术架构发展的过程中，我们希望通过使用 Apache Pulsar 来统一业务上的消息总线和数据同步链路中的消息中间件，在获得更高的性能、稳定性、可扩展性等的同时减轻整个团队的技术债务。&lt;/p&gt;&lt;p&gt;为什么选择 Apache Pulsar，主要有以下几个因素：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. Apache Pulsar 特性亮点&lt;/p&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1.1 云原生：符合我们整体技术规划，我们的业务很明确，白天流量高，深夜和凌晨流量低，对系统的弹性有需求；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1.2 存算分离，易于扩展；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1.3 多租户：便于各业务组之间通过租户进行隔离，同时能够支持大量 topic 的场景；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1.4 基于 Java，社区活跃度高。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;2. 自建 MQTT 的对标方案 EMQ 默认提供 Apache Pulsar 桥接功能，无需做二次开发。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 数据同步链路中的 Kafka 在某些方面不如 Pulsar，比如：Kafka 横向扩容时对性能的影响较大，topic 过多时性能受影响较大等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以下是 RocketMQ、Kafka、Pulsar 的对比情况：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;656&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1680327868852458&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIaksaLasbS7zXKRn1vMQeVG1BVLvtM7AMVZ7lqJ9VCY9U5jTqjWlFFQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/p&gt;&lt;h2&gt;3.0 - EMQ + Pulsar：自建业务消息链路&lt;/h2&gt;&lt;p&gt;要自建整个业务的消息链路，需处理 MQTT 和 RocketMQ。通过对相关技术的预研、比对，最后的消息链路架构如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;360&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6398148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIaXbNZoD778K8HygsGXjI2fxiczFPVemIjIOPze6N5BBM1IhXa6WLxSYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;在自建的过程中我们做了如下几件事情：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 用 EMQ 替换 MQTT，用 Pulsar 替换 RocketMQ；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 通过 EMQ 桥接功能实现将 EMQ 的消息推送到 Pulsar：桥接是 EMQ 产品内部的实现，通过在管理系统里面做相应的配置可以将 EMQ 中的消息转发到 Pulsar 中；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 通过自研的 Sink 程序实现 Pulsar 中的消息下发到 EMQ：Sink 程序是 Java 实现的，通过 Pulsar client 消费消息，再通过 MQTT 协议将消息转发到 EMQ。由于我们自建时 MoP（MQTT-on-Pulsar）尚未开源，并且自建系统一直很稳定，后续未对自建系统进行调整。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 所有需要使用到消息总线的线上业务系统统一使用 Pulsar。同前面提到的双通道公有云架构类似，核心的业务逻辑消息都是走双链路，其他业务方在使用时也会根据具体情况选择单链路或双链路。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Pulsar 作为数据同步链路核心组件&lt;/h2&gt;&lt;p&gt;我们基于 Canal 二次开发自建数据同步链路，总共有两个大的版本，V1.0 架构如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;312&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5537037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIanecCWwTicWyHoUqD9licbBfibDKW3iagscpbibXVJUjIibQANHmobEfpDNwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;在这个版本中对 Pulsar 的运用相对较少，而在 V2.0 核心系统的跨云数据同步中，我们对Canal、Canal-admin、Canal-adapter 都做了不少定制化开发和优化。V2.0 完全采用 Pulsar 作为消息中间件，同时我本人也是 Canal-1.1.6 版本中 Pulsar 集成的核心 Contributor。&lt;/p&gt;&lt;p&gt;V2.0 的架构和 V1.0 的类似，流程上是一致的，我们可以通过下面的一张图来简单看下Pulsar 替换 Kafka 后的具体应用细节以及所带来的好处，如图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;284&quot; data-backw=&quot;562&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5037037037037037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0EIbbCE3P2aln4o8uWQGK1hwlAkicytIal6F6ibCtfe3Py2HowO9BRr9Wh2vWZ5JWYmraTW1ChXp1KPmibbib4Rsibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 多分区：我们以前使用 Kafka 的时候使用单分区，当时没有深入研究。集成 Pulsar 后实现了根据配置自动创建自定义分区数的 topic；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2. 高可用：Canal-adapter 在消费 Pulsar 消息时采用的是 Failover（灾备）模式，在多分区场景下真正实现多个 adapter 的集群化，从而实现高可用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;3. 低延迟：实现了在有限的资源内跨云同步核心系统近百万张表的数据，数据延迟稳定在 2s 内，当然这期间对 Canal 也做了一定的优化；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;4. 采用 Pulsar Function 按车场 ID 进行分流，计算每个车场的流量等数据信息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;未来规划&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;1. 基于 K8s 实现弹性伸缩&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;针对公司白天流量高、凌晨流量低的业务场景，以及公司整体业务支持容器化部署的发展规划，我们最终会将 Pulsar 上K8s，和部分业务一样实现弹性伸缩。结合 Spark on K8s 的运用，能在流量低峰期为离线任务提供一定的计算资源，实现资源的最大化利用。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;2. DeltaStreamer 定制开发，支持 Pulsar 消息入湖&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;目前数据入湖（Hudi）整个消息链路还是使用的 Kafka，为了实现最终消息链路的统一，DeltaStreamer 需要定制化开发来支持 Pulsar。目前我们数据入湖同时使用 DeltaStreamer 和 Flink on Hudi，两种技术方案各有优缺：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;a. DeltaStreamer：稳定；数据延迟高，资源消耗大；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;b. Flink on Hudi：资源消耗较低；大表同步效果不好，数据延迟较低。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;3. 增强部分 Pulsar IO 的应用&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们基于 Canal 定制了可视化配置的数据同步，所以对 Pulsar Connector 运用相对较少。目前期待 Pulsar 入湖相关 connector 的开发进展。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;hr/&gt;&lt;h1&gt;相关阅读&lt;/h1&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;amp;mid=2247491587&amp;amp;idx=1&amp;amp;sn=f66f842e7525153aaaab7a9a53ae3ebf&amp;amp;chksm=f9c6fa34ceb173228bfa95abc6121e86794bbd9e6f59a2ff7c78eea1b484a64535083d0e2816&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;案例推荐｜千亿级、大规模：腾讯超大 Apache Pulsar 集群性能调优实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;案例推荐｜千亿级、大规模：腾讯超大 Apache Pulsar 集群性能调优实践&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;amp;mid=2247488029&amp;amp;idx=1&amp;amp;sn=dda52608006afe08f038bcb424243ea8&amp;amp;chksm=f9c5082aceb2813c3a3f85fbaddd84bb2d3851964f4d1d0765e2fabca9dda18897deb7f233c9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;最佳实践｜Apache Pulsar 在华为云物联网之旅&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;最佳实践｜Apache Pulsar 在华为云物联网之旅&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;• &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMjkzMjA1Ng==&amp;amp;mid=2247490423&amp;amp;idx=1&amp;amp;sn=a83d663a725a7afb4891a412a348133e&amp;amp;chksm=f9c50140ceb288569f6880aa1fcd63b43f937e6c2b2d5bcf89c9ba94098cbdcd2206f75483b4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;视频回顾｜Pulsar Summit Asia 2021，案例、运维、生态干货不断&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;视频回顾｜Pulsar Summit Asia 2021，案例、运维、生态干货不断&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc6e2a36cb5bf5ac98b0945f866b78b8</guid>
<title>爱奇艺海外版HTTPS效率是如何提升的？</title>
<link>https://toutiao.io/k/o3maqiq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;
作者 | 王伟峰&lt;/section&gt;&lt;section&gt;
策划 | 闫园园&lt;/section&gt;&lt;section&gt;
视频内容类的业务对延迟比较敏感，而在海外运营场景下，这种延迟敏感更为突出，爱奇艺海外版项目在初期技术要求就是秒开，除了 CDN、边缘节点的部署外，海外后端团更是对 HTTPS 的请求做过一系列的优化，现总结之前工作中的一些技术性探索和优化，分享给大家。&lt;/section&gt;&lt;section&gt;
&lt;span&gt;为什么要在移动端花费这么多精力？&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;因为移动端设备性质以及网络环境因素等，导致新链接、以及链接复用问题被放大。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4173441734417344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6Fn8vRibWorwMk8Ys2MFzFudEuN7aiaq9rgnr7eqfkVPSGUdlEkqOcwNGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1107&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;HTTPS 请求花费的时间？&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;一个全新的 HTTPS 链接，从发起请求到数据返回经过几个 RTT？&lt;/p&gt;&lt;p&gt;假设没有任何缓存，一个 HTTPS 请求得经过 10 个 RTT 才能返回内容。&lt;/p&gt;&lt;p&gt;一个 RTT 如果是 50ms，这个全新的请求至少花费 50*10=500ms。这还没有算后端业务处理的时间，可以看出 HTTPS 请求延迟确实比较高。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.8745644599303135&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6FjujHDl5EpSxJq77NW2FTxgXrrtic34jrflgW2Rxzu2SVUGbOfVErZuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;287&quot;/&gt;&lt;/p&gt;&lt;p&gt;通常情况下业务 HTTP 的延迟容忍度较差，Server To Client 的模式，效率总归是越高越好。&lt;/p&gt;&lt;p&gt;现实情况会有各种缓存，减少不必要的消耗，所以很少发生上面这种极端的 10 个 RTT 情况。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;DNS 有本地缓存或者用了 HTTPDNS 预解析，第 1 步可以省掉。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果浏览器声明了 HSTS ，可以省略 302 转向，第 3 步可以省掉。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果本地已经有主流的 CA DNS 缓存，第 6 步可以省掉&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果 CA 本地有验证缓存或者启用 OCSP Stapling 的本地验证，7、8 步可以省掉。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在有各类缓存情况下，一个常规的 HTTPS 请求会保留下面 4 个 RTT 流程。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8796992481203008&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6F2ypuIib3x5kAiboF9tISWTsWBib2Xv1e4PQyVCkd2kcBVSopXkk2382RA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;266&quot;/&gt;&lt;/p&gt;&lt;p&gt;除了 HTTPS 内容请求外，握手的阶段或者 TLS 层是否还可以再继续优化一下，让我们的 APP 或者视频播放再快那么一点？&lt;/p&gt;&lt;p&gt;答案：肯定是的！&lt;/p&gt;&lt;p&gt;之前一篇文章介绍过 HTTPS：通过非对称加密交换对称加密的参数，从而实现内容交换的安全性。&lt;/p&gt;&lt;p&gt;了解这一点，对于 HTTP 这种协议，我们可以从这几方面入手：提升加解密效率、减少内容传输量、链接复用...&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8058823529411765&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6FarjmSzfV1rAZicueZdz3tp9QE6ucBRoEcJH30ffFA1LaS6VRUKOwnkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;510&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;HTTPS 流程分析和优化的策略&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;使用 WireShark 抓包， 根据 TCP 包，我们画了下面流程图，一步步分析流程，并确定中间可优化的点&lt;span&gt;（TLS1.2 协议 ECDHE 算法）&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.068&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6Fw7XKJ16q1Uq5cLL2nmdZ1UBZXypKvorKeFb77BSM29O3IBEQxficrmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;整个流程有以下几个阶段：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;TLS Hello 确定协议版本、密码套件、对称密钥随机数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Server Certificate 服务器发送证书链。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Client/Server Key Exchange (DH 算法，协商交换加密算法)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ChangeCipher Spec 对称加密双向校验。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;
&lt;span&gt;TLS Hello 阶段的分析与应用&lt;/span&gt;&lt;/section&gt;&lt;p&gt;先看看 Client hello 的几个主要的参数：&lt;/p&gt;&lt;p&gt;Struct hello {&lt;/p&gt;&lt;p&gt; Version // TLS 版本号&lt;/p&gt;&lt;p&gt;  Random  // 客户端随机数&lt;/p&gt;&lt;p&gt; Session id  Cipher Suites // 客户端支持的加密套件&lt;/p&gt;&lt;p&gt; Extension: support version; // 扩展 TLS 版本支持&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;上面的抓包 Version 是 TLS1.2，扩展中带有 TLS1.3。如果服务端支持 1.3 ，将改为 1.3 协议。&lt;/p&gt;&lt;p&gt;服务端先要进行对应的支持配置，如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ssl_protocols&lt;/span&gt;  &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;TLSv1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.2&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;TLSv1&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;Cipher Suites 是个数组，会包含新旧一堆加密算法支持，优先级从上到下。&lt;/p&gt;&lt;p&gt;服务端 Server Hello 返回 Cipher Suite，根据 Client 的请求匹配一个合适的加密套件。如下服务器返回支持的套件。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;Cipher&lt;/span&gt; Suite: TLS_RSA_WITH_AES_256_GCM_SHA256&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;上面什么意思？&lt;/p&gt;&lt;p&gt;握手时对称加密参数交换使用 RSA。通信加密使用 256 位长度对称 AES 算法， GCM 和 SHA256 是 AES 的分组模式和摘要算法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这个阶段优化的几个思路：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;密钥交换算法改进：RSA 可以改为 DH 类算法 (Diffie-Hellman)，如 ECDHE。在同等复杂度下，计算效率更高，证书体积也更小。&lt;/p&gt;&lt;p&gt;优化 ECDHE 算法实现，优先选择效率最高的椭圆曲线实现 x25519。&lt;/p&gt;&lt;p&gt;在 Nginx 后台 使用 ssl_ecdh_curve 配置椭圆曲线优先级。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ssl_ecdh_curve&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;X25519&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:secp384r1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;同时 ECDHE 支持 False Start。&lt;/p&gt;&lt;p&gt;启用了 False Start，在 Client 发送完 ChangeCipher Spec 就可以发送加密的应用数据，减少 1 个 RTT 等待时间。&lt;/p&gt;&lt;p&gt;服务端配置 Cipher Suites 的优先级，把性能最高的算法放在前面。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;on&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_ciphers&lt;/span&gt; EECDH+ECDSA+AES128+SHA:RSA+AES128+SHA...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;尽管 AES 的效率很高，但在一些安全性没那么高的业务下，AES 密钥的长度可以小一些，256 位改为 128 位。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;Server Certificate 阶段&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;Certificate 阶段会将自身公钥和证书 CA 中间公钥发给客户端。本地验证证书合法后继续 Client Key Exchange 流程。&lt;/p&gt;&lt;p&gt;在这个阶段，有两个方向可以优化：证书传输 + 证书验证。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
证书传输&lt;/section&gt;&lt;p&gt;证书的大小当然越小越好，在生成证书阶段选择 ECDSA，而不是 RSA 证书，安全不变的条件下，密钥长度更小，运算量也更小。&lt;/p&gt;&lt;p&gt;比如用类似下面生成 ECDSA 证书：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;openssl ecparam -genkey -name prime256v1 -&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt; key.pem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
证书验证&lt;/section&gt;&lt;p&gt;客户端在验证证书时，会走证书链逐级验证，而且为了知道证书是否被 CA 吊销，客户端会访问 CA 下载 OCSP 数据，确认证书是否有效。&lt;/p&gt;&lt;p&gt;OCSP 需要向 CA 查询，因此也是要发生网络请求，如果 CA 服务器的延迟过大，会导致客户端在校验证书这一环节的延时变大。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
OCSP Stapling&lt;/section&gt;&lt;p&gt;为了解决证书有效性验证的问题，出现了 OCSP Stapling。&lt;/p&gt;&lt;p&gt;服务器向 CA 周期性地查询证书状态，获得一个带有时间戳和签名的响应并缓存，当客户端来请求证书，在 TLS 握手阶段，服务器将该结果给客户端。&lt;/p&gt;&lt;p&gt;因为结果带有 CA 私钥的签名，所有结果可信，客户端在本地就可以判断证书的有效性。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5897058823529412&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkUT5y6RvfDoOLib8icajtds6F7TeaHI0hTwWg5HFVcCv2HeXFwIyGCQymtmL8ZMv0NdNezV00zW9rDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;680&quot;/&gt;&lt;/p&gt;&lt;p&gt;在 Nginx 中开启 OCSP Stapling&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_stapling&lt;/span&gt;  &lt;span class=&quot;code-snippet__literal&quot;&gt;on&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_stapling_verify&lt;/span&gt;  &lt;span class=&quot;code-snippet__literal&quot;&gt;on&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_trusted_certificate&lt;/span&gt;    xx.pem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;使用以下命令测试服务器是否开启 ocsp staping&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;openssl&lt;/span&gt; s_client -connect ip:&lt;span class=&quot;code-snippet__number&quot;&gt;443&lt;/span&gt; -status&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;OCSP response: &lt;span class=&quot;code-snippet__literal&quot;&gt;no&lt;/span&gt; response sent //出现以下 则没配置&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;
&lt;span&gt;密钥交换和验证的阶段&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
Client/ServerKey Exchange 阶段&lt;/section&gt;&lt;p&gt;在这一阶段主要是交换 DH 加密公钥，如选定椭圆曲线，生成椭圆曲线公钥，公钥签名，与客户端的 Client  Key Exchange 呼应，最终获取对方的公钥，用来加密 AES 的密钥。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
加解密双方验证&lt;/section&gt;&lt;p&gt;Change Cipher Spec/Encrypted Handshake Message&lt;/p&gt;&lt;p&gt;在 Key Change 阶段，加密的参数均已生成，双方有了交换密钥的公钥，也有对称密钥的参数。可以进行数据传输了&lt;/p&gt;&lt;p&gt;如果双方都验证加密和解密没问题，那么握手正式完成。于是，就可以正常收发加密的 HTTP 请求和响应了。&lt;/p&gt;&lt;p&gt;以上两个阶段是否可以优化？&lt;/p&gt;&lt;p&gt;是的，我们可以采用链接复用的方式跳过该阶段&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
链接复用优化&lt;/section&gt;&lt;p&gt;复用有两个方式：SessionID 和 SessionTicket，实现不同但目标一致。（一个服务端实现，一个客户端实现）&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
SessionID&lt;/section&gt;&lt;p&gt;客户端和服务器首次 TLS 握手连接后，双方会在内存缓存会话密钥，并用唯一的 Session ID 来标识。&lt;/p&gt;&lt;p&gt;在下一次链接时，服务端可以知道一个进来的连接是否在之前已经建立过连接，如果在服务器中也存在这个 session 的 key，那么它就能重用。&lt;/p&gt;&lt;p&gt;在服务端开启 SessionID&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ssl_session_cache&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:SSL&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-pseudo&quot;&gt;:50m&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;ssl_session_timeout&lt;/span&gt; 1&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;d&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
SessionTicket&lt;/section&gt;&lt;p&gt;为了解决 Session ID 的问题，就出现了 Session Ticket，服务器不再缓存每个客户端的会话密钥，而是把缓存的工作交给了客户端，类似于 HTTP 的 Cookie。&lt;/p&gt;&lt;p&gt;客户端与服务器首次建立连接时，服务器会加密「会话密钥」作为 Ticket 发给客户端，交给客户端缓存该 Ticket。&lt;/p&gt;&lt;p&gt;客户端再次连接服务器时，客户端会发送 Ticket，服务器解密后就可以获取上一次的会话密钥，然后验证有效期，如果没问题，就可以恢复会话了。&lt;/p&gt;&lt;p&gt;在服务端开启 Session ticket&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_session_tickets&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;on&lt;/span&gt;;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ssl_session_ticket_key&lt;/span&gt; xx.key;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;用了链接重用技术，当再次重连 HTTPS 时，只需要 1 RTT 就可以恢复会话。对于 TLS1.3 使用 Pre-shared Key 重用技术，可以实现 0RTT 恢复链接。&lt;/p&gt;&lt;p&gt;采用链接重用，当然不可避免的产生重放攻击风险。&lt;/p&gt;&lt;p&gt;对于安全性要求非常高的业务要慎重的使用链接重用， 当然如果衡量好重用过期时间，同时业务端做好安全防范，获得的收益也不会小。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;结尾&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;从 HTTP/1.0 到 HTTP/2，HTTP 协议基础一直是可靠连接 TCP。TCP 的对头阻塞、握手流程等机制问题，导致无论如何优化，HTTP 延迟始终过高。&lt;/p&gt;&lt;p&gt;另外 TCP 协议作为互联网最为广泛应用的协议之一，涉及无数的中间设备、操作系统，协议僵化问题导致 IETF 标准化制定的许多 TCP 新特性难以执行。&lt;/p&gt;&lt;p&gt;所以下一阶段的 HTTP/3 完全放弃了 TCP，经历七年之久。从 QUIC 被提交给 IETF 进行标准化，QUIC 协议的 HTTP/3 在今年终于正式发布。&lt;/p&gt;&lt;p&gt;基于 QUIC 更能简单的实现 0-RTT,1-RTT 的连接建立，爱奇艺海外也早早开始尝试使用 QUIC 改善用户服务，后续技术团队也将基于数据分享我们使用 QUIC 的实践。&lt;/p&gt;&lt;p&gt;最后，不论阻碍如何，HTTP/3 的时代已经到来，让我们拭目以待。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;王伟峰爱奇艺研究员。曾负责爱奇艺海外移动端质量、海外运营系统设计和开发等工作。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9e78af62a31f7fc66c611f1f1283c898</guid>
<title>风控逻辑利器---规则引擎</title>
<link>https://toutiao.io/k/vaxsn33</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;前言&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;规则引擎的定义&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;规则引擎的执行&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;转转风控规则引擎&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;风控的职责是控制业务的风险。在识别风险过程中，要根据大量的用户行为和用户信息去做逻辑判断，最终给出决策结果。在决策过程中，大量的逻辑判断需要开发和维护，如果以传统的方式去开发和维护，需要付出巨大的时间成本并且隐藏着毁灭性的事故风险。所以将业务代码和复杂的逻辑代码剥离显得迫在眉睫。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;规则引擎的定义&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是规则引擎的组成部分：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3024630541871921&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWb2fsRAkPvrWPglR6ZRpxh16come6TAcIqQ7yhljxLoOp0Yax7SCwDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2030&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）特征集合：表示当前传入的数据(例如：用户对象zzuser)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）条件：逻辑判断&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）规则：对特征进行逻辑判断，得出结论&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4）规则集：多条规则组合成规则集&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规则引擎推理方式分为两种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正向链接推理：这是一种基于“数据驱动”的形式，基于用户的行为信息和基本信息，得出结论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反向链接推理：这是一种基于“目标驱动”的推理形式，与正向链接相反，以假设的结论出发，推断用户的哪些行为信息和基本信息符合假设的结论。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;规则引擎的执行&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规则引擎的执行方式分为解释执行、编译执行和自定义执行。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1394658753709199&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWXYYP5Coo9vHVxKUOoEPSyQh1BJodicnW9aRfQSfNYCLSZWR3IufqVYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2022&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11135693215339233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWVD33c4E7ib2EHxpyENZbxDrsGCOJibbd6tCew9BzlTdEyH2Licjh8I9Qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2712&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h2&gt;&lt;span/&gt;自定义执行&lt;/h2&gt;&lt;p&gt;早期在没有引入表达式引擎的时候，就是通过自定义实现的表达式解析。&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;p&gt;特征a、特征b、特征c  =&amp;gt; 求特征d&lt;/p&gt;&lt;p&gt;d = （a+b）/ c    这是一个简单的四则运算表达式。&lt;/p&gt;&lt;p&gt;这个表达式对于人的思维方式来说非常的简单，但是计算机识别起来就非常的困难。所以要将常规的表达式转换成计算机方便计算的表达式(逆波兰表达式)。&lt;/p&gt;&lt;p&gt;上面的表达式转换成逆波兰表达式为：ab+c/&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4603330068560235&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWuFwfCEpGXn706eOcoADvcibnv67Poz6h4ib1Flx531pxQdxfrORJKNUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2042&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这样计算机就可以比较简单的求出表达式的值。&lt;/p&gt;&lt;p&gt;逆波兰表达式的转换算法感兴趣的可以自行百度。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;转转风控规则引擎&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;转转风控规则引擎是一种正向链接推理的规则引擎，以数据为驱动，去推断相应的结论。比如说，业务要识别违禁品，可以根据图片模型分数大于0.9来推断出用户违规。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特   征： 模型分数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作符号： 大于&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阈   值： 0.9&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三部分构成了一个规则。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12027833001988071&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWG68CbwM4X3Mib68JKsKQgr9tDk651VOE1RcrPlVa0g5jiabO62qAV2Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2012&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;转转规则引擎分三个发展阶段：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;第一阶段：硬编码阶段，此阶段所有的规则都是通过代码写死的，维护性和扩展性极差。&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;第二阶段：规则引擎阶段，通过抽象业务，开发规则配置平台，可以非常方便的运营规则，增加了规则的机动性。&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;下图是规则运行的一个用例图：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4756277695716396&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGW1uVkDE5ej96VVjDhqWm04beD8CNc2JTAaAZ0zKh7yhQWicKN8u4FVlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2708&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;特征(按类型划分)&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;用户特征 ： 用户的昵称、年龄、注册时间等&lt;/p&gt;&lt;p&gt;商品特征 ： 商品内容、标题等&lt;/p&gt;&lt;p&gt;订单特征 ： 订单金额、订单的品类等&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;操作符号&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;规则引擎操作符：大于、小于、等于、敏感词匹配、用户标记等&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;结果&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;命中规则 或者 不命中规则&lt;/p&gt;&lt;p&gt;下图是实际的一个规则配置(商品的当前价格是否小于等于30000,价格单位：分)：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4850574712643678&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGW4gwqicUBfPvVlib3hy8AMTPnmTyAWpy8caicmoKGMCibVo9DFCEYsYLNLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;h3&gt;&lt;span/&gt;第三阶段：完善特征工程阶段，减少特征的开发上线。&lt;span/&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;表达式引擎的引入&lt;span/&gt;&lt;/h4&gt;&lt;h5&gt;&lt;span/&gt;1) 表达式引擎的选择&lt;span/&gt;&lt;/h5&gt;&lt;section&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;Aviator&lt;/th&gt;&lt;th&gt;Fel&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;执行速度&lt;/td&gt;&lt;td&gt;快&lt;/td&gt;&lt;td&gt;快&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;jar包的大小&lt;/td&gt;&lt;td&gt;70kB&lt;/td&gt;&lt;td&gt;200kB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;社区活跃度&lt;/td&gt;&lt;td&gt;非常活跃&lt;/td&gt;&lt;td&gt;一般&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;执行方式&lt;/td&gt;&lt;td&gt;动态编译/解释执行&lt;/td&gt;&lt;td&gt;动态编译/解释执行&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p&gt;两者性能差不多，最终选择了aviator，因为aviator社区活跃度和jar包大小要优于Fel。&lt;/p&gt;&lt;h5&gt;&lt;span/&gt;2) aviator表达式功能简介&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;(1) 支持绝大多数运算操作符，包括算术操作符、关系运算符、逻辑操作符、位运算符、正则匹配操作符(=~)、三元表达式(?:)&lt;/p&gt;&lt;p&gt;(2) 支持操作符优先级和括号强制设定优先级。&lt;/p&gt;&lt;p&gt;(3) 支持赋值。&lt;/p&gt;&lt;p&gt;(4) 逻辑运算符支持短路运算。&lt;/p&gt;&lt;p&gt;(5) 支持丰富类型，例如nil、整数和浮点数、字符串、正则表达式、日期、变量等，支持自动类型转换。&lt;/p&gt;&lt;p&gt;(6) 支持 lambda 匿名函数和闭包。&lt;/p&gt;&lt;p&gt;(7) 内置一套强大的常用函数库。&lt;/p&gt;&lt;p&gt;(8) 可自定义函数，易于扩展。&lt;/p&gt;&lt;p&gt;(9) 可重载操作符。&lt;/p&gt;&lt;p&gt;(10) 支持大数运算(BigInteger)和高精度运算(BigDecimal)。&lt;/p&gt;&lt;p&gt;(11) 小巧并性能优秀&lt;/p&gt;&lt;h5&gt;&lt;span/&gt;3) aviator表达式引擎在特征工程的实践&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;(1) 基本特征取值&lt;/p&gt;&lt;p&gt;比如说，订单价格特征(orderFeture.price)、商品标题特征(infoFeature.title)、用户昵称特征(userFeature.nickname)。（注:orderFeture,infoFeature,userFeature是系统中的一个实体对象）&lt;/p&gt;&lt;p&gt;(2) 特征的基本运算&lt;/p&gt;&lt;p&gt;比如说，已有手机分类商品数特征(infoFeature.phoneTotalCount)、全部商品总数特征(infoFeature.totalInfoCount)，想要一个手机商品数在商品总数中的占比特征，就可以直接通过四则运算获取到：long(infoFeature.phoneTotalCount)*100/long(infoFeature.totalInfoCount)&lt;/p&gt;&lt;p&gt;(3) 内置函数&lt;/p&gt;&lt;p&gt;aviator提供了大量的内置函数，可以通过它的内置函数获取想要的配置结果。比如说，商品标题长度特征string.length(infoFeature.title)，应用了求字符串长度的函数string.length。&lt;/p&gt;&lt;p&gt;(4) 自定义函数&lt;/p&gt;&lt;p&gt;aviator除了内置的函数，还支持自定义函数，可以根据需求自定义函数。比如说，想通过配置获取redis里的值，就可以开发一个获取redis的函数(函数名字是jodisFeature)。&lt;/p&gt;&lt;p&gt;jodisFeature(&#x27;price_median&#x27;, infoFeature.cateChildId)。这个特征配置就是为了获取redis key为price_median的值。特征的代表的含义是：分类价格的中位数，当然这些数据已经提前计算好存储在redis里面了。&lt;/p&gt;&lt;p&gt;(5)  Lambda表达式&lt;/p&gt;&lt;p&gt;个人感觉Lambda表达式的引入是一个质的飞跃，这样就可以操作集合，只要有源数据，就可以转换出任何想要的特征。比如说，已有订单流水list(orderFeature.orderFlow)，通过lambda表达式就可以转换成特征(发货时间到确认收货时间)：seq.get(map(filter(orderFeature.orderFlow,lambda(x)-&amp;gt;(x.status==5)end),lambda(y)-&amp;gt;y.latestOpTime end),0)- order.deliverTime。总之，表达式引擎还有各种各样的玩法，感兴趣的可以自行尝试。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;h4&gt;&lt;span/&gt;特征数据源&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;引入表达式引擎之后，可以通过各种函数转换获取想要的特征，特征的转换依赖数据源。由于数据源的获取需要开发上线，给特征配置化带来极大的不便。因此，数据源的获取成了特征配置的瓶颈。数据源哪里来呢？两种方式：一种是业务请求携带的参数数据，另一种是调用服务方获取的数据。第一种对应的解决方案是特征映射，第二种对应的解决方案是接口调用配置化。&lt;/p&gt;&lt;h5&gt;&lt;span/&gt;1） 特征映射&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;特征映射是为了将业务方的参数转换成需要的特征。业务方通过两种方式调用，一种是同步调用，另一种是异步调用(异步调用采用的是消息队列的形式)。为了将业务的数据源统一收拢，跟业务约定将参数放到map里面，规则需要什么数据就可以通过map去获取。为了方便特征配置，开发了一个获取业务参数的自定义函数(函数名：paramget)。例子：paramget(&#x27;uid&#x27;)代表的意思就是获取用户的uid。&lt;/p&gt;&lt;p&gt;在实际开发过程中，MQ异步调用的方式遇到了一些困难。由于各个业务系统的MQ消息体字段名称不一致，导致配置兼容比较多。比如说，同样都是uid的特征，有的业务MQ中用uid字段表示，有的用userId字段表示。为了控制字段兼容对规则的侵入性，在MQ消息和风控特征数据源之间做了一层映射，这层映射解决了字段对应偏差的问题。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8356164383561644&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWelVUiavrSwCicuqNIj887aQFoMbWkiaCXCn1ibNsM4dNOH47n97DGmBlibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1314&quot;/&gt;&lt;/figure&gt;&lt;h5&gt;&lt;span/&gt;2） 接口调用配置化&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;接口调用配置化是为了解决风控调用业务获取数据源的问题，每个接口只要传入相应的参数，就会返回相应的结果。这个问题可以抽象概括，只需要根据不同的业务方配置不同的参数，就可以获取相应的数据源。比如说，我们新接入一个zzuser的接口，通过配置表就可以获取用户unionid(微信id)关联的账户数。下图是配置表的信息：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0093240093240092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dHUzltsJpQt19icDMAhHhhia8ZPjAWQWGWFbBxkrS859rVXI4gFEntOyephINqVevhxIFmlzWibs56b7fMDPA71oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;858&quot;/&gt;&lt;/figure&gt;&lt;p&gt;配置表里包含：服务名、类的全限定名、接口名、接口参数、接口参数值&lt;/p&gt;&lt;p&gt;返回结果：{&quot;code&quot;:0,&quot;body&quot;:3}&lt;/p&gt;&lt;p&gt;图中表达式中，13代表了配置表的id=13，commonfeature函数获取getCountByUnionId接口的返回信息({&quot;code&quot;:0,&quot;body&quot;:3})，jsongain函数获取json数据中key是“body“的信息 3。&lt;/p&gt;&lt;p&gt;由于服务间的通信是rpc调用的，要实现服务间通用的规则调用需要底层的支持。正好，架构部提供了服务的泛化调用，完美地解决了通用的调用问题。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文介绍了规则引擎的定义和执行方式，并且详细介绍了规则引擎在风控的落地。利用规则引擎辅助风控控制业务风险，实现业务数据源可配置、风控逻辑可配置，极大的降低了开发规则和维护规则的成本。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>