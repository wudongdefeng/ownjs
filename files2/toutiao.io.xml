<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>81bb4c646ef7b92af0af3a65e7dd85a2</guid>
<title>Spring 如何解决循环依赖问题？</title>
<link>https://toutiao.io/k/uyax3pb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-weui-theme=&quot;light&quot; data-id=&quot;Mzg4NjYyODc4OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/J4jTHmo8Xh6qM32ASOtVbXNoiaegrI26qLRw6r6FTI7dZw6TMT7vecvnjd1O8xSsM5MiajIuQZicxSC6KFK8TMpbg/0?wx_fmt=png&quot; data-nickname=&quot;java突击队&quot; data-alias=&quot;&quot; data-signature=&quot;技术经验分享&quot; data-from=&quot;0&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是楼仔！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Spring 如何解决循环依赖，网上的资料很多，但是感觉写得好的极少，特别是源码解读方面，我就自己单独出一篇，&lt;/span&gt;&lt;strong&gt;这篇文章绝对肝！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不 BB，上文章目录。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6021409455842998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO1bBHac1mGCxEHO35Xv8HLlc7wTQ7TJQJgFgP3sTkgUOmZjNYfbXQqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1121&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 基础知识&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 什么是循环依赖 ？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个或多个对象之间存在直接或间接的依赖关系，这种依赖关系构成一个环形调用，有下面 3 种方式。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3935309973045822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOCUk9DAyeeice7mC1Az8NHOCX2Hic3AcYZZEd4ZmjeTNhzH5Rd6lv02yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;742&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看一个简单的 Demo，对标“情况 2”。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Louzai1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Louzai2 louzai2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Louzai2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Louzai1 louzai1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个经典的循环依赖，它能正常运行，后面我们会通过源码的角度，解读整体的执行流程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 三级缓存&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解读源码流程之前，spring 内部的三级缓存逻辑必须了解，要不然后面看代码会蒙圈。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;第一级缓存&lt;/strong&gt;：singletonObjects，用于保存实例化、注入、初始化完成的 bean 实例；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;第二级缓存&lt;/strong&gt;：earlySingletonObjects，用于保存实例化完成的 bean 实例；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;第三级缓存&lt;/strong&gt;：singletonFactories，用于保存 bean 创建工厂，以便后面有机会创建代理对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是最核心，我们直接上源码：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6916354556803995&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOvk3AiaCDWY8JN7rwGJvRQ8HMpOo41J3ibJbaRGB3105qyeQNmAzcLSyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行逻辑：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;先从“第一级缓存”找对象，有就返回，没有就找“二级缓存”；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;找“二级缓存”，有就返回，没有就找“三级缓存”；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;找“三级缓存”，找到了，就获取对象，放到“二级缓存”，从“三级缓存”移除。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3 原理执行流程&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把“情况 2”执行的流程分解为下面 3 步，是不是和“套娃”很像 ？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5404624277456648&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOQZgjQPEQ1hwh03fiaibvicukAp8QiaAj2ofz9uOsWFmRd1SZ9YayrkCnWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个执行逻辑如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在第一层中，先去获取 A 的 Bean，发现没有就准备去创建一个，然后将 A 的代理工厂放入“三级缓存”（&lt;strong&gt;这个 A 其实是一个半成品，还没有对里面的属性进行注入&lt;/strong&gt;），但是 A 依赖 B 的创建，就必须先去创建 B；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在第二层中，准备创建 B，发现 B 又依赖 A，需要先去创建 A；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在第三层中，去创建 A，因为第一层已经创建了 A 的代理工厂，&lt;strong&gt;直接从“三级缓存”中拿到 A 的代理工厂，获取 A 的代理对象，放入“二级缓存”&lt;/strong&gt;，并清除“三级缓存”；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回到第二层，现在有了 A 的代理对象，对 A 的依赖完美解决（&lt;strong&gt;这里的 A 仍然是个半成品&lt;/strong&gt;），B 初始化成功；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回到第一层，现在 B 初始化成功，完成 A 对象的属性注入，然后再填充 A 的其它属性，以及 A 的其它步骤（包括 AOP），完成对 A 完整的初始化功能（&lt;strong&gt;这里的 A 才是完整的 Bean&lt;/strong&gt;）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;将 A 放入“一级缓存”。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么要用 3 级缓存 ？我们先看源码执行流程，后面我会给出答案。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 源码解读&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：Spring 的版本是 &lt;strong&gt;5.2.15.RELEASE&lt;/strong&gt;，否则和我的代码不一样！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的知识，网上其实都有，下面才是我们的重头戏，让你跟着楼仔，走一遍代码流程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 代码入口&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0429594272076372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOoCr5rjzaficibg7TicZ1gm8b8kR8u4HJyB1ABRtmH0icbbnqCslxZtIQYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7092651757188498&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOribwkzRb9Zyy8XicicyPHJlSO1AGaFLdSYmiaDD9k9WXo6m5WibWcDKl7jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;939&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要多跑几次，把前面的 beanName 跳过去，只看 louzai1。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9205103042198234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOicWQQQckoiaDnu2xBtLe2XMnQwslx2sstS18OiczfP6UiaNic3ib1LFmkv1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11724137931034483&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOlLXkAbQickHqSevBt03Jtud05gCtpvPS9mesicCTwmz0j8qJT97yibacw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 第一层&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2490118577075099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNODOytdibzgpUXNpSMDXp9iazlqwDMaqicxrCT315miajFsApWmtIiaDSX1KQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 doGetBean()，从 getSingleton() 没有找到对象，进入创建 Bean 的逻辑。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.38477580813347234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOLSwPYmzD0ic1I33ZPISBUm9aXDPWklLP1nibLAFoS3ZsoE61NcGF81TQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;959&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0844390832328106&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOhCia75vp68b1syrIF5KggFicotRqV9YWEjgTo7EwoLE1k4WRs1PjLkew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;829&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 doCreateBean() 后，调用 addSingletonFactory()。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0824622531939605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9tx6jk4cLlTibhiax6dB67cQkArxyzspw3Wq12yvwORzP8jicB0sPC7rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;往三级缓存 singletonFactories 塞入 louzai1 的工厂对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.478584729981378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOY35CnbLdL7p2QmoyUcc0RTljdc5XUSHCc89UDibjah7Gmn3nSwlmDsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5518814139110604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO4RibGWBk6C4KO5f61Bhm1F1ZwHjL4M9FtSs9shEneCib8IftiaibkbQQKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入到 populateBean()，执行 postProcessProperties()，这里是一个策略模式，找到下图的策略对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.409250175192712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOFYpibXKiawoibkYFH7QLUWs51elYkPA013efmDTj8AbvrIic96VldrM7Iw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1427&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式进入该策略对应的方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.554932735426009&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOibX5MOdF9p8Nhk2Eq0e3hd5OIMbSUIZ0RglMKiaibxI37SoaymamqlPtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面都是为了获取 louzai1 的成员对象，然后进行注入。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2819593787335723&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOl9A6NV70She9icl5WZqsvtiblAw2ZdqZCrNGHwdd1a8ZT2Iv54rx1FnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;837&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6040868454661558&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOPS5wsCT5BP1XibqAugQynytiaic0Zng5fRjHFLoVxtbBe66ZkZx4W0xew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;783&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34579439252336447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO7YhbX6SlqCU6KyaZLdQlwc7GY4SKyR6U9SEvia6L0HsptIOVquwZqrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;963&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOSwmZegYMEzicxpGw5ZgkVW8vWOTAokbgWNK2ZpfXagZfc7tsMSsGDYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入 doResolveDependency()，找到 louzai1 依赖的对象名 louzai2&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24548049476688868&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNON6wldlCCdf6AaTXcDbcsSiaGOZDxGibp1gNEWVjpZBrJvso1PDfPv3bg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要获取 louzai2 的 bean，是 AbstractBeanFactory 的方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.34022988505747126&quot; data-type=&quot;png&quot; data-w=&quot;870&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9yW8MRkae4lQqnZLjnWnJ6AA1dbh6BoMFrEx1licVHA1RibMic8eggP4w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式获取 louzai2 的 bean。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1444723618090452&quot; data-type=&quot;png&quot; data-w=&quot;796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOqtv8E8CX8O4MB830hMoSK2YqvIYI7wDlsdYxic7jsnyPnooSn6JebhA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;到这里，第一层套娃基本结束，因为 louzai1 依赖 louzai2，下面我们进入第二层套娃。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 第二层&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09919839679358718&quot; data-type=&quot;png&quot; data-w=&quot;998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOpfvYbyxOvVlwvzxv94CtniaQzibXLK1G7HfM3PcPygUr3RgkXdKE2h0g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取 louzai2 的 bean，从 doGetBean()，到 doResolveDependency()，和第一层的逻辑完全一样，找到 louzai2 依赖的对象名 louzai1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面的流程全部省略，直接到 doResolveDependency()。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5810945273631841&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOvKMaqFvSKo0qahT78icU1Uf4T70F54bRqk7hdqhorqW6r6efibwkwqHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1005&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式获取 louzai1 的 bean。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3952772073921971&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO13vQDjUKscx8Rg7wExCQN0m7ic298kfXXg4grLoia0BfhHjgS7SMiadeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;到这里，第二层套娃结束，因为 louzai2 依赖 louzai1，所以我们进入第三层套娃。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 第三层&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1619631901840491&quot; data-type=&quot;png&quot; data-w=&quot;815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOI01icQAGFZWCibO1fFRz9ta32icwObTp0EkJiaVYuXCgm6G10OzK5nyibWQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取 louzai1 的 bean，在第一层和第二层中，我们每次都会从 getSingleton() 获取对象，但是由于之前没有初始化 louzai1 和 louzai2 的三级缓存，所以获取对象为空。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35911602209944754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOiah5c2Z1hjtHoibMeFJXM37cuf7tHOnfjblJQwU1OPKc0yicBW7fibtHrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;905&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15081967213114755&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOxKSlncPw1azxuls349583gZsC1L88jTcE6sDpia4eCIyNOYF2N9RFbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;敲重点！敲重点！！敲重点！！！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到了第三层，由于第三级缓存有 louzai1 数据，这里使用三级缓存中的工厂，为 louzai1 创建一个代理对象，塞入二级缓存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7829145728643216&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOZZNM1sBrrH0juatDb5IQfYUHicgsuJV7SYxCWia9AskoQ0Kkw4CgNhuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;995&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就拿到了 louzai1 的代理对象，解决了 louzai2 的依赖关系，返回到第二层。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.5 返回第二层&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回第二层后，louzai2 初始化结束，这里就结束了么？二级缓存的数据，啥时候会给到一级呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;甭着急，看这里，还记得在 doGetBean() 中，我们会通过 createBean() 创建一个 louzai2 的 bean，当 louzai2 的 bean 创建成功后，我们会执行 getSingleton()，它会对 louzai2 的结果进行处理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33444816053511706&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOW1eibGicxv7f0ThvM1hXdp0GeMA0BaY5KCRZIZZQr0F7LxJJdmZ0GWcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;897&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们进入 getSingleton()，会看到下面这个方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3785140562248996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOIDF4icrhq4Iao8gQJrDfeIHz0MNjUBS7ZAEPZjl1CH9dloYX56pr5JA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就是处理 louzai2 的 一、二级缓存的逻辑，将二级缓存清除，放入一级缓存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.368006993006993&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOpT8PriaWibiaAdPP5ODaO47FM3cVyfL8NWvSSs1dQAnfnSuKMa6sKxllg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1144&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.6 返回第一层&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同 2.5，louzai1 初始化完毕后，会把 louzai1 的二级缓存清除，将对象放入一级缓存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3647912885662432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO0RMJoTP25eOrA3r2FRKnJib0jtTTAglW2ibFTGygD0QgExl3zNFbDiaOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，所有的流程结束，我们返回 louzai1 对象。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 原理深度解读&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 什么要有 3 级缓存 ？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一道非常经典的面试题，前面已经告诉大家详细的执行流程，包括源码解读，但是没有告诉大家为什么要用 3 级缓存？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这里是重点！敲黑板！！！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先说“一级缓存”的作用，变量命名为 singletonObjects，结构是 Map&amp;lt;String, Object&amp;gt;，它就是一个单例池，将初始化好的对象放到里面，给其它线程使用，&lt;strong&gt;如果没有第一级缓存，程序不能保证 Spring 的单例属性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“二级缓存”先放放，我们直接看“三级缓存”的作用，变量命名为 singletonFactories，结构是 Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt;，Map 的 Value 是一个对象的代理工厂，所以“三级缓存”的作用，其实就是用来存放对象的代理工厂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那这个对象的代理工厂有什么作用呢，我先给出答案，&lt;strong&gt;它的主要作用是存放半成品的单例 Bean，目的是为了“打破循环”&lt;/strong&gt;，可能大家还是不太懂，这里我再稍微解释一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们回到文章开头的例子，创建 A 对象时，会把实例化的 A 对象存入“三级缓存”，这个 A 其实是个半成品，因为没有完成 A 的依赖属性 B 的注入，所以后面当初始化 B 时，B 又要去找 A，这时就需要从“三级缓存”中拿到这个半成品的 A（这里描述，其实也不完全准确，因为不是直接拿，为了让大家好理解，我就先这样描述），打破循环。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我再问一个问题，&lt;strong&gt;为什么“三级缓存”不直接存半成品的 A，而是要存一个代理工厂呢 ？答案是因为 AOP。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在解释这个问题前，我们看一下这个代理工厂的源码，让大家有一个更清晰的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接找到创建 A 对象时，把实例化的 A 对象存入“三级缓存”的代码，直接用前面的两幅截图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0824622531939605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNO9tx6jk4cLlTibhiax6dB67cQkArxyzspw3Wq12yvwORzP8jicB0sPC7rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.478584729981378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOY35CnbLdL7p2QmoyUcc0RTljdc5XUSHCc89UDibjah7Gmn3nSwlmDsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们主要看这个对象工厂是如何得到的，进入 getEarlyBeanReference() 方法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30063291139240506&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOxq2eMicDbZibKcXTChXZOT8BB0gS32m6yhhehKzhI3oESHLYOfFhu4RA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;948&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2850194552529183&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNObvFJr4iaatfQ3dmG85qHfpGSTnBE0XCBiaxZ1Htakl1QDwR403SAicdJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14558979808714134&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOr1aMYsBoBib2qzI9uhhtvvjAey7P63KhOdqSelcRhlqgLiaMITJaGqAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;941&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6501079913606912&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLHqKibakH9hO9wuncU5q2bNOCN3LKbGzmQqWaQ5Oj3bbsIsHXfiankZkBKYcyozYgicOmcWJia8q2paiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;926&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后一幅图太重要了，我们知道这个对象工厂的作用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果 A 有 AOP，就创建一个代理对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 A 没有 AOP，就返回原对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那“二级缓存”的作用就清楚了，就是用来存放对象工厂生成的对象，这个对象可能是原对象，也可能是个代理对象。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我再问一个问题，为什么要这样设计呢？把二级缓存干掉不行么 ？我们继续往下看。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 能干掉第 2 级缓存么 ？&lt;/h1&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; B b;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; C c;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;B&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; A a;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;C&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; A a;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test3&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的套娃逻辑，A 需要找 B 和 C，但是 B 需要找 A，C 也需要找 A。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;假如 A 需要进行 AOP&lt;/strong&gt;，因为代理对象每次都是生成不同的对象，如果干掉第二级缓存，只有第一、三级缓存：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;B 找到 A 时，直接通过三级缓存的工厂的代理对象，生成对象 A1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C 找到 A 时，直接通过三级缓存的工厂的代理对象，生成对象 A2。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到问题没？&lt;strong&gt;你通过 A 的工厂的代理对象，生成了两个不同的对象 A1 和 A2&lt;/strong&gt;，所以为了避免这种问题的出现，我们搞个二级缓存，把 A1 存下来，下次再获取时，直接从二级缓存获取，无需再生成新的代理对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;所以“二级缓存”的目的是为了避免因为 AOP 创建多个对象，其中存储的是半成品的 AOP 的单例 bean。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没有 AOP 的话，我们其实只要 1、3 级缓存，就可以满足要求。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 写在最后&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再回顾一下 3 级缓存的作用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;一级缓存：&lt;strong&gt;为“Spring 的单例属性”而生&lt;/strong&gt;，就是个单例池，用来存放已经初始化完成的单例 Bean；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;二级缓存：&lt;strong&gt;为“解决 AOP”而生&lt;/strong&gt;，存放的是半成品的 AOP 的单例 Bean；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;三级缓存：&lt;strong&gt;为“打破循环”而生&lt;/strong&gt;，存放的是生成半成品单例 Bean 的工厂方法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你能理解上面我说的三条，恭喜你，你对 Spring 的循环依赖理解得非常透彻！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于循环依赖的知识，其实还有，因为篇幅原因，我就不再写了，&lt;strong&gt;这篇文章的重点，一方面是告诉大家循环依赖的核心原理，另一方面是让大家自己去 debug 代码&lt;/strong&gt;，跑跑流程，挺有意思的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里也简单说一下我看源码的心得：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;需要掌握基本的设计模式；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;看源码前，最好能找一些理论知识先看看；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;学会读英文注释，不会的话就百度翻译；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;debug 时，&lt;strong&gt;要克制自己，不要陷入无用的细节&lt;/strong&gt;，这个最重要。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中最难的是第 4 步，因为很多同学看 Spring 源码，每看一个方法，就想多研究研究，这样很容易被绕进去了，这个&lt;strong&gt;要学会克制，有大局观，并能分辨哪里是核心逻辑&lt;/strong&gt;，至于如何分辨，可以在网上先找些资料，如果没有的话，就只能多看代码了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天的源码解析就到这，Spring 相关的源码，还有哪些是大家想学习的呢，可以给楼仔留言。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近苏三的知识星球&lt;span&gt;【&lt;/span&gt;&lt;strong&gt;Java突击队&lt;/strong&gt;&lt;span&gt;】&lt;/span&gt;，每天都会更新很多干货内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;很多独家的干货内容，比如：Java后端学习路线，分享实战项目，源码分析，百万级系统设计，系统上线的一些坑，MQ专题，真实面试题，每天都会回答大家提出的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这几天星球开通了3个优质专栏：痛点问题、高频面试题 和 性能优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一个专栏都是大家非常关心，和非常有价值的话题，我相信在专栏中你会学到很多东西，值回票价。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7395498392282959&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5iaPxc765sjP7TcEYkDRJbLiaEIzibSG6n0w5wcoZichIW3qRndfp7PuKMpM3d5JLAllZmqCNa3tqEtrw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;622&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.7615894039735098&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5iaPxc765sjP7TcEYkDRJbLiaSEibZt9Z2nAeibNxed5wISI48LtfSWWHf3K6wKXmF3Q4l3YLkjTyAanw/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;604&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1194539249146758&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5iaPxc765sjP7TcEYkDRJbLia8dck1h5FMgUaabq86Nbz8m3Rln43Jad9VsfGnnbxNmj2TicbOqNnO0g/640?wx_fmt=png&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;586&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我最近申请了新的一批优惠券，目前还剩十几张，估计今天就会抢完，需要加入星球的小伙伴，直接扫码即可。（快，快，快）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.215625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibJZVicC7nz5iaPxc765sjP7TcEYkDRJbLiaibyx8vKqwfBQbWPhGNjJwczTvDvgmBwBzILj3WiaNPkibibeLCS9eERibAA/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d8f2c021e5b588e50e62a235fbb6fb7d</guid>
<title>八万字《高并发的哲学原理》第四章：隐藏在语言背后的魔鬼——运行架构为何会成为性能瓶颈</title>
<link>https://toutiao.io/k/xlmc73o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;本文共 4200 字，阅读大约需要 14 分钟。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;编程语言的性能差异是程序员社区经久不衰的话题，但当你对各种技术的了解越深入，就越能感受到各种语言的本质区别：不同语言的设计方向不同，就像时间换空间、空间换时间，他们只是选择了一种优势找信息之神换成了另一种优势罢了。&lt;/section&gt;&lt;p&gt;没有任何编程语言是单纯的“语法集合”，每一种语言都是它背后“运行架构”的体现，语言之间的差异本质上就运行架构设计方向的差异。&lt;/p&gt;&lt;h2&gt;web 系统规模发展史&lt;/h2&gt;&lt;p&gt;web 1.0 时代，各种静态、动态、解释型、编译型、虚拟机型语言百花齐放，因为当时系统规模和系统用户都比较少，而资源则大多以静态 HTML 页面的形式显示，技术上大家都熟悉哪个用哪个，这些后端技术也大多能满足需求。&lt;/p&gt;&lt;p&gt;web 2.0 时代，真正的高并发系统出现了，一分钟内需要写入数据的用户数超过了百万，这个时代，最终锤炼出了 Java 和 PHP 两种技术：PHP 擅长简单 CURD，而 Java 擅长事务处理（例如电商下单）。这个时代发展到顶峰，就是手机 APP 和大前端的时代：界面由前端完全掌控，后端团队提供稳定高性能的 API 即可。&lt;/p&gt;&lt;p&gt;在 web 生态发展的过程中，也催生出了如 Python、Ruby、Scala、Node.js 这样的后端技术之花，但他们在冲向顶峰后也迅速落幕，现在连 PHP 也在逐步退场，只有 Java 由于拥有完善的微服务基础设施，暂时看起来还安全。&lt;/p&gt;&lt;p&gt;web 2.0 后期，乔布斯将人类拉入了移动互联网时代。今天的互联网巨头们，同时在线用户量动辄上亿，对系统性能的需求发生了爆炸性的增长，也催生出了 PHP 的接班人：go 语言。十多年前我第一次写 go 的时候就认识到，它就是 C with net，自带网络库的万能底层语言，可以让普通开发者轻松写出超高性能的应用。&lt;/p&gt;&lt;h3&gt;语言特性如何决定性能&lt;/h3&gt;&lt;p&gt;PHP 语言是一种单线程全阻塞语言：在每个 HTTP/FastCGI 请求中，PHP 解释器会启动一个 进程/线程 来运行一段 PHP 代码，在运行的时候，无论是读写磁盘（磁盘 IO）还是读写数据库（网络 IO），PHP 线程都会&lt;code&gt;停下来等待&lt;/code&gt;：此时并不消耗 CPU 资源，但是 TCP 和线程资源都还在持续等待，如果这个请求不结束，那该线程将会一直保持运行，持续消耗着 TCP 和内存资源。&lt;/p&gt;&lt;p&gt;由于语言本身的运行架构一致，所以 php-fpm 和 Apache 执行 PHP 的性能是一致的。在 2 vCore 4G 内存的情况下，PHP 200QPS 的性能极限是无法通过把 Apache 换成 php-fpm 来解决的。&lt;/p&gt;&lt;p&gt;那么阻塞式运行架构的性能瓶颈应该怎么突破呢？轮到 Node.js 登场了。&lt;/p&gt;&lt;h3&gt;Node.js 的非阻塞 IO&lt;/h3&gt;&lt;p&gt;在阻塞式语言中，所有的 IO 操作都是需要停下来等待的，例如磁盘 IO，数据库网络 IO 等，而真正用于计算的 CPU 资源反而大多数时候在浪费：绝大多数 API 不需要多少复杂的数据转换，更多的时间花在了和各种数据库的通信上。而世界上绝大多数语言都是阻塞式运行的，因为这样做虽然性能不高，但却最符合人类大脑的习惯，编码也更加容易。在当时，高性能大多是用多核+多进程/线程来实现的。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ryan Dahl&lt;/code&gt; 敏锐地发现了 IO 浪费时间这个问题，并且挑选了一个为浏览器创造的单线程语言 JavaScript 来实现他的抱负：将所有 IO 操作全部异步化，并利用 js 的单线程排队特性，创造了一种高性能且稳定的后端技术：Node.js。&lt;/p&gt;&lt;p&gt;不过，计算机的世界没有银弹，Node.js 虽然性能强，但是代码编写起来更加困难，需要多付出一些异步编程的思考时间，debug 也更加地困难。&lt;/p&gt;&lt;p&gt;Node.js 是一种非常神奇的单线程异步非阻塞架构，以 Google v8 引擎作为 JavaScript 解释器，利用事件驱动技术，大幅提升了单机能够处理的 QPS 极限，而它“只是完整利用了单核 CPU”而已。&lt;/p&gt;&lt;p&gt;此外，Node.js 还具备一个 Nginx 的优势：可以单机处理海量用户的 TCP 连接。&lt;/p&gt;&lt;p&gt;你看，背后的哲学原理都连上了吧。&lt;/p&gt;&lt;p&gt;Node.js 可以完整利用单核 CPU 了，那现在的服务器 CPU 已经做到了单颗 96 核 192 线程，该如何利用这么多的 CPU 核心呢？该 golang 登场了。&lt;/p&gt;&lt;h3&gt;go 语言的协程&lt;/h3&gt;&lt;p&gt;为了更好地“直接利用全部 CPU”，Java 诞生了线程池技术，至今还在发光发热；而 golang 选择釜底抽薪：在语言层面打造一个完善的“超并发”工具：goroutine（协程）。&lt;/p&gt;&lt;p&gt;我之所以将 goroutine 称为“超并发”工具，是因为它是语言提供的一个 线程池+协程 的综合解决方案，并使用 channel 管道思想来传递数据，为使用者提供了一个无需手动管理的高性能并发控制 runtime，可以保证完全榨干每一个 CPU 时间片。&lt;/p&gt;&lt;p&gt;golang 的协程本质上来讲就是 &lt;code&gt;在一个线程内不断地 goto&lt;/code&gt;，就像 DPDK 完全在用户态运行由于避免了上下文切换而大幅提升了网络性能一样，golang 在线程内主动 goto 也可以轻松将 CPU 利用率顶到 100%，实现硬件资源利用的最大化。&lt;/p&gt;&lt;p&gt;当然，&lt;code&gt;不断地 goto&lt;/code&gt;只是一种形象的类比方法，实际上 golang 的协程技术经历了好几次迭代，具体实现大家可以看灯塔 draveness 的书：《Go 语言设计与实现》¹。&lt;/p&gt;&lt;p&gt;实际上“吃完多核服务器上的每一个 CPU 核心”也是各种新形态 MySQL 兼容数据库的主要价值，这个我们在倒数第二篇文章讨论数据库架构时会进行详细分析。&lt;/p&gt;&lt;h4&gt;goroutine 的弱点&lt;/h4&gt;&lt;p&gt;就像性能优化的核心是空间换时间、时间换空间一样，goroutine 也不是银弹，也是牺牲了一些东西的。根据我的实践，这个东西就是“极其昂贵的内存同步开销”，而且 goroutine 引发的这个问题比 Java 的线程池内存同步问题严重的多。&lt;/p&gt;&lt;p&gt;一旦你想在单个 golang 进程内部的海量协程之间做“数据同步”，那你面临的就不只是 CPU 资源浪费那么简单了，你会发现，CPU 依然吃完了，但是并发量还是好低：多线程的内存同步开销已经摧毁了无数根 Java 程序员的头发，goroutine &lt;code&gt;线程 * 协程&lt;/code&gt; 的内存同步性能堪称灾难:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6669921875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qehPQXlzsA0Wne5kN5NnksBHL8oT5P44SH8S8s1KpEh8UmUDziaOHf8GHD860kcoedIYoRoaK5z4ia1kAex48nJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;code&gt;sync.Map&lt;/code&gt;受害者请高举你们的双手！&lt;/center&gt;&lt;p&gt;那如果我们需要在海量协程之间做实时数据同步该怎么办呢？这个时候，高并发哲学思维又要出动了：找出单点，进行拆分！&lt;/p&gt;&lt;p&gt;等等，好像除了唯一的这个 golang 进程找不出单点啊？&lt;/p&gt;&lt;p&gt;没错，这个唯一进程申请的这段内存就是单点，想解决这个问题需要出大招：找外援。&lt;/p&gt;&lt;h4&gt;Redis 是 golang 协程最亲密的伙伴，就像 MySQL 之于 PHP&lt;/h4&gt;&lt;p&gt;网络栈是一种贯彻了 linux 一切皆文件思维的优秀工具，此时可以帮上大忙：找另一个单线程性能之王 Redis 打辅助，即可帮助海量协程排队：此时一旦某个协程进入网络 IO 状态，则会立即让出 CPU 时间片：goto 到下一个协程，不浪费 CPU 资源。&lt;/p&gt;&lt;p&gt;当然，你也可以选择自己用 golang 写一个类似 Redis 的单线程内存数据库，和你的业务进程进行网络通信，也可以解决这个问题。&lt;/p&gt;&lt;p&gt;一旦解决了协程之间内存同步的问题，golang 就开始胡吃海塞，大杀四方，榨干 CPU 的全部性能潜力。&lt;/p&gt;&lt;h3&gt;Java 技术的优势&lt;/h3&gt;&lt;p&gt;Java 是一整套基于运行时虚拟机技术的解决方案。总体来看，它选择了“空间换时间”：Java 应用对内存的需求量显著超过其它技术，而经过了这么多年的优化，Java 的“时间性能”在绝大多数场景下都已经做到了无限接近 C++ 的水平。&lt;/p&gt;&lt;p&gt;Java 虽然是虚拟机技术，但它是常驻内存的，并且这个技术非常的灵活。对，你没有看错，Java 技术确实非常灵活。spring 框架对写代码程序员的约束确实很强，但这是对使用者的繁琐，Java 本身是非常灵活的。&lt;/p&gt;&lt;p&gt;经过了这么多年的发展，Java 其实一直都能跟上时代：JDBC、RMI、反射、JIT、数字签名、JWS、断言、链式异常、泛型、注解、lambda、类型推断等等等等。我们知道，传统的 Java 大多采用线程做并行，但是在今年（2022）它甚至发展出了协程 &lt;code&gt;Fiber&lt;/code&gt;！&lt;/p&gt;&lt;p&gt;21 世纪头十年，JVM 在很多公司内都变成了代替虚拟机技术的存在，成为了事实上的“标准服务端运行环境”，以至于诞生了 JPython、JRuby、JPHP 等颇具邪典气质的技术：把动态语言的解释器内置到 JVM 内，再把代码和解释器打包成一个 jar/war，让 JVM 可以直接运行 Python、Ruby、PHP 项目。&lt;/p&gt;&lt;p&gt;这是什么，这就是容器技术啊！&lt;/p&gt;&lt;h3&gt;总结一下&lt;/h3&gt;&lt;p&gt;PHP 的模型最原始，鲁棒性最强，对垃圾代码的兼容性更强，甚至可以看做一种“半微服务”技术（因为多文件），但是性能也最差。&lt;/p&gt;&lt;p&gt;Node.js 实现了非阻塞 IO，但是只能利用一个 CPU 核心，这导致它的高性能还需要依赖基础架构（进程管理器/虚拟机/k8s）才能够发挥出来。&lt;/p&gt;&lt;p&gt;而 golang 自带“线程+协程”的超并发解决方案，让只拥有一台笔记本的大学生也能随时对一个网站发起 5000QPS 的 DOS 攻击。让一个没有完善运维团队的小公司程序员，在不依赖并行基础架构的情况下，能够在裸金属服务器上用一个进程直接吃完全部的 CPU 资源，支撑起可观的用户量。&lt;/p&gt;&lt;h3&gt;还记得我们的目标吗？一百万 QPS&lt;/h3&gt;&lt;p&gt;通过使用 golang，我们依然使用前面那台双路 E5-2682 V4 64 vCore，在数据库性能足够的情况下，我们可以把单个系统的 QPS 从 5000 提升到 50000，并且可以在裸金属服务器上直接部署，不需要虚拟机/k8s 并发基础设施，甚至都不需要前置一个负载均衡器。&lt;/p&gt;&lt;p&gt;当然，现实中 50000 QPS 的系统几乎必然拥有负载均衡器，即便每个接口只返回 20KB，那网络带宽也已经达到了 976MB/S，即 7.8Gbit，单机带宽都快干到 10G 了，肯定是不会只用单台服务器硬抗的，即使单机性能能达到，那单机也无法保证这么大规模系统的稳定性。这个时候我们就需要负载均衡器的介入，接下来两篇文章我们会详细讨论。&lt;/p&gt;&lt;h3&gt;接下来&lt;/h3&gt;&lt;p&gt;下一篇文章，我们将着手拆分“监听 HTTPS 443 端口的进程”这个单点，探寻负载均衡技术的发展历程，普及应用网关、负载均衡、LVS、网关和交换机的性能特点，并在再后面一篇文章讨论 200 Gbps 带宽的负载均衡集群该怎么搭建。&lt;/p&gt;&lt;h3&gt;参考资料&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;《Go 语言设计与实现》 https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/#651-%e8%ae%be%e8%ae%a1%e5%8e%9f%e7%90%86&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5b3e152b991520c78d0b3e35ea851fcb</guid>
<title>前有 45 亿数据被扒，现在 Go 工具链想要我的使用数据，你愿意吗？</title>
<link>https://toutiao.io/k/zxgzygk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前两天有读者提醒我关注 Go 大当家 Russ Cox 发起的 Go 工具链中的遥测（&lt;span&gt;telemetry in the Go toolchain&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;）讨论。不看不知道，一看下一跳。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hUFU6qSm5ib5w0g2X3BSFia3iajKWzkJVibqyIIoyEK1f2w1N2hL6jFWvMTekCSeG6lMbBFS7ZF77ZVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天来分享一些看法和信息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么要收集数据&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Russ Cox（下称 rsc）发起的背景是 Go 开源项目的开发者（例如：Go 核心团队）在没有遥测的情况下，会遇到如下的场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;需要依赖外部的错误报告（例如：GitHub issues）来了解他们自己写的软件如何在意料之外发生异常。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调研&lt;/span&gt;&lt;span/&gt;用户是如何使用自己写的开源项目，是否符合预期，又或是创造出了新的用法。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么一听，好像和我们平时的认知也差不多。换位思考一下，Go 核心开发者就比较头疼了。认为这两种方式作用都很有限，达不到他们想要的效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此想要抽样收集用户的使用数据，便于 Go 团队更好的开发和调研。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;被局限的例子&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;错误报告&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们会提交错误报告，一般只会出现在类似 ”我们预期这事应该能正常跑起来，但你居然没有跑起来“ 的场景下。在现有的情况下，如果程序在不影响正确性的情况下出现了错误行为，用户就不可能注意到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反之，如果实施了遥测（收集数据），开发者就可以通过 Go 工具链收集上来的统计数据发现异常。（有抓手了）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体案例，rsc 说明了在 Go 1.14 版本的发布中，对 macOS Go 发行版的构建方式进行了更改，造成使用 net 包（使用 cgo ）编译任何程序都需要安装 Xcode。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不是他们所预期的，是意外之外的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但在发生这问题的三年内，没有任何人报告过这个错误。用户只是简单地接受了这是必要的安装。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直至近期，Go 核心团队排查其他问题，才发现有这个坑。如果有遥测收集使用数据，那这个问题完全可以被避免。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;调查用户&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 开发团队想知道 ”用户想用 Go 做什么“，或是想基于数据用于做一些新老功能版本的决策。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但现在开源项目普遍都很难，他们只能发调查报告，就像我们每年填的 Go 开发者调查报告，就是这个目的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4hUFU6qSm5ib5w0g2X3BSFia3Dic8g8hWRbuLAA0pb7QaIuPNVly0BCKxsaKYfQeqCibcY6T49eCiaPM8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;figcaption&gt;Go Developer Survey 2022 Q2 Results&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 rsc 对调查报告也是不满足的。因为只是一个小样本，效果有限。且需要大量的用户选项和回复才能得到相对准确的测量结果，比较浪费时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体案例，rsc 举例 go 开源项目，经常会在新版本增加开关，再逐步去掉的做法。像最近宣布 Go 1.21 起将不再支持 macOS1.13/1.14，马上就收到了用户的反馈，要求保留。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有遥测收集使用数据，这个问题将有具体的数据作为决策支撑。就跟我们平时前端同学，会收集用户端的操作系统和版本作为是否支持 IE 的依据等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;想收集什么数据&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说要收集，会在哪收集，具体要收集什么呢？会收集的地方主要是 Go 工具链，例如：Go 命令、Go 编译器、Gopls 等地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;收集的数据，将至少包含工具链的基本信息，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Go 工具链版本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是什么操作系统和架构构建的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主机操作系统版本（例如：Windows8）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 工具链使用的其他工具的粗略信息，例如本地 C 编译器（例如：gcc 2.95）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不会包含任何形式的身份信息，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;没有用户登录。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有机器 ID。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有 MAC 地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有 IP 地址，没有 IP 地址前缀。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有地理位置信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有随机生成的伪 ID，没有其他种类的标识符。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;收集的数据会在 Go 网站上公布，定时展示统计图表等，便于所有 Go 开发者审阅和查看。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;社区争议满满&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;绝大部分开发者是没有直接同意 rsc 这么干的，主流的回复分成了三派。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;直接拒绝，觉得这是在侵犯个人隐私。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建议做成可选项，例如：限时选择上报、选择上报（使用 Go 时弹出 Cookie 弹窗、抛出异常时弹出弹窗）等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接抵制，认为 Go 重蹈 Google 后路。用词强烈，要求 rsc 公开道歉，表示这是推下悬崖的选择，降低了信任。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体来看，参与讨论的 Go 开发者都非常关注 ”隐私“ 的问题。更建议做成可选项，也就是用户选择上报。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果以后写 Go 的时候弹出 Cookie 弹窗还是很 ”有趣“的吧（doge。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 核心团队本身的出发点是好的，他们在维护 Go 开源项目时，经常拿不到一些关键数据和信息，导致在做决策时很纠结。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这在业务应用中，比较常见的是在前端埋探针，获取你的客户端信息等。但这是闭源的，整体风险没有那么大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于开源项目来讲，这是开源的，受到所有人的检阅。这类隐私数据收集，在台面上直接默认上报肯定是不可行的，争议会比较大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从结果来看，由于没有更多新的内容，比较情绪化，这个讨论已经被中止。未来如果做，我猜更大概率是做成可选项，询问式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后的最后，对于 Go 工具链收集使用数据，欢迎投出你关键的一票：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span class=&quot;vote_area&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;span/&gt;&lt;/h4&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;telemetry in the Go toolchain: &lt;em&gt;https://github.com/golang/go/discussions/58409&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注和加煎鱼微信，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一手消息和知识，拉你进技术交流群&lt;span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9988738738738738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KVl0giak5ib4jVkzHVvaqjo3O0BIqDRJKkEyib7SJsryxHBFGsvek0FkdiczfJP6AdbWnK25DvlX3dY8wRObPbVJQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;888&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07106598984771574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/486RHs1WbcgGib6o96dHbvGUGGwPicd8wusUGH1cXR29tM4bO0lNzialzkQhvU6m5ZUdaKibmcF2OQayjMe9Bia6iaXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是煎鱼，&lt;span&gt;出版过 Go 畅销书《Go 语言编程之旅》，再到获得 GOP（Go 领域最有观点专家）荣誉，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247483854&amp;amp;idx=1&amp;amp;sn=ec422fbf4d846975f2930ddeb5e81373&amp;amp;chksm=f9041493ce739d85a4b987eece14da627206cdad798f645cc770868312e4a22b6df24804f186&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的出书之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的出书之路&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;日常分享高质量文章，输出 Go 面试、工作经验、架构设计，&lt;span&gt;加微信拉读者交流群，和大家交流！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>984e159f1134bd1ee2d6a12212c1eb87</guid>
<title>本周科技头条 | GitHub 宣布裁员 10%，全员转远程办公；阿里类 ChatGPT 产品正在内测……</title>
<link>https://toutiao.io/k/8uoajv8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微软发布提醒：将于本月 14 日停止对 IE11 的支持&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;抖音回应全国上线外卖：仍在试点中 无具体时间表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;三六零：公司计划尽快推出类 ChatGPT 技术的 demo 版产品&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;“ChatGPT中文版”上线，充值包高达近千元&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;曝小米 13 Ultra 4 月登场，支持 120 倍变焦  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中国计算机图形学巨匠齐东旭教授逝世&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微软正式发布 ChatGPT 版搜索引擎&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Zoom 宣布裁员 1300 人，领导层减薪 20%&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ChatGPT 让苹果急了！苹果将于下周召开内部 AI 峰会&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Meta 前高管称公司的决策和支出计划有“问题”：很多钱花得不值&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;美国 89% 的大学生用 ChatGPT 做作业&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;OpenAI 跻身全球 TOP 50 网站，1 月访问量比去年 11 月增长了 3572%&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微软更新 .NET 语言战略：依然支持 Visual Basic&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FFmpeg 6.0 将大幅优化 AV1 硬件解码性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;雷军：小米 13 系列和小米万兆路由器即将升级全新一代 Wi-Fi 7&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微信文章底部增加淘宝入口&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;今日头条起诉腾讯侵权案将开庭&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2022 第四季度全国平均招聘薪酬 10558 元&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Google CEO 喊出战斗口号：全体员工要拿出黑客精神测试 ChatGPT 竞品 Bard&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;AI 进入法庭，哥伦比亚法官使用 ChatGPT 做出判决&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;戴尔将裁员约 6650 人，约占全球员工总数的 5%&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;OpenAI 首席技术官：ChatGPT 必须受到更多监管&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息称苹果仍在开发 iPhone 反向无线充电功能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;苹果 2024 年或推出无接口设计 iPhone&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息称华为车 BU 王军被停职，余承东独掌智能车业务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;运营 13 年后，搜狗搜索推广平台下线&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;人人视频遭多家海外影视公司起诉&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息称蔚来手机已开始抽取全国首批内测名额，预计国庆前正式发售&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;苹果或在 2024 年推出更高端版本的 iPhone Ultra&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Gmail 之父：有了 ChatGPT，搜索引擎活不过两年了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;iPhone 14 Pro 全系降价 700 元：基本覆盖所有授权店&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;欧盟已就动视暴雪交易案向微软发出反垄断警告&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;iOS 17 代码泄露，却曝出了 iPhone 15 的“瓜”&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;谷歌向 AI 初创公司 Anthropic 投资近 4 亿美元，后者正在测试 ChatGPT 竞品&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特斯拉 2022 年新增员工近 2.9 万人&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;计算中间件 Apache Linkis 毕业成为 Apache 顶级项目&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Vinton Cerf 被授予 IEEE 荣誉勋章&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fa01fc25eed7d870e772ca1b05763eef</guid>
<title>提高 IT 运维效率，深度解读京东云 AIOps 落地实践（异常检测篇（二））</title>
<link>https://toutiao.io/k/y9too8t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;h3&gt;&lt;strong&gt;作者：张宪波、张静、李东江&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;如何提高IT运维效率是众多运维人员的难题，这不仅是对内容繁杂、持续变化、支持不同的业务需求加以描述、加载和维护，更要对运维和业务运维需求、过程、结果的管控，以及对整个管理信息系统运行状态的管控。京东云AIOps的时间序列异常检测识别故障对系统效率大大提升。它能基于深度学习对运维时序单指标和多指标指标进行异常检测，快速发现线上业务问题，为运维人员降本增效。&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;基于深度学习对运维时序单指标和多指标指标进行异常检测，快速发现线上业务问题&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;时间序列异常检测识别故障对系统的正常运行颇为重要，准确率高的异常检测对系统的稳定性具有重要意义。时间序列的异常检测已经研究了几十年，业界提出了各种有效检测方法。我们提出了一种基于深度学习的时间序列异常检测模型。该模型由三条并行管道组成，每条管道包含一个卷积单元，该卷积单元与改进的注意力机制串联，负责时间和空间特征提取。在京东内部多个数据集对所提出的模型进行评估，结果证明了所提出模型的有效性，所改进的注意力机制的在运维多指标异常检测上有较好的表现。&lt;/p&gt;

&lt;p&gt;为了确保系统稳定运行，需要用一个或者多个指标来评价系统是否在正常运行，常用的评价指标有单变量时间序列(UTS)和多变量时间序列(MTS)。例如，交易量和网络流量是关于在线支付的两个常用监测指标。挖掘时间序列的异常值对于系统的稳定性以及根因分析都具有重要意义，及时发现这些异常值，可以有效的降低故障的发生的概率。&lt;/p&gt;

&lt;p&gt;现有的时间序列异常检测分析方法大致可分为基于深度学习的方法、基于非深度学习的方法和传统方法。自回归移动(AR)及其变量如自回归平均模型(ARMA)和自回归求和滑动平均模型模型(ARIMA)是分析时间序列的一些基本方法。动态时间规整(DTW)是另一种基于距离的经典异常检测方法，其变种如 DTW-I、 DTW-D 和 DTW-A为常用的baseline方法。异常检测也可以简单看成二分类问题，所以机器学习算法，如隐马尔可夫模型(HMM) ，k 最近邻(k-NN)和支持向量机(SVM) ，也是用于异常检测的常用算法。&lt;/p&gt;

&lt;p&gt;上述方法为时间序列分析打下了基础，然而，为了更好地适应特定的实际领域，非深度学习方法不能适应计算机系统复杂和动态的变化,这也是非深度学习方法的一个局限性。深度学习具有强大的特征提取和行为预测能力，这使得深度学习可以很好的适应异常检测，特别是对于有大量输入信息和动态特征的情况。&lt;/p&gt;

&lt;p&gt;卷积神经网络(CNN)是实现深度学习的最常使用的框架之一，并逐渐成为图像处理方面的主流技术。除了卷积神经网络(CNN)之外，递归神经网络(RNN)因其对历史信息的记忆能力而在时间序列的异常检测有着很好的表现能力。基于类似的 RNN 设计，其变种长短期记忆人工神经网络(LSTM)和门控递归单元(GRU)在时间序列异常检测问题上具有更好的性能。&lt;/p&gt;

&lt;p&gt;基于 DL的时间序列异常检测模型，如 MC-DCNN ，ALSTM-FCN ，C-LSTM ，TapNet 等在业界被频繁使用。与基于非深度学习的方法相比，这些模型需要很少的先验知识，但能够获得更好的检测结果，特别是当涉及到复杂和传统方法难以解决的情况时，深度学习方法能够很好的处理。&lt;/p&gt;

&lt;p&gt;注意力机制已成为业界算法同学的一个广泛选择，基于深度学习的框架结合注意机制往往获得更好的性能。它也被用于异常检测任务，我们对现有的时间序列分析注意机制进行了细微的改进，以更好地适应实际应用。&lt;/p&gt;

&lt;p&gt;我们提出了多注意综合卷积网络(Mac-net)异常检测模型。时间序列以快照的形式存储输入到 Mac-net模型中，Mac-net模型由三条平行的卷积注意管道和一个全连接组成。卷积注意管道包括 CNN 单元和改进注意力单元。CNN 单元负责空间特征提取，注意单元负责时间特征提取。我们改进的注意力机制将大部分权重分配给重要的历史输入，同时抑制其他较不重要的输入，从而优化权重分配。&lt;/p&gt;

&lt;p&gt;模型要检测的时间序列可以是 UTS 或 MTS，这三个并行管道设计为多尺度感知器。我们设计的注意力机制可以很好地捕捉时间序列异常序列的内在特征，通过更多地关注与当前序列严重偏离的历史序列来进行预测，主要是因为这些序列在识别异常与否时比其他序列贡献更大。&lt;/p&gt;

&lt;p&gt;我们的模型创新点主要体现在以下两个方面: 提出了一种新的基于深度学习的网络结构 Mac-net，并设计了一种专门用于时间序列分析的放大注意机制，使用公共数据集和京东数据集进行了实验评估，证明了 Mac-net 的有效性和可扩展性。详细模型技术细节如下：&lt;/p&gt;

&lt;p&gt;我们首先简要介绍时间序列的异常检测，然后详细说明了 Mac-net 模型的设计细节，以及我们所提出的放大注意机制的算法实现。&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;时间序列的异常检测&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;假设一个时间序列的周期为X = (x0,x1,...,xt-1,xt)，其中t是当前序列的时间戳，而元素 xi，i ∈[0，t] 是在时间戳 i 处的 m 维观测值，因此，X 是一个矩阵X∈Rmxn。具体来说，如果 m = 1，X 是 UTS，如果 m &amp;gt; 1，则是 MTS。异常检测是确定当前序列 xt 是否异常。我们采用时间序列的快照图像作为输入，为 CNN 处理提供了方便。简单来说，我们检测的是包含 xt 的子序列，而不是单个点。&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;Mac-net模型&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Mac-net 模型的总体架构，包括两个主要块，即三个平行的管道和全连接(FC)层。其中，并行管道负责特征提取，CNN 单元提取空间特征，注意力单元提取时间信息，实现权重分配。每个 CNN 单元包括卷积层、批归一化层、激活层和Dropout层。这三条管道的卷积层都有16个内核，它们的步长为1。这三个管道的内核大小分别为2x2、3x3和5x5。除了内核大小之外，所有其他设置在三个管道中保持不变，我们使用 ReLU 作为激活函数，Dropout率为0.4。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7428b7fbe4664fee92b035814f6473ed%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图1 Mac-net 的体系结构示意图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;输入为 h + 1快照图片，包括一个当前序列和 h 历史序列，并同时输入到三个并行管道中。每个通道地输出相加并取平均值以进行最终检测。并行管道具有不同的内核大小，因而具有不同的感知域。时间序列的快照照片不同于一般的人像照片。尽管在快照图片中有多条曲线(UTS 的一条曲线) ，但图片的大部分区域是空白的，这意味着图片值矩阵中的大多数数字为零，如下图2所示，在这种情况下，单一大小的卷积内核可能无法获得全面的洞察力。三条平行管道的混合可以很好地克服这一问题。不同大小的卷积核可以互补地工作，并提供全面的感知。根据我们的实验结果可得， 2x2、3x3和5x5的组合效果最好。每个 CNN 单元后面跟着一个注意力单元。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f30c2614596442bb6e3625e176b417a%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图2 (a) UTS 输入序列，(b)值矩阵&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;﻿
最后将每个管道的注意力输出的结果输入到后面的全连接层中。由于每个管道的卷积核大小不一致，所有管道输出的结果直接求和是不行的。在注意力机制后面加个全连接层，以统一输出形状，从而使求和成为可能。总和的平均值最终输入到统一的全连接层。后面包括两个全连接层，分别是32个和2个神经元。最终输出结果是当前时间序列是否为异常。&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;放大注意力机制&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;注意机制最初被提出用于机器翻译，并很快成为集成在深度学习体系结构中的主要设计方法。注意机制的基本思想是模仿生物系统，即使感知到大量的信息，它们也会有意识地关注感知的某些部分。常用的注意机制如加性注意机制、放缩点积注意机制等需要额外的查询参数和关键矩阵计算，这肯定会增加计算开销。此外，这些注意机制计算出的权重被简单地分配给每个元素。为了进一步加强重要因素对注意的影响，同时抑制那些不相关的片段，在深入研究内在时间序列的基础上，我们提出了一种放大注意机制。&lt;/p&gt;

&lt;p&gt;注意力机制最常用的形式之一，如(1)所示，是缩放点的产生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5b4c39b53104bd4bae4bd6e6eba099c%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a84210afccb84c7bb1ef09de0f496a6b%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;缩放后的点生成，“柔和”地最大化了那些具有较大相似性的元素所产生的效果。对于时间序列而言，与待检测时间序列偏差最大的历史序列对最终决策的贡献最大。以下图3中的UTS输入为例。红色虚线框是要检测的序列，蓝色虚线框为所需的历史序列。显然xt-2与xt的偏差最大。根据实际经验，与xt-1和xt-3相比，xt-2被认为是识别xt异常状态的优先参考。鉴于这种先验知识，在抑制分配给其他权重的同时，放大分配给xt-2的权重是非常必要的。因此，我们试图减少分配给那些不太重要的部分的权重。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eeeffe2b4174a46af04c5e7bfc63371%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;图3 UTS输入样例&lt;/p&gt;

&lt;p&gt;红色段xt将被检测，蓝色段xt-1、xt-2和xt-3是作为辅助参考的历史数据段。&lt;/p&gt;

&lt;p&gt;实现放大注意力机制有三个主要步骤。首先得到表示历史片段 xt-h ~ xt-1与当前片段 xt 相似性的相似向量 S = (st-h，st-h+1，... ，st-1)。所需的历史片段数 h，可以根据异常模式确定，通常可以通过试验确定。在我们的示例中，h 被设置为10，这意味着当前检测需要过去的10张历史快照照片。相似度计算方法有很多种，我们选择了余弦距离，如(3)所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d828fcb522ea4343a50c214f5a79db8d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如上所述，我们的目标是挑选出偏离 xt 最多的片段，即相似向量的最小元素。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c04613e27c604802aa60df8466e5336c%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其次，根据相似性结果得到权重向量w。与直接将相似性结果 放softmax运算的缩放点生成不同，我们使用log代替exp运算，并将权重向量分成两部分。正如我们所提到的，我们加大了重要历史片段对模型结果所产生的影响。我们使用log操作，因为当输入在[0,1]内时，值的变化比exp严重得多。&lt;/p&gt;

&lt;p&gt;基于以上公式（4），smin是最终识别的最有价值的信息。同时，[st-h，smin-1]和[smin+1，st-1]不那么重要。为了扩大对重要序列片段的关注，我们将权重计算范围缩小到[smin，sh-1]，因为这一子时段包括xt的最近相邻的序列。[st-h，smin-1]被赋值为一个很小的值，因为它们远离xt。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3569156a8ee647b3a21914f64ad007b8%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意力机制的最后一步是得到结果的乘积乘以权重矩阵并归约，即注意力输出＝reduce_sum（x’· w） 表I给出了注意机制的算法过程。&lt;/p&gt;

&lt;p&gt;表一 放大注意机制算法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd421d158f6450cbed02e3642256c23%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;由于在 Mac-net 中有三个管道，我们得到三个独立的注意力输出，即 、 和。这三个注意力输出的平均值作为并行管道的最终输出，输入到全连接中进行最终输出。&lt;/p&gt;

&lt;p&gt;通过我们京东内部数据和公共数据集实验评估来证明 Mac-net 在异常检测任务中的有效性。我们首先在两个 UTS 公共数据集和两个 MTS 公共数据集上评估模型。为了进一步说明该方法在实践中有良好的扩展性和有效性，我们还使用了我们京东内部两个数据集作为测试集。&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;数据集&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;我们使用两个 UTS 公共数据集和两个 MTS 公共数据集来演示 Mac-net 的异常检测性能。注意，一些公共数据集最初并非用于异常检测，而是用于时间序列的二分类。尽管如此，异常检测基本上是一项二分类的任务。因此，进行这些实验具有一定的有效性。&lt;/p&gt;

&lt;p&gt;两个 UTS 数据集是从 Numenta Anomaly Benchmark (NAB)数据集中选择的。这两个 MTS 数据集收集来自不同领域的各种 MTS。我们选择了SelfRegulationSCP2和Wafer，因为它们的维数和类别与我们的实际情况相似。除了公共数据集，我们选取了两个京东内部模型落地的数据集 A 和 B。下图4显示了两个数据集的正常序列(标有 a 的蓝框)和异常序列(标有 b 的红框)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78b2014b6e9422897717a68d86f2a94%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;图4 数据集 A 和 B 的(a)正常和(b)异常序列的显示&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;模型评估&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Mac-net模型 首先在上述六个数据集上进行了测试，来证明我们提出的放大注意力机制具有效果提升作用。检测结果见表二。我们选取精确度，召回率，以及 F1-score(F1)作为评估指标，公式如下，其中 tp、 fp 和 fn 代表真正的阳性、假阳性和假阴性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f78c171c1c94145a6c8e7cc65ea49a8%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;从表二中我们可以看出，Mac-net 在所有测试数据集上获得了最佳性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;表二 MAC-NET 在六种数据集上的评价结果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae856b778df74032835ce614637a62e0%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;通过模型评估证明了我们的注意机制对现有方法的有一定的提升。同时我们构造了两个比较模型 Abl-mdl-1和 Abl-mdl-2。Abl-mdl-1和 Abl-mdl-2都与 Mac-net 共享相同的架构，只是注意力单元不同。Abl-mdl-1用缩放点产生取代 Mac-net 中的扩大注意机制，Abl-mdl-2用 LSTM 层(16个单元)取代扩大注意机制。从结果可以看出，我们的注意机制优于常用的注意机制和 LSTM 操作。放大注意力机制是基于时间序列的内在特征设计的，并试图以最优方式分配权重。&lt;/p&gt;

&lt;p&gt;除了更好的检测精确度外，我们还评估了我们的模型与两个模型（Abl-mdl-1和Abl-mdl-2）的收敛速度，如下图5所示。两个基于注意力的模型，即Mac-net和Abl-mdl-1，都实现了最快的收敛，而Abl-mdl-2则较慢。与其他两个模型相比，在15-20个时期的训练期间，Mac-net震动更少，即到了更稳定的状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ea417849e7141bc890446f7c49a350d%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;图5 Mac网络、Abl-mdl-1和Abl-mdl-2的收敛速度&lt;/p&gt;

&lt;p&gt;• &lt;a href=&quot;https://aiops-themis.jd.com/publication/9762449/&quot;&gt;Multi-Attention Integrated Convolutional Network for Anomaly Detection of Time Series&lt;/a&gt;. ICCAE.&lt;/p&gt;

&lt;p&gt;•&lt;strong&gt;ieeexplore检索：&lt;/strong&gt; &lt;a href=&quot;https://ieeexplore.ieee.org/document/9762449&quot;&gt;https://ieeexplore.ieee.org/document/9762449&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c881afbe7a480da57520cc40f69dec%7Etplv-k3u1fbpfcp-zoom-1.image&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;•&lt;strong&gt;团队介绍：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;京东科技从2018年开始建设智能运维，基于京东多年一线运维经验，以大数据和人工智能技术为抓手，形成以应用为中心的一体化智能运维解决方案。利用京东内部历年大促场景的数据积累，对算法进行不断的优化训练，在监控、数据库、网络、资源调度等多个纵向场景取得突破，可移植性强，自研通用化智能基线算法学件10+，自研通用化异常检测算法学件10+，场景化异常检测算法方案5+，具备多种自研通用化根因定位算法学件，可以自动触发多维实时根因定位 ，从上万维度属性值中定位到根因维度，自研5种以上增量式学习模板提取与相关分析算法学件，运维知识图谱内涵盖节点30W+，以应用为中心向外延伸出的图谱关系达90W+，赋能根因分析快速精准查询调用。发表IEEE国际会议论文（AIOps方向）8篇，申请40余项智能运维专利。&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>