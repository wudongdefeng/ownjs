<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8b5f808db1820394584de9f277002d3b</guid>
<title>深入浅出 RocketMQ 原理及实战：透彻剖析贯穿 RocketMQ 的存储系统的实现原理和持久化机制</title>
<link>https://toutiao.io/k/u7ylwyw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-atom-one-dark&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
                        &lt;path stroke-linecap=&quot;round&quot; d=&quot;M5,0 0,2.5 5,5z&quot; id=&quot;raphael-marker-block&quot;/&gt;
                    &lt;/svg&gt;
                    &lt;h2&gt;&lt;a id=&quot;RocketMQ_0&quot;/&gt;RocketMQ的发展历史&lt;/h2&gt; 
&lt;p&gt;RocketMQ是一个统一消息引擎、轻量级数据处理平台。RocketMQ是一款阿里巴巴开源的消息中间件。 2016 年 11 月 28 日，阿里巴巴向 广西党性培训 Apache 软件基金会捐赠RocketMQ，成为 Apache 孵化项目。 2017 年 9 月 25 日，Apache 宣布 RocketMQ孵化成为 Apache 顶级项目（TLP ），成为国内首个互联网中间件在 Apache 上的顶级项目。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/b23599313e62af42ad8adeca2abe29f7.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RocketMQ_6&quot;/&gt;RocketMQ的定位说明&lt;/h2&gt; 
&lt;p&gt;RocketMQ作为一款基于磁盘存储的中间件，具有无限积压能力，并提供高吞吐、低延迟的服务能力，其最核心的部分必然是它优雅的存储设计。&lt;strong&gt;本系列文章主要针对于RocketMQ的多个关键特性的实现原理进行深入介绍，并对消息中间件遇到的各种问题进行总结，阐述 RocketMQ如何解决这些问题&lt;/strong&gt;。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RocketMQ_10&quot;/&gt;RocketMQ的核心工作机制&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/01799a476be9ee7efd41c7be21aa7d20.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;由上图可以看到RocketMQ存储的文件主要包括&lt;strong&gt;Commitlog文件&lt;/strong&gt;、&lt;strong&gt;ConsumeQueue文件&lt;/strong&gt;、&lt;strong&gt;Index文件&lt;/strong&gt;。而对于消息存储是RocketMQ中最为复杂和最为重要的一部分，接下来会从RocketMQ的消息存储整体架构、PageCache与Mmap内存映射以及RocketMQ中两种不同的刷盘方式三方面来分别展开叙述。&lt;/p&gt; 
&lt;h2&gt;&lt;a id=&quot;RocketMQ_16&quot;/&gt;RocketMQ的存储设计介绍&lt;/h2&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;CommitLog：RocketMQ将所有主题的消息存储在同一个文件中，确保消息发送时按顺序写文件，尽最大能力确保消息发送的高可用性与高吞吐量&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;ConsumeQueue&lt;/strong&gt;：消息中间件一般都是基于Topic的订阅与发布模式，消息消费时必须按照主题进行筛选消息，显然从Commitlog文件中按照topic去筛选消息会变得及其低效，为了提高根据主题检索消息的效率，RocketMQ引入了ConsumeQueue文件，俗成消费队列文件。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;index文件&lt;/strong&gt;：&lt;strong&gt;关系型数据库可以按照字段属性进行记录检索，作为一款主要面向业务开发的消息中间件，RocketMQ也提供了基于消息属性的检索能力，底层的核心设计理念是为Commitlog文件建立哈希索引，并存储在Index文件中&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;在RocketMQ中顺序写入到Commitlog文件后，ConsumeQueue与Index文件都是异步构建的，其数据流向图如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/c6627bc197f5c49400ec48ea18bac66a.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;如果觉得上面的流程过于复杂的话，那么我就就给大家展示一个最简单的模式图：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/8a696297f3393ff19f6d9176754e78eb.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;根据上面的图可以看出来了吧。就是三者之间的关系和联系，那么我们来仔细以下这三个介质的的底层实现是什么。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;Commitlog_34&quot;/&gt;Commitlog文件&lt;/h3&gt; 
&lt;p&gt;消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容,消息内容不是定长的。单个文件大小默认1G 。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;CommitLog_39&quot;/&gt;CommitLog的命名规则&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;从上面的图中也可以看得出来，其文件的命名也及其巧妙，使用该存储在消息文件中的第一个全局偏移量来命名文件文件名长度为20位，左边补零，剩余为起始偏移量，比如00000000000000000000代表了第一个文件，起始偏移量为0，文件大小为1G=1073741824；消息主要是顺序写入日志文件，当文件满了，写入下一个文件；这样的设计主要是方便根据消息的物理偏移量，快速定位到消息所在的物理文件，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;CommitLog_43&quot;/&gt;CommitLog的性能读写&lt;/h4&gt; 
&lt;p&gt;RocketMQ在消息写入过程中追求极致的磁盘的读写性能。所有主题的消息随着到达Broker的顺序写入commitlog文件。Commitlog文件使用顺序写，极大提高了文件的写性能。 当顺序依次追加到文件中，消息一旦写入，就无法再进行修改。Commitlog文件的具体布局如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/435f590ecc2dae97c399689a1229850e.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;基于磁盘文件的与基于内存读取机制有一个本质的不同点，就是在内存读取模式下基本上是现成的数据结构，例如，数据、集合或者哈希表等，对数据的读写非常方便，但是针对于磁盘存储读取的Commitlog文件，我们该如何如何搜索，这时候我们引入了ConsumeQueue，我们后面会进行相关的说明和介绍。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;RocketMQ与关系型数据会为每一条数据引入一个ID主键，在基于磁盘的读取机制中，也会为一条Message引入一个唯一标志：&lt;strong&gt;消息物理偏移量&lt;/strong&gt;，即消息存储在文件的起始位置。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;正是有了物理偏移量的概念，这也与上面提到的Commitlog的文件名命名相互呼应，这样做的好处是给出任意一个消息的物理偏移量，例如消息偏移量为 12345678，可以通过二分法进行查找，快速定位这个文件在第一个文件中，然后用消息的物理偏移量减去该文件的名称所得到的差值，就是在该文件中的绝对地址。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/69573abde687dc212303e88f54c7501f.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;ConsumeQueue_57&quot;/&gt;ConsumeQueue的读取模式&lt;/h4&gt; 
&lt;p&gt;ConsumeQueue消息消费队列，引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题topic的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;ConsumeQueue文件是Commitlog文件基于Topic的索引文件，主要用于消费者根据Topic消费消息，其组织方式为/topic/queue，同一个队列中存在多个文件。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Consumer即可根据ConsumeQueue来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在&lt;strong&gt;CommitLog中的起始物理偏移量offset&lt;/strong&gt;，&lt;strong&gt;消息大小size&lt;/strong&gt;和&lt;strong&gt;消息Tag的HashCode值&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;注意：ConsumeQueue中的每个条目长度固定20个字节（&lt;strong&gt;8字节commitlog物理偏移量&lt;/strong&gt;、&lt;strong&gt;4字节消息长度&lt;/strong&gt;、&lt;strong&gt;8字节tag hashcode&lt;/strong&gt;（&lt;strong&gt;这里不是存储tag的原始字符串，而选择存储hashcode&lt;/strong&gt;）），每个条目的长度固定，可以使用访问类似数组下标的方式快速定位条目，极大地提高了ConsumeQueue文件的读取性能。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;&lt;a id=&quot;ConsumeQueue_67&quot;/&gt;ConsumeQueue的读取消息偏移量&lt;/h5&gt; 
&lt;ol&gt;&lt;li&gt;首先，消息消费者根据topic、消息消费进度（ConsumeQueue逻辑偏移量），即第几个ConsumeQueue条目，这样的消费进度去访问消息的方法为使用逻辑偏移量logicOffset * 20即可找到该条目的起始偏移量（ConsumeQueue文件中的偏移量），然后读取该偏移量后20个字节即得到一个条目，&lt;strong&gt;无须遍历ConsumeQueue文件&lt;/strong&gt;。&lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/7576db65339a4f16837b20fd96edda4d.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;第N个消ConsumeQueue的元素数据的索引开始：（N-1）* 20+1&lt;/li&gt;&lt;li&gt;第N个消ConsumeQueue的元素数据的索引结束：（N）* 20&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;ConsumeQueue文件夹如下：topic/queue/file三层组织结构，地址：$HOME/store/ConsumeQueue/{topic}/{queueId}/{fileName}。单个ConsumerQueue文件由30W个条目组成，可以像数组一样随机访问每一个条目，每个ConsumeQueue文件大小约5.72M；&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/526327b2afef25ffa7193f0cfe57ad23.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;_80&quot;/&gt;存储结构分析总结&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;数据单独存储到一个Commit Log完全&lt;/li&gt;&lt;li&gt;队列实际只存储消息在Commit Log的位置信息，并且串行方式刷盘。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;_85&quot;/&gt;这样做的优点&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;队列轻量化，单个队列数据量非常少。&lt;/li&gt;&lt;li&gt;对磁盘的访问串行化，避免磁盘竟争，不会因为队列增加导致 IOWAIT 增高。&lt;/li&gt;&lt;/ul&gt; 
&lt;h3&gt;&lt;a id=&quot;_90&quot;/&gt;这样做的缺点&lt;/h3&gt; 
&lt;ul&gt;&lt;li&gt;写虽然完全是顺序写，但是读却变成了完全的随机读。&lt;/li&gt;&lt;li&gt;读一条消息，会先读 Consume Queue，再读 Commit Log，增加了开销。&lt;/li&gt;&lt;li&gt;要保证 Commit Log 与 Consume Queue 完全的一致，增加了编程的复杂度。&lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a id=&quot;_96&quot;/&gt;以上缺点如何克服&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;随机读，尽可能让读命中PAGECACHE，减少 IO 读操作，所以内存越大越好&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;访问 PAGECACHE 时，即使只访问1k 的消息，系统也会提前预读出更多数据，在下次读时，就可能命中内存&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;随机访问 Commit Log 磁盘数据，系统 IO 调度算法设置为 NOOP 方式，会在一定程度上将完全的随机读变成顺序跳跃方式，而顺序跳跃方式读较完全的随机读性能会高5倍以上&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;4k的消息在完全随机访问情况下，仍然可以达到8K次每秒以上的读性能&lt;/strong&gt;。&lt;strong&gt;RocketMQ与Kafka相比具有一个强大的优势，就是支持按消息属性检索消息，引入consumequeue文件解决了基于topic查找的问题，但如果想基于消息的某一个属性查找消息，ConsumeQueue文件就无能为力了&lt;/strong&gt;，为了解决此问题RocketMQ引入了Index索引文件，实现基于文件的哈希索引。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;ConsumeQueueCommitLog_106&quot;/&gt;ConsumeQueue和CommitLog的总结介绍&lt;/h3&gt; 
&lt;p&gt;CommitLog 中存储了所有的元信息，包含消息体，类似于 Mysql、Oracle 的 binlog，所以只要有CommitLog 在，ConsumeQueue即使数据丢失，仍然可以恢复出来。&lt;/p&gt; 
&lt;h3&gt;&lt;a id=&quot;IndexFile_110&quot;/&gt;IndexFile文件&lt;/h3&gt; 
&lt;p&gt;IndexFile文件基于物理磁盘文件实现Hash索引。其文件由40字节的文件头、500万个哈希槽，每个哈希槽4个字节，最后由2000万个Index条目，每个条目由20个字节构成，分别为4字节索引key的hashcode、8字节消息物理偏移量、4字节时间戳、4字节的前一个Index条目（哈希冲突的链表结构）。&lt;/p&gt; 
&lt;p&gt;IndexFile的文件存储结构如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/6c63cc6569b0adb5cdc60c73d4094659.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;其原理和读取方式与ConsumerQueue较为相似，至此不过多赘述。对于IndexFile文件和ConsumerQueue文件都是，Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;_121&quot;/&gt;页缓存与内存映射&lt;/h3&gt; 
&lt;p&gt;RocketMQ中，ConsumeQueue逻辑消费队列存储的数据较少，并且是顺序读取，在PageCache机制的预读取作用下，ConsumeQueue文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于CommitLog消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。（此时块存储采用SSD的话），随机读的性能也会有所提升。&lt;/p&gt; 
&lt;h6&gt;&lt;a id=&quot;mmap_125&quot;/&gt;内存映射mmap&lt;/h6&gt; 
&lt;p&gt;虽然基于磁盘的顺序写可以极大提高IO的写效率，但如果基于文件的存储采用常规的JAVA文件操作API，例如 FileOutputStream等，其性能提升会很有限，RocketMQ引入了内存映射，将磁盘文件映射到内存中，以操作内存的方式操作磁盘，性能又提升了一个档次。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;JAVA中可通过FileChannel的map方法创建内存映射文件。在Linux服务器中由该方法创建的文件使用的是操作系统的pagecache，即页缓存。&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux操作系统中的内存使用策略时会尽可能地利用机器的物理内存，并常驻内存中，就是所谓的页缓存。在操作系统的内存不够的情况下，采用缓存置换算法，例如LRU将不常用的页缓存回收，即操作系统会自动管理这部分内存&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;strong&gt;如果RocketMQ Broker进程异常退出，存储在页缓存中的数据并不会丢失，操作系统会定时将页缓存中的数据持久化到磁盘，做到数据安全可靠。不过如果是机器断电等异常情况，存储在页缓存中的数据就有可能丢失。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h6&gt;&lt;a id=&quot;PageCache_135&quot;/&gt;页缓存PageCache&lt;/h6&gt; 
&lt;p&gt;页缓存（PageCache)是OS对文件的缓存，用于加速对文件的读写。&lt;/p&gt; 
 
&lt;h5&gt;&lt;a id=&quot;_144&quot;/&gt;是否使用堆外内存&lt;/h5&gt; 
&lt;p&gt;RocketMQ为了降低PageCache的使用压力引入了transientStorePoolEnable机制，即内存级别的读写分离机制。&lt;/p&gt; 
&lt;p&gt;默认情况下RocketMQ将消息写入PageCache，消息消费时从PageCache中读取，这样在高并发时PageCache的压力会比较大，容易出现瞬时broker busy。&lt;br/&gt; &lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/f2e35f4ed9b74407c131ef54c0a1f810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;RocketMQ还引入了transientStorePoolEnable=true，将消息先写入堆外内存并立即返回，然后异步将堆外内存中的数据提交到pagecache，再异步刷盘到磁盘中。其工作机制如下图所示：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/1041f0154aa56b13e6a47576e51a738c.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;消息在消费读取时不会尝试从堆外内存中读，而是从PageCache中读取，这样就形成了内存级别的读写分离，即消息写入时主要面对堆外内存，而读消息时主要面对pagecache&lt;/strong&gt;。&lt;/p&gt; 
&lt;/blockquote&gt; 
 
&lt;h3&gt;&lt;a id=&quot;_161&quot;/&gt;刷盘机制&lt;/h3&gt; 
&lt;p&gt;有了顺序写和内存映射的加持，RocketMQ的写入性能得到了极大的保证，但凡事都有利弊，引入了内存映射和页缓存机制，消息会先写入到页缓存，此时消息并没有真正持久化到磁盘。那么broker收到客户端的消息发送后，是存储到页缓存中就直接返回成功，还是要持久化到磁盘中才返回成功呢？&lt;/p&gt; 
&lt;p&gt;这是一个“艰难”的抉择，是在性能与消息可靠性方面进行权衡。为此，RocketMQ提供了多种策略：同步刷盘、异步刷盘。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_167&quot;/&gt;同步刷盘&lt;/h4&gt; 
&lt;p&gt;同步刷盘在RocketMQ的实现中成为组提交，并不是每一条消息都必须刷盘。采用同步刷盘，每一个线程将数据追到到内存后，并向刷盘线程提交刷盘请求，然后会阻塞；刷盘线程从任务队列中获取一个任务，然后触发一次刷盘，但并不只刷与请求相关的消息，而是会直接将内存中待刷盘的所有消息一次批量刷盘，然后就可以唤醒一组请求线程，实现组刷盘。&lt;/p&gt; 
&lt;p&gt;同步刷盘的优点是能保证消息不丢失，即向客户端返回成功就代表这条消息已被持久化到磁盘，即消息非常可靠，但这是以牺牲写入响应延迟性能为代价的，由于RocketMQ的消息是先写入pagecache，故消息丢失的可能性较小，如果能容忍一定几率的消息丢失，可以考虑使用异步刷盘。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/2d852858cd2ef74e32085aa7bc7f1c57.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;如上图所示，只有在消息真正持久化至磁盘后RocketMQ的Broker端才会真正返回给Producer端一个成功的ACK响应。同步刷盘对MQ消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多。&lt;/p&gt; 
&lt;h4&gt;&lt;a id=&quot;_178&quot;/&gt;异步刷盘&lt;/h4&gt; 
&lt;p&gt;异步刷盘指的是broker将消息存储到pagecache后就立即返回成功，然后开启一个异步线程定时执行FileChannel的forece方法，将内存中的数据定时刷写到磁盘，默认间隔为500ms。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/753e63d5668f4a8fa244c3e5bf546462.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;能够充分利用OS的PageCache的优势，只要消息写入PageCache即可将成功的ACK返回给Producer端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了MQ的性能和吞吐量。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/d9afa1102b5dc9a4a11ef1d899c45c75.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;GroupCommitService 从队列中拿出待刷盘请求request， 然后执行刷盘动作， 此时会将write指针与flush指针之间的所有数据刷写到磁盘中，即这里并不只是将request l对应的那一条消息刷写到磁盘&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;MySQL_190&quot;/&gt;MySQL的持久化机制对比&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;MySQL Redo 日志的引入目的，我们知道在 MySQL InnoDB 的存储引擎中，会有一个内存 Pool，用来缓存磁盘的文件块，当更新语句将数据修改后，会首先在内存中进行修改，然后将变更写入到 redo 文件(刷写到磁盘)，然后定时将InnoDB内存池中的数据刷写到磁盘。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a id=&quot;RocketMQ_195&quot;/&gt;RocketMQ的持久化存储机制总结&lt;/h3&gt; 
&lt;p&gt;RocketMQ采用的是混合型的存储结构，即为Broker单个实例下所有的队列共用一个日志数据文件（即为CommitLog）来存储。混合型存储结构(多个Topic的消息实体内容都存储于一个CommitLog中)，针对Producer和Consumer分别采用了数据和索引部分相分离的存储结构。&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;Producer发送消息至Broker端，然后Broker端使用同步或者异步的方式对消息刷盘持久化，保存至CommitLog中。只要消息被刷盘持久化至磁盘文件CommitLog中，那么Producer发送的消息就不会丢失。&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;Consumer也就肯定有机会去消费这条消息。当无法拉取到消息后，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker允许等待30s的时间，只要这段时间内有新消息到达，将直接返回给消费端。&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt;
                &lt;/div&gt;
                
                
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0d5457b490b03bb15cd68d80cdcc93e0</guid>
<title>面试官：业务开发时，接口不能对外暴露怎么办？</title>
<link>https://toutiao.io/k/boygn9q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content js_underline_content             autoTypeSetting24psection&amp;#10;            &quot; id=&quot;js_content&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击&lt;strong&gt;&lt;span&gt;关注&lt;/span&gt;&lt;/strong&gt;公众号：&lt;/span&gt;&lt;/strong&gt;互联网架构师，后台回复&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot; 2T&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;2T&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;获取&lt;/span&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247487508&amp;amp;idx=1&amp;amp;sn=78cf235aa9ba5f988c6922ca98f8bfd6&amp;amp;chksm=ea5cdd72dd2b54647cf55b4a73dcafa69fc7228205ad39ecc98fe57b39cdecb21c238c6d6cb6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;2TB&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2TB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;学习资源！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上一篇：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247523205&amp;amp;idx=1&amp;amp;sn=89b261f829ce6c3487ce8b2ccf3ed06b&amp;amp;chksm=ea5f56e3dd28dff5238989d3e07d775d34c04a4e80a166059e92e84379274819203d72d1dc1d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Alibaba开源内网高并发编程手册.pdf&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;Alibaba开源内网高并发编程手册.pdf&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;在业务开发的时候，经常会遇到某一个接口不能对外暴露，只能内网服务间调用的实际需求。面对这样的情况，我们该如何实现呢？今天，我们就来理一理这个问题，从几个可行的方案中，挑选一个来实现。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 内外网接口微服务隔离&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;将对外暴露的接口和对内暴露的接口分别放到两个微服务上，一个服务里所有的接口均对外暴露，另一个服务的接口只能内网服务间调用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该方案需要额外编写一个只对内部暴露接口的微服务，将所有只能对内暴露的业务接口聚合到这个微服务里，通过这个聚合的微服务，分别去各个业务侧获取资源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该方案，新增一个微服务做请求转发，增加了系统的复杂性，增大了调用耗时以及后期的维护成本。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 网关 + redis 实现白名单机制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 redis 里维护一套接口白名单列表，外部请求到达网关时，从 redis 获取接口白名单，在白名单内的接口放行，反之拒绝掉。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该方案的好处是，对业务代码零侵入，只需要维护好白名单列表即可；&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不足之处在于，白名单的维护是一个持续性投入的工作，在很多公司，业务开发无法直接触及到 redis，只能提工单申请，增加了开发成本；另外，每次请求进来，都需要判断白名单，增加了系统响应耗时，考虑到正常情况下外部进来的请求大部分都是在白名单内的，只有极少数恶意请求才会被白名单机制所拦截，所以该方案的性价比很低。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;3. 方案三 网关 + AOP&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;相比于方案二对接口进行白名单判断而言，方案三是对请求来源进行判断，并将该判断下沉到业务侧。避免了网关侧的逻辑判断，从而提升系统响应速度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道，外部进来的请求一定会经过网关再被分发到具体的业务侧，内部服务间的调用是不用走外部网关的（走 k8s 的 service）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;根据这个特点，我们可以对所有经过网关的请求的header里添加一个字段，业务侧接口收到请求后，判断header里是否有该字段，如果有，则说明该请求来自外部，没有，则属于内部服务的调用，再根据该接口是否属于内部接口来决定是否放行该请求。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该方案将内外网访问权限的处理分布到各个业务侧进行，消除了由网关来处理的系统性瓶颈；同时，开发者可以在业务侧直接确定接口的内外网访问权限，提升开发效率的同时，增加了代码的可读性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然该方案会对业务代码有一定的侵入性，不过可以通过注解的形式，最大限度的降低这种侵入性。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/x0kXIOa6owV4vzlKJpPricaF2NKic22Rt8WyXhGDT30LriabFvvF9MyvaTkl3IBQhOrniapxE2NNfHrxA4lhT4crTw/640?wx_fmt=jpeg&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;具体实操&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;下面就方案三，进行具体的代码演示。&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;首先在网关侧，需要对进来的请求header添加外网标识符: from=public&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Component&lt;br/&gt;public class AuthFilter implements GlobalFilter, Ordered {&lt;br/&gt;    @Override&lt;br/&gt;    public Mono &amp;lt; Void &amp;gt; filter ( ServerWebExchange exchange, GatewayFilterChain chain ) {&lt;br/&gt;         &lt;span&gt;return&lt;/span&gt; chain.filter(&lt;br/&gt;         exchange.mutate().request(&lt;br/&gt;         exchange.getRequest().mutate().header(&lt;span&gt;&quot;id&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;).header(&lt;span&gt;&quot;from&quot;&lt;/span&gt;, &lt;span&gt;&quot;public&quot;&lt;/span&gt;).build())&lt;br/&gt;         .build()&lt;br/&gt;         )；&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Override&lt;br/&gt;    public int &lt;span&gt;getOrder&lt;/span&gt; () {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; 0;&lt;br/&gt;    }&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着，编写内外网访问权限判断的AOP和注解&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Aspect&lt;br/&gt;@Component&lt;br/&gt;@Slf4j&lt;br/&gt;public class OnlyIntranetAccessAspect {&lt;br/&gt; @Pointcut ( &lt;span&gt;&quot;@within(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;&lt;/span&gt; )&lt;br/&gt; public void &lt;span&gt;onlyIntranetAccessOnClass&lt;/span&gt; () {}&lt;br/&gt; @Pointcut ( &lt;span&gt;&quot;@annotation(org.openmmlab.platform.common.annotation.OnlyIntranetAccess)&quot;&lt;/span&gt; )&lt;br/&gt; public void &lt;span&gt;onlyIntranetAccessOnMethed&lt;/span&gt; () {&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; @Before ( value = &lt;span&gt;&quot;onlyIntranetAccessOnMethed() || onlyIntranetAccessOnClass()&quot;&lt;/span&gt; )&lt;br/&gt; public void &lt;span&gt;before&lt;/span&gt; () {&lt;br/&gt;     HttpServletRequest hsr = (( ServletRequestAttributes ) RequestContextHolder.getRequestAttributes()) .getRequest ();&lt;br/&gt;     String from = hsr.getHeader ( &lt;span&gt;&quot;from&quot;&lt;/span&gt; );&lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; ( !StringUtils.isEmpty( from ) &amp;amp;&amp;amp; &lt;span&gt;&quot;public&quot;&lt;/span&gt;.equals ( from )) {&lt;br/&gt;        log.error ( &lt;span&gt;&quot;This api is only allowed invoked by intranet source&quot;&lt;/span&gt; );&lt;br/&gt;        throw new MMException ( ReturnEnum.C_NETWORK_INTERNET_ACCESS_NOT_ALLOWED_ERROR);&lt;br/&gt;            }&lt;br/&gt;     }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;@Target({ElementType.METHOD})&lt;br/&gt;@Retention(RetentionPolicy.RUNTIME)&lt;br/&gt;@Documented&lt;br/&gt;public @interface OnlyIntranetAccess {&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;最后，在只能内网访问的接口上加上@OnlyIntranetAccess注解即可&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@GetMapping ( &lt;span&gt;&quot;/role/add&quot;&lt;/span&gt; )&lt;br/&gt;@OnlyIntranetAccess&lt;br/&gt;public String &lt;span&gt;onlyIntranetAccess&lt;/span&gt;() {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;该接口只允许内部服务调用&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;原文：blog.csdn.net/m0_71777195/article/details/127243452&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em/&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;527&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template-id=&quot;1357582&quot; data-mpa-category=&quot;image&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;span&gt;最后，关注公众号互联网架构师，在后台回复：2T，可以获取我整理的 Java 系列面试题和答案，非常齐全&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mp-common-profile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MTIzMzY3Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/9mQQWOf4KRLQqYEDy2Fy5k5UxiabD5mlSicsicQCZCiaHAkibbpfiatRnCg5DYCoLYzy1KsHJiba9pT8N6uV5qOrSI9hw/0?wx_fmt=png&quot; data-nickname=&quot;互联网架构师&quot; data-alias=&quot;app-jiagou&quot; data-signature=&quot;10+互联网开发技术老兵。关注回复：2T，获取一份完整的架构学习资料！&quot; data-from=&quot;1&quot; data-is_biz_ban=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;正文结束&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;推荐阅读 ↓↓↓&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247529588&amp;amp;idx=1&amp;amp;sn=9adea3eb1f5116dddf21513bfa0bedec&amp;amp;chksm=ea5fb912dd28300494cd8252da922f1fc6cf5a884436fd0534e25db5e910cd46567477a6fc05&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;求求你别在用SpringMVC了，太Low了！Spring又官宣了一个更牛逼的替代框架！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;求求你别在用SpringMVC了，太Low了！Spring又官宣了一个更牛逼的替代框架！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488035&amp;amp;idx=1&amp;amp;sn=5300893903094128bdc20ce2a5717a50&amp;amp;chksm=ea5cdf45dd2b56531ac0c3a8fb8b56b06bc546785f8772a4d02e2ca87c4e30f25b24bf21f784&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;从零开始搭建创业公司后台技术栈&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;3&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488928&amp;amp;idx=1&amp;amp;sn=4c56dd675e1b32a73b698df3d5e8609f&amp;amp;chksm=ea5cd8c6dd2b51d05e6d6d715418241f471ccb3002719263b2d0e092763f68f3691249970a08&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;程序员一般可以从什么平台接私活？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;4&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247530269&amp;amp;idx=1&amp;amp;sn=9f4f45fe6e961b139fb0f4448b339ca4&amp;amp;chksm=ea5fba7bdd28336d2a1a4b0234c6a1a4375668213c49b3579352a0bff57af09661cd66d4d094&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Spring Boot+Redis+拦截器+自定义Annotation实现接口自动幂等&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Spring Boot+Redis+拦截器+自定义Annotation实现接口自动幂等&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;5.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247513283&amp;amp;idx=1&amp;amp;sn=3b3d8e893a1241cf5af2150370ae9d71&amp;amp;chksm=ea5f79a5dd28f0b3a7603b1fbdb306f77ac64223bd05c4b7f0dc0469f77a68359810c5de2a01&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;为什么国内 996 干不过国外的 955呢？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;为什么国内 996 干不过国外的 955呢？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;6&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247528236&amp;amp;idx=1&amp;amp;sn=c675d5d3aede21b4b7ebbba21eadf96c&amp;amp;chksm=ea5fa24add282b5cfb13757cd534ec600fb910f9dcb7f3ee3dea5e7929e0fbbd22381625ff20&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;中国的铁路订票系统在世界上属于什么水平？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中国的铁路订票系统在世界上属于什么水平？&lt;/a&gt;                        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;7&lt;span&gt;.&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&amp;amp;mid=2247488564&amp;amp;idx=1&amp;amp;sn=256862239b12a1313919ee3ea6ff0d1c&amp;amp;chksm=ea5cd952dd2b50443feec88eb893233d2f6cf33f89e2ce72192c98035fd26cb0eb797a86f8f0&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;15张图看懂瞎忙和高效的区别！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100030073&quot; data-ratio=&quot;0.1328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/3GQek52mKtWDXtSkfViaQ2FZ2ZfSyjBcSkArjQVCMH4a7uxg6Vkibiaiciaiae2uxvzia7yib04tleLiaqcFVGUf2vcMf4A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;mp-style-type data-value=&quot;3&quot;/&gt;&lt;/p&gt;&lt;/div&gt;

          
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>767b78f100634f4c507f0070b10043f8</guid>
<title>Trait 使用及原理分析</title>
<link>https://toutiao.io/k/yo86c7x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;outline-text-headline-10&quot; class=&quot;outline-text-3&quot;&gt;&lt;p&gt;对于 &lt;code class=&quot;verbatim&quot;&gt;trait SubTrait: Base&lt;/code&gt; ，在目前的 Rust 版本中，是无法将 &lt;code class=&quot;verbatim&quot;&gt;&amp;amp;dyn SubTrait&lt;/code&gt; 转换到 &lt;code class=&quot;verbatim&quot;&gt;&amp;amp;dyn Base&lt;/code&gt; 的。这个限制与 trait object 的内存结构有关。&lt;/p&gt;&lt;p&gt;在 &lt;a href=&quot;https://iandouglasscott.com/2018/05/28/exploring-rust-fat-pointers/&quot;&gt;Exploring Rust fat pointers&lt;/a&gt; 一文中，该作者通过 transmute 将 trait object 的引用转为两个 usize，并且验证它们是指向数据与函数虚表的指针：&lt;/p&gt;&lt;div class=&quot;src src-rust&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;div class=&quot;chroma&quot;&gt;&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code&gt;&lt;span class=&quot;lnt&quot; id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;5&quot;&gt;&lt;a href=&quot;#5&quot;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;6&quot;&gt;&lt;a href=&quot;#6&quot;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;7&quot;&gt;&lt;a href=&quot;#7&quot;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;8&quot;&gt;&lt;a href=&quot;#8&quot;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;9&quot;&gt;&lt;a href=&quot;#9&quot;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;10&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;11&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;12&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;13&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;14&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;::&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 转为 trait object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;::&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;c1&quot;&gt;// a: 140735227204568
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// b: (140735227204568, 94484672107880)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;从这里可以看出：Rust 使用 fat pointer（除了一个指针外，还包含另外一些信息，类似于 &lt;code class=&quot;verbatim&quot;&gt;str&lt;/code&gt; ） 来表示 trait object 的引用，分布指向 data 与 vtable，这和 Go 中的 &lt;a href=&quot;https://research.swtch.com/interfaces&quot;&gt;interface&lt;/a&gt; 十分类似。可以用下面的伪代码来表示：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01esAA7q1z6A3inQpnF_!!581166664.jpg&quot; alt=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01esAA7q1z6A3inQpnF_!!581166664.jpg&quot; title=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01esAA7q1z6A3inQpnF_!!581166664.jpg&quot;/&gt;&lt;figcaption&gt;trait object reference&lt;/figcaption&gt;&lt;/figure&gt;&lt;div class=&quot;src src-rust&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;div class=&quot;chroma&quot;&gt;&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code&gt;&lt;span class=&quot;lnt&quot; id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;5&quot;&gt;&lt;a href=&quot;#5&quot;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;6&quot;&gt;&lt;a href=&quot;#6&quot;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;7&quot;&gt;&lt;a href=&quot;#7&quot;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;8&quot;&gt;&lt;a href=&quot;#8&quot;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;9&quot;&gt;&lt;a href=&quot;#9&quot;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;10&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;11&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TraitObjectReference&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vtable&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vtable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destructor&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;尽管 fat pointer 导致指针体积变大（无法使用 Atomic 之类指令），但是好处是更明显的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;由于 vtable 与原始对象是分开的，所以可以为已有类型实现新的 trait（比如 &lt;a href=&quot;https://users.rust-lang.org/t/what-are-blanket-implementations/49904&quot;&gt;blanket implementations&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;&lt;p&gt;调用虚表中的函数时，只需要引用一次，而在 C++ 中，vtable 是存在对象内部的，导致每一次函数调用都需要两次引用，如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01u6ms841z6A3cHRdJw_!!581166664.jpg&quot; alt=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01u6ms841z6A3cHRdJw_!!581166664.jpg&quot; title=&quot;https://img.alicdn.com/imgextra/i2/581166664/O1CN01u6ms841z6A3cHRdJw_!!581166664.jpg&quot;/&gt;&lt;figcaption&gt;cpp vtable two-level indirect&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果 trait 有继承关系时，vtable 是怎么存储不同 trait 的方法的呢？在目前的实现中，是依次存放在一个 vtable 中的，如下图：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://img.alicdn.com/imgextra/i4/581166664/O1CN01x8adaQ1z6A3bkyKqY_!!581166664.png&quot; alt=&quot;https://img.alicdn.com/imgextra/i4/581166664/O1CN01x8adaQ1z6A3bkyKqY_!!581166664.png&quot; title=&quot;https://img.alicdn.com/imgextra/i4/581166664/O1CN01x8adaQ1z6A3bkyKqY_!!581166664.png&quot;/&gt;&lt;figcaption&gt;多 trait 时 vtable 示意图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可以看到，所有 trait 的方法是顺序放在一起，并没有区分方法属于哪个 trait，这样也就导致无法进行 upcast，社区内有 &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/2765&quot;&gt;RFC 2765&lt;/a&gt; 在追踪这个问题，感兴趣的读者可参考，这里就不讨论解决方案了，介绍一种比较通用的&lt;a href=&quot;http://stackoverflow.com/a/28664881/403742&quot;&gt;解决方案&lt;/a&gt;，通过引入一个 AsBase 的 trait 来解决：&lt;/p&gt;&lt;div class=&quot;src src-rust&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;div class=&quot;chroma&quot;&gt;&lt;table class=&quot;lntable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code&gt;&lt;span class=&quot;lnt&quot; id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;5&quot;&gt;&lt;a href=&quot;#5&quot;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;6&quot;&gt;&lt;a href=&quot;#6&quot;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;7&quot;&gt;&lt;a href=&quot;#7&quot;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;8&quot;&gt;&lt;a href=&quot;#8&quot;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;9&quot;&gt;&lt;a href=&quot;#9&quot;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;10&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;11&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;12&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;13&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;14&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;15&quot;&gt;&lt;a href=&quot;#15&quot;&gt;15&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;16&quot;&gt;&lt;a href=&quot;#16&quot;&gt;16&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;17&quot;&gt;&lt;a href=&quot;#17&quot;&gt;17&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;18&quot;&gt;&lt;a href=&quot;#18&quot;&gt;18&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;19&quot;&gt;&lt;a href=&quot;#19&quot;&gt;19&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;20&quot;&gt;&lt;a href=&quot;#20&quot;&gt;20&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;21&quot;&gt;&lt;a href=&quot;#21&quot;&gt;21&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;22&quot;&gt;&lt;a href=&quot;#22&quot;&gt;22&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;23&quot;&gt;&lt;a href=&quot;#23&quot;&gt;23&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;24&quot;&gt;&lt;a href=&quot;#24&quot;&gt;24&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;25&quot;&gt;&lt;a href=&quot;#25&quot;&gt;25&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;26&quot;&gt;&lt;a href=&quot;#26&quot;&gt;26&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;27&quot;&gt;&lt;a href=&quot;#27&quot;&gt;27&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;28&quot;&gt;&lt;a href=&quot;#28&quot;&gt;28&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;29&quot;&gt;&lt;a href=&quot;#29&quot;&gt;29&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;30&quot;&gt;&lt;a href=&quot;#30&quot;&gt;30&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;31&quot;&gt;&lt;a href=&quot;#31&quot;&gt;31&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;32&quot;&gt;&lt;a href=&quot;#32&quot;&gt;32&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;33&quot;&gt;&lt;a href=&quot;#33&quot;&gt;33&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;34&quot;&gt;&lt;a href=&quot;#34&quot;&gt;34&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;35&quot;&gt;&lt;a href=&quot;#35&quot;&gt;35&lt;/a&gt;
&lt;/span&gt;&lt;span class=&quot;lnt&quot; id=&quot;36&quot;&gt;&lt;a href=&quot;#36&quot;&gt;36&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;lntd&quot;&gt;&lt;pre tabindex=&quot;0&quot; class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsBase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;c1&quot;&gt;// blanket implementation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsBase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;: &lt;span class=&quot;nc&quot;&gt;AsBase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;cp&quot;&gt;#[derive(Debug)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;: &lt;span class=&quot;kp&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;dyn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cl&quot;&gt;&lt;span class=&quot;w&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9ca0e4c6b4f309f06cb179310772e6b7</guid>
<title>用大白话给你解释 Zookeeper 的选举机制</title>
<link>https://toutiao.io/k/mopu7ql</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;code&gt;Zookeeper&lt;/code&gt; 是一个分布式服务框架，主要是用来解决分布式应用中遇到的一些数据管理问题如：&lt;code&gt;统一命名服务&lt;/code&gt;、&lt;code&gt;状态同步服务&lt;/code&gt;、&lt;code&gt;集群管理&lt;/code&gt;、&lt;code&gt;分布式应用配置项的管理&lt;/code&gt;等。&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以简单把 &lt;code&gt;Zookeeper&lt;/code&gt; 理解为分布式家庭的大管家，那么管家团队是如何选出&lt;code&gt;Leader&lt;/code&gt;的呢？好奇吗，接下来带领大家一探究竟。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;人类选举的基本原理&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲解 &lt;code&gt;Zookeeper&lt;/code&gt; 选举过程前先来介绍一下人类的选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们每个人或多或少都经历过几次选举，在投票的过程中可能会遇到这样几种情况：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;情况1&lt;/strong&gt;：自己与几个候选人都比较熟，你会将票投给你认为&lt;code&gt;能力比较强的人&lt;/code&gt;；&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5719844357976653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIgWicQJ5DI8tmjS8XZ956hG4ZodeSvTwfibEQ9FkIBMQ3Sr8Q6ERVAeZiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;figcaption&gt;熟人选举&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;情况2&lt;/strong&gt;：自己也是候选人，并且与其他几个候选人都不熟，这个时候你肯定想着要去拉票，因为觉得自己才是最厉害的人呀，所有人都应该把票投给我。但是遗憾的是在拉票的过程中，你&lt;code&gt;发现别人比你强&lt;/code&gt;，你开始自卑了，最终还是把票投给了自己认为最强的人。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4147982062780269&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIgBFHQMTlEcVgzQhbfic12NrC21xN2QYyC3CqicEAhTAqicciaO1laZrNiaQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;自己参与选举&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有人都投完票之后，最后从投票箱中进行统计，获得票数最多的人当选。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7966101694915254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIgY3X8TpnPrWZjiaF8fEyb5Jk6vibL74gPqrfBpUibgGUOjD6yUFNWT0mPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;708&quot; class=&quot;rich_pages wxw-img&quot;/&gt;&lt;figcaption&gt;思维导图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在整个投票过程中我们可以提炼出四个最核心的概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;候选人能力&lt;/code&gt;：投票的基本原则是选最强的人。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;遇强改投&lt;/code&gt;：如果后面发现更强的人可以改投票。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;投票箱&lt;/code&gt;：所有人的票都会放在投票箱。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;领导者&lt;/code&gt;：得票最多的人即为领导者。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从人类选举的原理我们来简单推导一下Zookeeper的选举原理。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Zookeeper选举的基本原理&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意如果 Zookeeper 是单机部署是不需要选举的，集群模式下才需要选举。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Zookeeper 的选举原理和人类选举的逻辑类似，套用一下人类选举的四个基本概念详细解释一下Zookeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何衡量 Zookeeper 节点个人能力？答案是靠&lt;code&gt;数据是否够新&lt;/code&gt;，如果节点的数据越新就代表这个节点的个人能力越强，是不是感觉很奇怪，就是这么定的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Zookeeper 中通常是以事务id（后面简称&lt;code&gt;zxid&lt;/code&gt;）来标识数据的新旧程度（版本），节点最新的zxid越大代表这个节点的数据越新，也就代表这个节点能力越强。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;zxid 的全称是 &lt;code&gt;ZooKeeper Transaction Id&lt;/code&gt;，即 Zookeeper 事务id。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在集群选举开始时，节点首先认为自己是最强的（即数据是最新的），然后在选票上写上自己的名字（包括&lt;code&gt;zxid&lt;/code&gt;和&lt;code&gt;sid&lt;/code&gt;），zxid 是事务id，sid 唯一标识自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;紧接着会将选票传递给其他节点，同时自己也会接收其他节点传过来的选票。每个节点接收到选票后会做比较，这个人是不是比我强（zxid比我大），如果比较强，那我就需要&lt;code&gt;改票&lt;/code&gt;，明明别人比我强，我也不能厚着脸皮对吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与人类选举投票箱稍微有点不一样，Zookeeper 集群会在每个节点的内存中维护一个投票箱。节点会将自己的选票以及其他节点的选票都放在这个投票箱中。由于选票是互相传阅的，所以最终每个节点投票箱中的选票会是一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在投票的过程中会去统计是否有超过一半的选票和自己选择的是同一个节点，即都认为某个节点是最强的。一旦集群中有&lt;code&gt;超过半数&lt;/code&gt;的节点都认为某个节点最强，那该节点就是领导者了，投票也宣告结束。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么场景下 Zookeeper 需要选举？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 Zookeeper 集群中的一台服务器出现以下两种情况之一时，需要进入 &lt;code&gt;Leader 选举&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）服务器初始化启动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）服务器运行期间 Leader 故障。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;启动时期的 Leader 选举&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设一个 Zookeeper 集群中有5台服务器，id从1到5编号，并且它们都是最新启动的，没有历史数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42679558011049723&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIglnOXwk3Gsceic0aWhH6FLactKKqcj65htlaIIlFe8tCiaDM4vGPiaic9ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1448&quot;/&gt;&lt;figcaption&gt;集群刚启动选举过程&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设服务器依次启动，我们来分析一下选举过程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）服务器1启动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一次选举，服务器1投自己一票，此时服务器1票数一票，不够半数以上（3票），选举无法完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;投票结果：服务器1为1票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器1状态保持为&lt;code&gt;LOOKING&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）服务器2启动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一次选举，服务器1和2分别投自己一票，此时服务器1发现服务器2的id比自己大，更改选票投给服务器2。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;投票结果：服务器1为0票，服务器2为2票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器1，2状态保持&lt;code&gt;LOOKING&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（3）服务器3启动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一次选举，服务器1、2、3先投自己一票，然后因为服务器3的id最大，两者更改选票投给为服务器3；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数（3票），&lt;strong&gt;服务器3当选&lt;code&gt;Leader&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器1，2更改状态为&lt;code&gt;FOLLOWING&lt;/code&gt;，服务器3更改状态为&lt;code&gt;LEADING&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（4）服务器4启动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发起一次选举，此时服务器1，2，3已经不是LOOKING 状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器4并更改状态为&lt;code&gt;FOLLOWING&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（5）服务器5启动&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与服务器4一样投票给3，此时服务器3一共5票，服务器5为0票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器5并更改状态为&lt;code&gt;FOLLOWING&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;最终的结果&lt;/strong&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器3是 &lt;code&gt;Leader&lt;/code&gt;，状态为 &lt;code&gt;LEADING&lt;/code&gt;；其余服务器是 &lt;code&gt;Follower&lt;/code&gt;，状态为 &lt;code&gt;FOLLOWING&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;运行时期的Leader选举&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Zookeeper运行期间 &lt;code&gt;Leader&lt;/code&gt; 和 &lt;code&gt;非 Leader&lt;/code&gt; 各司其职，当有非 Leader 服务器宕机或加入不会影响 Leader，但是一旦 Leader 服务器挂了，那么整个 Zookeeper 集群将暂停对外服务，会触发新一轮的选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初始状态下服务器3当选为&lt;code&gt;Leader&lt;/code&gt;，假设现在服务器3故障宕机了，此时每个服务器上zxid可能都不一样，server1为99，server2为102，server4为100，server5为101&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26116373477672533&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIgx0lf2BzgAzJWGyxiaAeQeBow4ibqTwxnR02fV5Gmb8Kx9kjfHoeKg0UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1478&quot;/&gt;&lt;figcaption&gt;集群 Leader 节点故障&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行期选举与初始状态投票过程基本类似，大致可以分为以下几个步骤：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）状态变更。Leader 故障后，余下的&lt;code&gt;非 Observer&lt;/code&gt; 服务器都会将自己的服务器状态变更为&lt;code&gt;LOOKING&lt;/code&gt;，然后开始进入&lt;code&gt;Leader选举过程&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）每个Server会发出投票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）接收来自各个服务器的投票，如果其他服务器的数据比自己的新会改投票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（4）处理和统计投票，每一轮投票结束后都会统计投票，超过半数即可当选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（5）改变服务器的状态，宣布当选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话不多说先来一张图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.422029702970297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpXZFmBor7Po6SCAW9ibMgIgLxUap97DMSydShdtlSK6SJeO0icibLRxYl5gqdia1HxaYmTssYMnqGsVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1616&quot;/&gt;&lt;figcaption&gt;运行器 Leader 故障后选举流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）第一次投票，每台机器都会将票投给自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）接着每台机器都会将自己的投票发给其他机器，如果发现其他机器的zxid比自己大，那么就需要改投票重新投一次。比如server1 收到了三张票，发现server2的xzid为102，pk一下发现自己输了，后面果断改投票选server2为老大。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;选举机制中涉及到的核心概念&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敲黑板了，这些概念是面试必考的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）Server id（或sid）：服务器ID&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有三台服务器，编号分别是1,2,3。编号越大在选择算法中的权重越大，比如初始化启动时就是根据服务器ID进行比较。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）Zxid：事务ID&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务器中存放的数据的事务ID，值越大说明数据越新，在选举算法中数据越新权重越大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（3）Epoch：逻辑时钟&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也叫投票的次数，同一轮投票过程中的逻辑时钟值是相同的，每投完一次票这个数据就会增加。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（4）Server状态：选举状态&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;LOOKING&lt;/code&gt;，竞选状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;FOLLOWING&lt;/code&gt;，随从状态，同步leader状态，参与投票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;OBSERVING&lt;/code&gt;，观察状态,同步leader状态，不参与投票。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;LEADING&lt;/code&gt;，领导者状态。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）Zookeeper 选举会发生在服务器初始状态和运行状态下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）初始状态下会根据服务器sid的编号对比，编号越大权值越大，投票过半数即可选出Leader。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）Leader 故障会触发新一轮选举，&lt;code&gt;zxid&lt;/code&gt; 代表数据越新，权值也就越大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（4）在运行期选举还可能会遇到脑裂的情况，大家可以自行学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;edit by 135editor&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;57&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;58&quot; data-fileid=&quot;100020427&quot; data-ratio=&quot;0.09907407407407408&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6v7SZOYzqNdvNNiakGiaRUk8QINC7kBDrRHu7zicKhlaia6TqRlTGkABnq2oPL506oAdQoFibPmWv8BatffhUMbc8Ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54e6aeb7f492a49752dfddf07b7deda5</guid>
<title>当我们谈论 DDD 时我们在谈论什么</title>
<link>https://toutiao.io/k/1oi6c7g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;p&gt;谈论到 &lt;a href=&quot;https://insights.thoughtworks.cn/tag/domain-driven-design/&quot;&gt;DDD&lt;/a&gt;，我们会聊&lt;a href=&quot;hhttps://insights.thoughtworks.cn/use-domain-events-in-microservices/&quot;&gt;事件风暴&lt;/a&gt;，会聊&lt;a href=&quot;https://insights.thoughtworks.cn/ddd-aggregation-bounded-context/&quot;&gt;限界上下文&lt;/a&gt;，会聊&lt;a href=&quot;https://insights.thoughtworks.cn/architecture-from-sandwich-to-hexagon/&quot;&gt;六边形架构&lt;/a&gt;，会聊&lt;a href=&quot;https://insights.thoughtworks.cn/ddd-business-design/&quot;&gt;实体值对象&lt;/a&gt;。这些概念各不相同，相关的概念也很不一样，但都属于DDD的范畴。见过了很多DDD的讨论和工作坊，我发现大家唇枪舌剑无法达成一致，往往是因为各自脑中的问题并不相同。&lt;/p&gt;
&lt;p&gt;我尝试在软件设计领域，将这些问题划分到几个相互独立的范畴，这可以帮助我和其他人讨论，在明确范围内可以更好的交流。&lt;/p&gt;
&lt;p&gt;一种比较经典的方式是划分为战略设计和战术设计。由于领域模型设计复杂度也很高，所以我又把领域模型设计从战术设计中划分出来，形成单独的范畴，以便更好的讨论。&lt;/p&gt;
&lt;p&gt;下面我将讨论这三个范畴的概念和方法。&lt;/p&gt;
&lt;h2&gt;DDD战略设计&lt;/h2&gt;
&lt;p&gt;在这个范畴里，主要讨论目标是复杂的业务需求。&lt;br/&gt;
有多复杂呢？可能需要多个团队分工合作，或者一个团队分阶段开发，需要被设计成多个独立部署运行的服务，会有多个代码库。&lt;/p&gt;
&lt;p&gt;这个范畴可以有很多名字，比如DDD战略设计、进程间架构、微服务架构设计等。&lt;/p&gt;
&lt;h4&gt;在这个范畴里讨论的主要问题是，如何将这个复杂的业务需求合理的分成多个部分，从而分而治之。&lt;/h4&gt;
&lt;p&gt;为什么要分成多个部分？因为解决复杂问题的一个有效方法是将其分解为多个相对简单的问题，然后分别解决。如果不进行分解，这个复杂问题往往会让我们在解决过程中陷入困境，就算设计出了解决方案，也往往由于解决方案过于复杂导致团队的认知超载。&lt;/p&gt;
&lt;h3&gt;划分方法&lt;/h3&gt;
&lt;p&gt;既然战略设计需要将整个业务需求分成多个部分，那么如何找到用于划分的接缝呢？&lt;/p&gt;
&lt;p&gt;我看到行业里有这样一些方法：&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;https://book.douban.com/subject/26819666/&quot;&gt;《领域驱动设计》&lt;/a&gt;中，Eric提出了限界上下文。从领域模型设计的角度，为了让模型保持完整独立和清晰，需要识别出限界上下文，让其作为模型的边界。在书中并没有完善的识别方法，更多的是提出一些概念。限界上下文往往被用来辅助判断接缝的正确性。&lt;/p&gt;
&lt;p&gt;在一个限界上下文中，领域知识是相对完整的。&lt;/p&gt;

&lt;p&gt;在《领域驱动设计》中，Eric提出了精炼及核心域。在模型中识别出最有价值的核心域，将其独立出来。&lt;/p&gt;
&lt;p&gt;由于只提到了核心域，所以这也不是一个完整的划分的方法。我曾在&lt;a href=&quot;https://insights.thoughtworks.cn/ddd-aggregation-bounded-context/&quot;&gt;如何划分限界上下文&lt;/a&gt;博客中基于此方法上提出了一种分解问题域的方法。&lt;/p&gt;

&lt;p&gt;事件风暴工作坊可能是最早用来指导划分限界上下文的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对前一步（事件风暴）产生的聚合进行分组，通过业务的内聚性和关联度划分边界，结合限界上下文的定义进行判断，并给出上下文名称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
——[&lt;a href=&quot;https://insights.thoughtworks.cn/ddd-aggregation-bounded-context/&quot;&gt;服务化设计阶段路径方案&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;但是「业务的内聚性和关联度」着实不是一个好的划分依据。而事件风暴的创始人Alberto曾经提出过&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75637519&quot;&gt;通过关键事件识别不同的阶段进而识别限界上下文&lt;/a&gt;的方法，看上去是一个更加靠谱的方法。&lt;/p&gt;

&lt;p&gt;8X Flow中提出了一套相对完整的划分方法。首先定义「业务」和「领域」，然后将「业务」和「领域」划分开来，接着基于合同将业务划分成了不同的上下文，最终完成了划分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/FUp6hu30sjXVbfHanhJGkA&quot;&gt;现代企业架构白皮书&lt;/a&gt;提出通过职责类型划分。流转类识别不同的业务流程阶段，规格类提取业务规则，视图类专为统计报表而存在，配置类提供配置工具。&lt;/p&gt;
&lt;h3&gt;重新思考&lt;/h3&gt;
&lt;p&gt;我也尝试过一些其他的划分方法，比如通过时间阶段划分，通过使用者不同划分，通过使用场景不同划分，通过变化频率不同划分。这些方法和上面的一些方法都有些相似。&lt;/p&gt;
&lt;p&gt;不好的划分方法可能会导致&lt;a href=&quot;https://www.simplethread.com/youre-not-actually-building-microservices/&quot;&gt;分布式单体&lt;/a&gt;：每次变化不得不修改多个服务、每次部署必须同时部署多个服务，服务之间有非常多的通信，同一个团队管理着多个服务，服务之间共享数据库、同样的代码和模型。&lt;/p&gt;
&lt;p&gt;也许我们可以总结出一些原则，来帮助我们验证划分是否合理。比如高内聚低耦合，比如服务有明确的边界且能自治，可以独立演进，比如尽可能减少对于其他服务的依赖。&lt;/p&gt;
&lt;h2&gt;DDD战术设计&lt;/h2&gt;
&lt;p&gt;在战略层面划分好了服务后，我们来看看一个服务内部。&lt;/p&gt;
&lt;h4&gt;在这个范畴里，主要讨论在一个服务内部，如何划分和组织代码。&lt;/h4&gt;
&lt;p&gt;和上一节类似，在代码也有不同的职责；和上一节不同，对于代码层面的划分，已经有相对成熟的方法。&lt;/p&gt;
&lt;p&gt;这个范畴可以有很多名字，比如DDD战术设计、进程内架构、分层架构等。&lt;/p&gt;
&lt;p&gt;需要指出的是，在一个服务内部，如果领域模型足够复杂，在分离领域逻辑和技术实现细节前，也需要先按照模块进行一次划分，然后再按上述的领域逻辑和技术实现细节的方式划分。相关讨论可以参见&lt;a href=&quot;https://groups.google.com/a/thoughtworks.com/g/china/c/GhjPh0rpNeA/m/8OSJnbbtEgAJ&quot;&gt;前缀分包vs后缀分包&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;划分方法&lt;/h3&gt;

&lt;p&gt;Eric在2003年提出的分层架构。和传统的展示层+业务逻辑层+数据访问层的三层架构相比多了一层，主要区别是将业务逻辑层分成了应用层和领域层。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-1.png&quot; alt=&quot;《领域驱动设计》中的分层架构&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;图片引自《领域驱动设计》第4章&lt;/h5&gt;
&lt;p&gt;其中「应用层」这个概念，也指明了它和领域层的区别：领域层专注表达领域概念，而应用层则在领域层之上，加入了诸如持久化概念和事务概念等软件的典型概念，对外提供了满足具体场景的功能。展示层则在应用层功能之上，定义了和外部系统通信的具体形式。&lt;/p&gt;
&lt;p&gt;这里也将数据访问层变成了基础设施层。基础设施层为其他层提供支撑其概念的具体技术实现。&lt;/p&gt;

&lt;p&gt;2005年&lt;a href=&quot;https://web.archive.org/web/20180822100852/http://alistair.cockburn.us/Hexagonal+architecture&quot;&gt;六边形架构&lt;/a&gt;（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/113681224&quot;&gt;翻译&lt;/a&gt;）又称端口和适配器架构，从设计模式的视角将代码划分成了负责业务逻辑的「应用」和负责同外部系统交互的「适配器」。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-2.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-2.png&quot; alt=&quot;六边形架构&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;图片引自《六边形架构》&lt;/h5&gt;
&lt;p&gt;在2013的&lt;a href=&quot;https://book.douban.com/subject/25844633/&quot;&gt;IDDD&lt;/a&gt;中Vaughn将六边形架构和DDD进行了结合，把「应用」又细分成了「应用程序」和「领域模型」。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-3.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-3.png&quot; alt=&quot;六边形架构也称为端口与适配器。对于每种外界类型，都有一个适配器与之相对应。 外界通过应用层API与内部进行交互。&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;图片引自《实现领域驱动设计》第4章&lt;/h5&gt;
&lt;p&gt;2008年的&lt;a href=&quot;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&quot;&gt;洋葱架构&lt;/a&gt;也是类似的。&lt;/p&gt;
&lt;p&gt;六边形架构从另外一个角度审视了一个理想架构，并将领域层放在中心，凸显其核心地位。&lt;/p&gt;

&lt;p&gt;Uncle Bob在2012提出了&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;整洁架构&lt;/a&gt;，一般来说我们认为整洁架构的四层（四圈）和IDDD的六边形架构基本是对应的，只是整洁架构将适配器划分成了和框架耦合的「Frameworks &amp;amp; Drivers」层和负责内外层数据转换的「Interface Adapters」层。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-4.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2022/11/strategy-and-tactical-design-of-ddd-4.png&quot; alt=&quot;整洁架构&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;图片引自《整洁架构》&lt;/h5&gt;
&lt;p&gt;整洁架构也用「用例」来描述业务实体之外的一层，对应于「应用层」，更明确的指明了这层的职责是实现各个用例。&lt;/p&gt;
&lt;p&gt;比较有趣的是，整洁架构把Gateway接口放到了领域层之外的「用例层」。这使得领域层只关注于当前上下文的逻辑，而让用例层负责和其他上下文/资源库的协调和编排。&lt;/p&gt;
&lt;p&gt;整洁架构也讨论了如何处理框架和架构的关系。&lt;/p&gt;

&lt;p&gt;2017年更有集DDD、洋葱架构、整洁架构、CQRS于一体的&lt;a href=&quot;https://www.jianshu.com/p/d3e8b9ac097b&quot;&gt;清晰架构&lt;/a&gt;出现。&lt;/p&gt;
&lt;h3&gt;重新思考&lt;/h3&gt;
&lt;p&gt;以上的架构，指导每一个具体的业务功能分解来说是非常够用的。然而在一个真实的项目中，除了每个具体功能的分层，其实还有一些对于平台和框架的配置，这些其实要和每个业务功能的代码有所区分，从代码结构上独立出来。&lt;/p&gt;
&lt;p&gt;另外，每一层都会有一些可以复用的代码。比如领域层的基础的业务异常，应用层的事务处理，适配器层的HTTP客户端。这些不只用于单个模块或者单个服务，也可以用于多个服务；有些已经有三方工具，有些需要我们自己定义和封装。&lt;/p&gt;
&lt;p&gt;我看到很多项目对于以上两类代码并没有区分，而是把一切不属于其他层的代码都放到了基础设施层。让可怜的基础设施层逐渐变成了垃圾桶。&lt;/p&gt;
&lt;h2&gt;领域模型设计&lt;/h2&gt;
&lt;p&gt;在战术层面划分好架构后，我们来看看位于核心的领域模型。&lt;/p&gt;
&lt;h4&gt;在这个范畴里，主要讨论基于面向对象技术，如何用领域模型来表达业务概念。&lt;/h4&gt;
&lt;p&gt;为什么要使用领域模型这种模式，而不是用Service+数据模型的模式呢？如果复杂的业务逻辑采用数据模型这种模式，那么Service里会存在大量的复杂的逻辑，代码是很难维护的。而领域模型充分利用了面向对象技术的优势，将复杂度转变为职责明确的组件组合，让各个组件相对简单，来降低认知负载，提升可维护性。这就是设计的力量。&lt;/p&gt;
&lt;p&gt;那为什么用面向对象技术呢？面向对象思想更加符合我们认知复杂问题的方式，并且现代编程语言都普遍支持面向对象，所以DDD选择了面向对象技术。&lt;/p&gt;
&lt;h3&gt;关注点分离模式&lt;/h3&gt;
&lt;p&gt;在这个范畴里，主要还是使用《领域驱动设计》中的模式。我们以关注点分离的角度，来解析这些模式。&lt;/p&gt;

&lt;p&gt;从生命周期的角度，「领域对象」分为这样几个类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和应用生命周期一致，应用启动时被创建出来，应用关闭时才销毁。比如《领域驱动设计》5.4.1中的「资金转账」。&lt;/li&gt;
&lt;li&gt;在业务过程中被创建，会被保留一段时间，不随着应用关闭销毁。比如电商系统中的「订单」。&lt;/li&gt;
&lt;li&gt;在业务过程中被创建，在使用完成后即被销毁。比如一些在对象之间传递的参数对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而在《领域驱动设计》的第5章，Eric也将领域对象划分为了实体、值对象、领域服务这三个重要模式。这三个模式和生命周期是如何对应的呢？&lt;/p&gt;
&lt;p&gt;对于类型1，和应用生命周期一致，就是领域服务这种模式。对于类型2，在业务过程中被创建，会被保留一段时间，对应于实体和值对象。而对于类型3，在业务过程中被创建随即被销毁，对应于值对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VALUE OBJECT 经常作为参数在对象之间传递消息。它们常常是临时对象，在一次操作中被创建，然后丢弃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——《领域驱动设计》 5.3 值对象&lt;/p&gt;

&lt;p&gt;从生命周期角度，对于这三类领域对象的创建逻辑，可以使用Factory模式，将其封装在Factory中。对于类型2的领域对象的保留及之后的查询，可以使用Repository模式，将其模拟成一个集合从而进行存取操作。&lt;/p&gt;
&lt;p&gt;Eric把Factory和Repository被归为「支持对象」，以和其他用于表示模型的领域对象分开。&lt;/p&gt;

&lt;p&gt;使用无副作用的函数模式，把没有副作用的查询逻辑提取出来，成为无副作用的函数，而让有副作用的命令尽可能简单。&lt;/p&gt;
&lt;p&gt;基于同样的理由，我也在考虑将有IO操作的逻辑提取出来，直接让应用层调用，而不是和其他业务逻辑组合。&lt;/p&gt;

&lt;p&gt;使用Strategy模式，把业务逻辑中的变化点放到策略对象中，让不同的实现可以互换，从而实现关注点分离。&lt;/p&gt;

&lt;p&gt;使用Specification模式，将领域中用于判断是非的业务规则放到规格对象中。&lt;/p&gt;

&lt;p&gt;采用Intention-Revealing Interface和Cohesive Mechanism模式，把「做什么」和「怎么做」分离。让释意接口专注于表明意图，方便调用方使用；让内聚机制封装实现细节，在释意接口背后解决问题。&lt;/p&gt;
&lt;h3&gt;重新思考&lt;/h3&gt;
&lt;p&gt;我发现在OO BootCamp中得到的模型往往无法直接用于真实项目中，这让我用新的角度重新学习和思考了领域模型。&lt;/p&gt;
&lt;p&gt;在实际项目中，设计者往往过早陷入对于一些具体模式的识别，比如实体、聚合、领域服务，而忽略了如何设计一个可以表达领域概念的模型。我们应该基于领域概念设计领域模型，然后再采用合适的模式降低领域模型的复杂度，进一步增加领域模型的表达能力。&lt;/p&gt;
&lt;p&gt;很多项目虽然也使用了以领域为核心的架构，但是设计者仍然是数据模型/贫血模型的思考方式，把大量领域逻辑放置在了万能的Service中，让领域概念隐藏在了冗长的过程代码中，丝毫没有享受到DDD带来的收益。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;徐昊在极客时间的《如何落地业务建模》课程中说DDD至少可以指代一种建模法，一种协同工作方式和一种价值观。而我在这里着重讨论了软件设计相关的建模法。&lt;/p&gt;
&lt;p&gt;Eric在《领域驱动设计》一书中提出，软件设计应该以领域为中心，而不是技术问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件的核心是其为用户解决领域相关的问题的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——《领域驱动设计》 第一部分&lt;/p&gt;
&lt;p&gt;在学习了让我们眼花缭乱的众多方法后，我们重新回到DDD的初衷，重新审视软件设计和DDD之间的关系，让DDD帮助我们提升软件设计能力。&lt;/p&gt;
&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>